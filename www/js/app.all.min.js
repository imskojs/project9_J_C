'use strict';

(function (angular) {
  'use strict';

  angular.module('app', ['ionic', 'applicat.push.service', 'ngCordova', 'ngResource', 'ngFileUpload', 'ngTemplates', 'ngStorage', 'ngImgCrop', 'ngAnimate']).
  // "ui.bootstrap.tpls",
  // "ui.bootstrap.datepicker"
  run(init);

  init.$inject = ['$ionicPlatform', '$window', '$rootScope', '$state', 'RootScope', 'Preload', 'PushService', 'DEV_MODE', 'Assets', 'BackButton'];

  function init($ionicPlatform, $window, $rootScope, $state, RootScope, Preload, PushService, DEV_MODE, Assets, BackButton) {
    Preload.assets(Assets);
    angular.extend($rootScope, RootScope);

    if (DEV_MODE) {
      setInitialState();
    }

    $ionicPlatform.ready(onIonicPlatformReady);

    //====================================================
    //  Implementation
    //====================================================
    function onIonicPlatformReady() {
      if ($window.cordova && $window.cordova.plugins.Keyboard) {
        // PushService.registerDevice();
        $window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        PushService.registerDevice(); //디바이스의 id를 등록
        BackButton.register();
      }
      if ($window.StatusBar) {
        // $window.StatusBar.styleDefault();
        $window.StatusBar.backgroundColorByHexString("#9b2142");
        //안드로이드 5.0 이상에서만 작동
      }
      setInitialState();
    }
    //====================================================
    //  Helper
    //====================================================
    function setInitialState() {
      if ($rootScope.AppStorage.isFirstTime && $state.get('Main.WalkThrough')) {
        // First time user logic
        $state.go('Main.WalkThrough');
      } else if (!$rootScope.AppStorage.token) {
        // Not logged in user logic
        $state.go('Main.Footer.Home');
      } else {
        // Normal user logic
        // $state.go('Main.Home');
        $state.go('Main.Footer.Home');
      }
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').config(route);
  route.$inject = ['$stateProvider', '$httpProvider', '$ionicConfigProvider'];

  function route($stateProvider, $httpProvider, $ionicConfigProvider) {

    $ionicConfigProvider.scrolling.jsScrolling(false);
    $httpProvider.interceptors.push('AuthInterceptor');

    $stateProvider.state('Main', {
      // abstract: true,
      url: '/Main',
      templateUrl: 'state/0Main/Main.html',
      controller: 'MainController as Main'
    }).state('Main.Footer', {
      // abstract: true,
      url: '/Footer',
      views: {
        Main: {
          templateUrl: 'state/1Footer/Footer.html',
          controller: 'FooterController as Footer'
        }
      }
    }).state('Main.Footer.Home', {
      url: '/Home',
      views: {
        Footer: {
          templateUrl: 'state/Home/Home.html',
          controller: 'HomeController as vm'
        }
      }
    }).state('Main.Search', {
      url: '/Search',
      views: {
        Main: {
          templateUrl: 'state/Search/Search.html',
          controller: 'SearchController as vm'
        }
      }
    }).state('Main.PlaceList', {
      url: '/PlaceList',
      views: {
        Main: {
          templateUrl: 'state/PlaceList/PlaceList.html',
          controller: 'PlaceListController as vm'
        }
      }
    }).state('Main.PlaceDetail', {
      params: {
        placeId: ''
      },
      url: '/PlaceDetail',
      views: {
        Main: {
          templateUrl: 'state/PlaceDetail/PlaceDetail.html',
          controller: 'PlaceDetailController as vm'
        }
      }
    }).state('Main.RequestUpdate', { //상태의 이름
      params: {
        placeId: '',
        placeName: ''
      },
      url: '/RequestUpdate', //접속할 angular의 url
      views: { //ion-nav-view의 name속성의 값을 참조함.
        Main: { //<ion-nav-view name="Main"> 태그에 렌더링할 대상을 설정
          templateUrl: 'state/RequestUpdate/RequestUpdate.html', //렌더링 할 html파일
          controller: 'RequestUpdateController as vm' //html파일에서 사용할 Angular의 컨트롤러
        }
      }
    }).state('Main.GoogleMap', {
      params: {
        placeAddress: '',
        placeId: '',
        place: {}
      },
      url: '/GoogleMap',
      views: {
        Main: {
          templateUrl: 'state/GoogleMap/GoogleMap.html',
          controller: 'GoogleMapController as vm'
        }
      }
    }).state('Main.ReviewCreate', {
      params: {
        placeId: ''
      },
      url: '/ReviewCreate',
      views: {
        Main: {
          templateUrl: 'state/ReviewCreate/ReviewCreate.html',
          controller: 'ReviewCreateController as vm'
        }
      }
    }).state('Main.CommentCreate', {
      params: {
        reviewId: '',
        reviewOwner: ''
      },
      url: '/CommentCreate',
      views: {
        Main: {
          templateUrl: 'state/CommentCreate/CommentCreate.html',
          controller: 'CommentCreateController as vm'
        }
      }
    }).state('Main.MessageCreate', {
      params: {
        placeName: ''
      },
      url: '/MessageCreate/:ownerId',
      views: {
        Main: {
          templateUrl: 'state/MessageCreate/MessageCreate.html',
          controller: 'MessageCreateController as vm'
        }
      }
    }).state('Main.MenuList', {
      params: {
        placeId: ''
      },
      url: '/MenuList',
      views: {
        Main: {
          templateUrl: 'state/MenuList/MenuList.html',
          controller: 'MenuListController as vm'
        }
      }
    }).state('Main.Footer.EventTab', {
      //위에 선언된 state의 Main을 체크하고, Footer를 체크한뒤, 그에대한 체인으로 EventTab를 선언함.
      url: '/EventTab',
      views: {
        Footer: { //<ion-nav-view name="Footer"> 태그를 상위객체 Footer에서 찾지만, 만약 없다해도 EventTab의 내용이 렌더링되지 않을 뿐이며 에러는 발생되지 않는것으로 확인.
          templateUrl: 'state/EventTab/EventTab.html',
          controller: 'EventTabController as vm'
        }
      }
    }).state('Main.Footer.EventTab.JoodangEventList', {
      url: '/JoodangEventList',
      views: {
        EventTab: {
          templateUrl: 'state/JoodangEventList/JoodangEventList.html',
          controller: 'JoodangEventListController as vm'
        }
      }
    }).state('Main.Footer.EventTab.BarEventList', {
      url: '/BarEventList',
      views: {
        EventTab: {
          templateUrl: 'state/BarEventList/BarEventList.html',
          controller: 'BarEventListController as vm'
        }
      }
    }).state('Main.JoodangEventDetail', {
      params: {
        eventId: ''
      },
      url: '/JoodangEventDetail',
      views: {
        Main: {
          templateUrl: 'state/JoodangEventDetail/JoodangEventDetail.html',
          controller: 'JoodangEventDetailController as vm'
        }
      }
    }).state('Main.BarEventDetail', {
      params: {
        eventId: ''
      },
      url: '/BarEventDetail',
      views: {
        Main: {
          templateUrl: 'state/BarEventDetail/BarEventDetail.html',
          controller: 'BarEventDetailController as vm'
        }
      }
    }).state('Main.Footer.SearchTab', {
      url: '/SearchTab',
      views: {
        Footer: {
          templateUrl: 'state/SearchTab/SearchTab.html',
          controller: 'SearchTabController as vm'
        }
      }
    }).state('Main.Footer.SearchTab.ThemeList', {
      url: '/ThemeList',
      views: {
        SearchTab: {
          templateUrl: 'state/ThemeList/ThemeList.html',
          controller: 'ThemeListController as vm'
        }
      }
    }).state('Main.Footer.SearchTab.KeywordList', {
      url: '/KeywordList',
      views: {
        SearchTab: {
          templateUrl: 'state/KeywordList/KeywordList.html',
          controller: 'KeywordListController as vm'
        }
      }
    }).state('Main.Footer.SearchTab.ProvinceList', {
      url: '/ProvinceList',
      views: {
        SearchTab: {
          templateUrl: 'state/ProvinceList/ProvinceList.html',
          controller: 'ProvinceListController as vm'
        }
      }
    }).state('Main.ProvinceSearchList', {
      params: {
        province: ''
      },
      url: '/ProvinceSearchList',
      views: {
        Main: {
          templateUrl: 'state/ProvinceSearchList/ProvinceSearchList.html',
          controller: 'ProvinceSearchListController as vm'
        }
      }
    }).state('Main.ThemeSearchList', {
      params: {
        themeTitle: ''
      },
      url: '/ThemeSearchList',
      views: {
        Main: {
          templateUrl: 'state/ThemeSearchList/ThemeSearchList.html',
          controller: 'ThemeSearchListController as vm'
        }
      }
    }).state('Main.KeywordSearchList', {
      params: {
        keywords: '',
        keywordString: ''
      },
      url: '/KeywordSearchList',
      views: {
        Main: {
          templateUrl: 'state/KeywordSearchList/KeywordSearchList.html',
          controller: 'KeywordSearchListController as vm'
        }
      }
    }).state('Main.Footer.TalkList', {
      url: '/TalkList',
      views: {
        Footer: {
          templateUrl: 'state/TalkList/TalkList.html',
          controller: 'TalkListController as vm'
        }
      }
    }).state('Main.Footer.MyTalkList', {
      url: '/MyTalkList',
      views: {
        Footer: {
          templateUrl: 'state/MyTalkList/MyTalkList.html',
          controller: 'MyTalkListController as vm'
        }
      }
    }).state('Main.Footer.TalkDetail', {
      params: {
        postId: ''
      },
      url: '/TalkDetail',
      views: {
        Footer: {
          templateUrl: 'state/TalkDetail/TalkDetail.html',
          controller: 'TalkDetailController as vm'
        }
      }
    }).state('Main.Footer.TalkCreate', {
      url: '/TalkCreate',
      views: {
        Footer: {
          templateUrl: 'state/TalkCreate/TalkCreate.html',
          controller: 'TalkCreateController as vm'
        }
      }
    }).state('Main.Footer.TalkUpdate', {
      params: {
        postId: ''
      },
      url: '/TalkUpdate',
      views: {
        Footer: {
          templateUrl: 'state/TalkUpdate/TalkUpdate.html',
          controller: 'TalkUpdateController as vm'
        }
      }
    }).state('Main.Footer.SettingList', {
      url: '/SettingList',
      views: {
        Footer: {
          templateUrl: 'state/SettingList/SettingList.html',
          controller: 'SettingListController as vm'
        }
      }
    }).state('Login', {
      url: '/Login',
      templateUrl: 'state/Login/Login.html',
      controller: 'LoginController as vm'
    }).state('Main.Footer.Profile', {
      url: '/Profile',
      views: {
        Footer: {
          templateUrl: 'state/Profile/Profile.html',
          controller: 'ProfileController as vm'
        }
      }
    }).state('Main.FavoriteList', {
      url: '/FavoriteList',
      views: {
        Main: {
          templateUrl: 'state/FavoriteList/FavoriteList.html',
          controller: 'FavoriteListController as vm'
        }
      }
    }).state('Main.MyMessageList', {
      url: '/MyMessageList',
      views: {
        Main: {
          templateUrl: 'state/MyMessageList/MyMessageList.html',
          controller: 'MyMessageListController as vm'
        }
      }
    }).state('Main.NoticeList', {
      url: '/NoticeList',
      views: {
        Main: {
          templateUrl: 'state/NoticeList/NoticeList.html',
          controller: 'NoticeListController as vm'
        }
      }
    }).state('Main.NoticeDetail', {
      params: {
        postId: ''
      },
      url: '/NoticeDetail',
      views: {
        Main: {
          templateUrl: 'state/NoticeDetail/NoticeDetail.html',
          controller: 'NoticeDetailController as vm'
        }
      }
    }).state('Main.TermList', {
      url: '/TermList',
      views: {
        Main: {
          templateUrl: 'state/TermList/TermList.html',
          controller: 'TermListController as TermList'
        }
      }
    }).state('Main.TermDetail', {
      url: '/TermDetail',
      views: {
        Main: {
          templateUrl: 'state/TermDetail/TermDetail.html',
          controller: 'TermDetailController as TermDetail'
        }
      }
    }).state('Main.CustomerList', {
      url: '/CustomerList',
      views: {
        Main: {
          templateUrl: 'state/CustomerList/CustomerList.html',
          controller: 'CustomerListController as CustomerList'
        }
      }
    }).state('Main.FaqList', {
      url: '/FaqList',
      views: {
        Main: {
          templateUrl: 'state/FaqList/FaqList.html',
          controller: 'FaqListController as vm'
        }
      }
    }).state('Main.ContactCreate', {
      url: '/ContactCreate',
      views: {
        Main: {
          templateUrl: 'state/ContactCreate/ContactCreate.html',
          controller: 'ContactCreateController as vm'
        }
      }
    }).state('Main.CompanyCreate', {
      url: '/CompanyCreate',
      views: {
        Main: {
          templateUrl: 'state/CompanyCreate/CompanyCreate.html',
          controller: 'CompanyCreateController as vm'
        }
      }
    }).state('Main.RequestCreate', {
      url: '/RequestCreate',
      views: {
        Main: {
          templateUrl: 'state/RequestCreate/RequestCreate.html',
          controller: 'RequestCreateController as vm'
        }
      }
    })

    //====================================================
    //  ZZZ Samples
    //====================================================
    .state('zLogin', {
      url: '/zLogin',
      templateUrl: 'state/ZZZ/Login/Login.html',
      controller: 'zLoginController as Login'
    }).state('Main.zSignup', {
      url: '/zSignup',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/Signup/Signup.html',
          controller: 'zSignupController as Signup'
        }
      }
    }).state('Main.zTerms', {
      url: '/zTerms',
      templateUrl: 'state/ZZZ/Terms/Terms.html',
      controller: 'zTermsController as Terms'
    }).state('Main.zPostList', {
      url: '/zPostList',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostList/PostList.html',
          controller: 'zPostListController as PostList'
        }
      }
    }).state('Main.zPostDetail', {
      url: '/zPostDetail/:id',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostDetail/PostDetail.html',
          controller: 'zPostDetailController as PostDetail'
        }
      }
    }).state('Main.zPostUpdate', {
      url: '/zPostUpdate/:id',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostUpdate/PostUpdate.html',
          controller: 'zPostUpdateController as PostUpdate'
        }
      }
    }).state('Main.zPostCreate', {
      url: '/zPostCreate',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/PostCreate/PostCreate.html',
          controller: 'zPostCreateController as PostCreate'
        }
      }
    }).state('Main.zCouponList', {
      url: '/zCouponList',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/CouponList/CouponList.html',
          controller: 'zCouponListController as CouponList'
        }
      }
    }).state('Main.zCouponDetail', {
      url: '/zCouponDetail',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/CouponDetail/CouponDetail.html',
          controller: 'zCouponDetailController as CouponDetail'
        }
      }
    }).state('Main.zProfile', {
      url: '/zProfile',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/Profile/Profile.html',
          controller: 'zProfileController as Profile'
        }
      }
    }).state('Main.zPassword', {
      url: '/zPassword',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/Password/Password.html',
          controller: 'zPasswordController as Password'
        }
      }
    }).state('Main.zTransaction', {
      url: '/zTransaction',
      views: {
        Main: {
          templateUrl: 'state/ZZZ/Transaction/Transaction.html',
          controller: 'zTransactionController as Transaction'
        }
      }
    });
  } //route end
})(angular);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Utility
(function (angular) {
  'use strict';

  angular.module('app').factory('PhotoClass', PhotoClass);

  PhotoClass.$inject = ['$window', 'Message'];

  function PhotoClass($window, Message) {
    var _ = $window._;

    return function () {
      function Photo() {
        _classCallCheck(this, Photo);
      }

      _createClass(Photo, [{
        key: 'pushToImages',

        // (banner.photos, Model.images)
        // on banner response push photos to images
        value: function pushToImages(imagesArray, photos) {
          if (!Array.isArray(photos)) {
            photos = photos ? [photos] : [];
          }
          if (!Array.isArray(imagesArray)) {
            imagesArray = [];
          }
          angular.forEach(photos, function (photo) {
            imagesArray.push(photo);
          });
        }

        // on deselect photo remove photo from images      ?, and add photo.id to destroy
        // on deselect file remove file from images

      }, {
        key: 'deselectImage',
        value: function deselectImage(imagesArray, $index) {
          if (imagesArray[$index].id) {
            // is a photo
            imagesArray.splice($index, 1);
          } else if (imagesArray[$index].name || imagesArray[$index].blobUrl) {
            // is a file/blob
            imagesArray.splice($index, 1);
          } else {
            console.log("'not a photo/file/blob --deselectImage--'");
            return false;
          }
        }

        // on new tempFiles push to images i.e on ngf-select;

      }, {
        key: 'selectImage',
        value: function selectImage(imagesArray, tempFiles, limit) {
          if (!Array.isArray(imagesArray)) {
            imagesArray = [];
            console.log('vm.Model.images not defined');
          }
          if (!Array.isArray(tempFiles)) {
            tempFiles = [];
            console.log('vm.Model.tempFiles not defined');
          }
          angular.forEach(tempFiles, function (file) {
            imagesArray.push(file);
          });
          if (imagesArray.length > limit) {
            Message.alert('사진수 초과', '사진은 최대 ' + limit + '개 까지만 업로드 가능합니다.');
            imagesArray.splice(limit, imagesArray.length);
          }
        }

        // onBefore request, loop images and find index of file
        // and add {index: $indexOfFile} to create

      }, {
        key: 'processCreate',
        value: function processCreate(imagesArray, createArray, files) {
          if (!Array.isArray(files)) {
            files = [];
          }
          angular.forEach(imagesArray, function (image, i) {
            if (!image.id) {
              files.push(image);
              createArray.push({ index: i });
            }
          });
        }

        // onBefore request, find photos to delete and add to delete array
        // finde difference between images and photos and create destroy array

      }, {
        key: 'processDestroy',
        value: function processDestroy(imagesArray, destroyArray, initialPhotos) {
          if (!Array.isArray(initialPhotos)) {
            initialPhotos = initialPhotos ? [initialPhotos] : [];
          }
          if (!Array.isArray(destroyArray)) {
            destroyArray = [destroyArray];
          }
          var photosArray = [];
          angular.forEach(imagesArray, function (image) {
            if (image.id) {
              photosArray.push(image);
            }
          });
          var idInImages = _.map(photosArray, 'id');
          var idInInitialPhotos = _.map(initialPhotos, 'id');
          var differences = _.difference(idInInitialPhotos, idInImages);
          angular.forEach(differences, function (toDeleteId) {
            destroyArray.push(toDeleteId);
          });
        }

        // on response of created photoIds create array of photoIds with exsiting non-file images
        // prepend to photos.

      }, {
        key: 'createPhotoIds',
        value: function createPhotoIds(imagesArray, initialPhotos, createdPhotoIds) {
          if (!initialPhotos) {
            initialPhotos = [];
          }
          if (!Array.isArray(initialPhotos)) {
            initialPhotos = [initialPhotos];
          }
          var photosArray = [];
          angular.forEach(imagesArray, function (image) {
            if (image.id) {
              photosArray.push(image);
            }
          });
          var idInImages = _.map(photosArray, 'id');
          var idInPhotos = _.map(initialPhotos, 'id');
          var intersection = _.intersection(idInImages, idInPhotos);
          var photos = _.concat(intersection, createdPhotoIds);
          return photos;
        }
      }]);

      return Photo;
    }();
  } // Service END
})(angular);
'use strict';

// Used to preload assets. Done automatically in gulp
(function (angular) {
  'use strict';

  angular.module('app').value('Assets', []);
})(angular);
'use strict';

// App constants
(function (angular) {
  'use strict';

  angular.module('app')
  // Social login with Kakao
  .constant("KAKAO_KEY", "a1ef842bdf88eba20e94ca20eba4bb64")
  // Social login with Facebook
  .constant("FACEBOOK_KEY", "467900493412087")
  // Social login with twitter
  .constant("TWITTER_CONSUMER_KEY", "abCde1GHiJklmn2PqRSTuVWXY").constant("TWITTER_CONSUMER_SECRET", "a1CDefGhIjK2MNopQRst3VwXY4zabC5Ef6HIJK6MNOpQrsTUVw")
  // social login with google+
  .constant("GOOGLE_OAUTH_CLIENT_ID", "12345678901-abcde2gh3j4lmn5p6rs7uvw8x90y1234.apps.googleusercontent.com")
  // Used for sending push notification
  .constant("GOOGLE_PROJECT_NUMBER", "445639165930")
  // Development mode
  .constant("DEV_MODE", true)
  // Server
  .constant("SERVER_URL", "http://192.168.0.65:1337").constant("OAUTH_CALLBACK_URL", "http://localhost/callback").constant("APP_NAME", "YOUR_APP_NAME").constant("APP_NAME_KOREAN", "사람들이 볼만한 앱 이름").constant("APP_ID", 9999999999);
})(angular);
'use strict';

// Global variables
/* beautify preserve:start */

(function (angular) {
  'use strict';

  angular.module('app').value('Province', {

    '서울': [{ text: '강남/역삼/서초' }, { text: '잠실/신천' }, { text: '영등포/구로/금천' }, { text: '강서/화곡/까치산역/목동' }, { text: '천호/길동/둔촌' }, { text: '서울대/신림/사당' }, { text: '종로/명동/용산' }, { text: '수유/성북/도봉/노원/대학로' }, { text: '왕십리/성수/건대' }, { text: '동대문/장안/중랑/상봉' }, { text: '홍대/신촌/은평' }],

    '경기': [{ text: '수원/인계/권선/세류/영통' }, { text: '수원역/팔달문/북문/구운/장안' }, { text: '안성/평택/송탄' }, { text: '오산/화성' }, { text: '파주/일산/김포' }, { text: '의정부/양주' }, { text: '부천' }, { text: '과천/안양/군포/의왕' }, { text: '안산' }, { text: '광명/시흥' }, { text: '용인/이천/여주' }, { text: '성남' }, { text: '구리/하남/남양주/가평/양평' }, { text: '포천/동두천/연천' }],

    '인천': [{ text: '부평' }, { text: '주안' }, { text: '계양/서구/동암/남동구' }, { text: '남구/동구/중구' }, { text: '송도/강화/옹진' }],

    '강원': [{ text: '경포대/강릉/정동진' }, { text: '속초/양양/고성' }, { text: '춘천/홍천/인제' }, { text: '원주/횡성' }, { text: '동해/삼천/태백' }, { text: '평창/영월/정선' }],

    '부산': [{ text: '해운대/재송' }, { text: '송정/기장' }, { text: '서면/초읍/양정' }, { text: '연산/토곡' }, { text: '동래/온천장/부산대' }, { text: '부산역/남포동/송도/영도' }, { text: '광안리/경성대/남구' }, { text: '사상/덕천/북구' }, { text: '하단/사하/명지' }],

    '경남': [{ text: '김해/장유' }, { text: '양산/밀양' }, { text: '거제/통영' }, { text: '진주/사천/남해/고성' }, { text: '창원/진해' }, { text: '마산' }, { text: '거창/산청/의령/합천' }],

    '대구': [{ text: '동성로/수성구/남구/서구' }, { text: '동대구역/경북대/신천/북구' }, { text: '성서/죽전/달서구' }],

    '경북': [{ text: '경주' }, { text: '구미/김천' }, { text: '포항/영덕/울진' }, { text: '영천/칠곡/경산/청도' }, { text: '문경/상주/안동/영주/청송' }],

    '대전': [{ text: '중구/은행' }, { text: '유성' }, { text: '동구/대덕/용전' }, { text: '서구/둔산/괴정' }],

    '충남': [{ text: '천안/세종' }, { text: '계룡/공주/금산/논산/영동' }, { text: '아산/예산/청양/홍성' }, { text: '태안/당진/안면도/서산' }, { text: '대천/보령/서천/부여' }],

    '충북': [{ text: '청주' }, { text: '충주/제천/단양' }, { text: '증평/진천/음성/괴산' }],

    '광주': [{ text: '광산구/북구/동구' }, { text: '서구/남구' }],

    '전남': [{ text: '순천/여수/광양' }, { text: '목포/무안/해남/나주' }, { text: '화순/고흥/담양/장성/곡성' }],

    '울산': [{ text: '남구/중구' }, { text: '동구/울주군' }],

    '전북': [{ text: '전주' }, { text: '군산/익산' }, { text: '김제/부안/임실/정읍' }],

    '제주': [{ text: '제주시' }, { text: '서귀포' }]

  });
})(angular);
/* beautify preserve:end */
'use strict';

// Set authorization header(token based), if in dev mode use Admin token
//by logging in through admin page and copy past in `adminTOKEN`;
(function (angular) {
  'use strict';

  angular.module('app').factory('AuthInterceptor', AuthInterceptor);

  AuthInterceptor.$inject = ['AppStorage'];

  function AuthInterceptor(AppStorage) {

    var interceptor = {
      request: request
    };

    return interceptor;

    function request(req) {
      // var token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzcG9ydHMiOltdLCJyb2xlcyI6W3sibmFtZSI6IkFETUlOIiwiYWN0aXZlIjp0cnVlLCJjcmVhdGVkQXQiOiIyMDE2LTAzLTE0VDA2OjI4OjU3LjYyN1oiLCJ1cGRhdGVkQXQiOiIyMDE2LTAzLTE0VDA2OjI4OjU3LjYyN1oiLCJpZCI6IjU2ZTY1YTI5ZDM5MmM4NGQ5YWIxOTliNCJ9XSwicGVybWlzc2lvbnMiOltdLCJkZXZpY2VzIjpbXSwiZW1haWwiOiJkZXZlbG9wZXJAYXBwbGljYXQuY28ua3IiLCJ1c2VybmFtZSI6ImFkbWluIiwibmlja25hbWUiOiLqtIDrpqzsnpAiLCJjcmVhdGVkQXQiOiIyMDE2LTAzLTE0VDA2OjI4OjU5LjE4NloiLCJ1cGRhdGVkQXQiOiIyMDE2LTAzLTE0VDA2OjI5OjAwLjc5M1oiLCJvd25lciI6IjU2ZTY1YTJiZDM5MmM4NGQ5YWIxOWE1ZiIsImlkIjoiNTZlNjVhMmJkMzkyYzg0ZDlhYjE5YTVmIiwiaWF0IjoxNDU3OTM2OTg2LCJleHAiOjE0ODk0NzI5ODZ9.JGI7rQWEbu835gnlT4HuccAGDA25U-HA8scVdsnq4IY"
      var token = AppStorage.token;
      if (token) {
        if (req.headers.enctype && req.headers.enctype.includes('multipart/form-data')) {
          console.log("---------- 'req.headers.enctype.includes multipart/form-date AuthInterceptor' ----------");
        } else {
          req.headers['Content-Type'] = 'application/json';
        }
        req.headers.Authorization = 'Bearer ' + token;
      }
      return req;
    }
  }
})(angular);
'use strict';

// local storage wrapper, name spaced.
(function (angular) {
  'use strict';

  angular.module('app').factory('AppStorage', AppStorage);

  AppStorage.$inject = ['$localStorage', 'APP_NAME'];

  function AppStorage($localStorage, APP_NAME) {

    setInitialState();

    return $localStorage[APP_NAME];

    //====================================================
    //  Implementations
    //====================================================
    function setInitialState() {
      if (!$localStorage[APP_NAME]) {
        $localStorage[APP_NAME] = {};
      }
      var storage = $localStorage[APP_NAME];
      if (storage.isFirstTime === undefined) {
        storage.isFirstTime = true;
      }
    }

    //====================================================
    //  Helper
    //====================================================
  }
})(angular);
'use strict';

// Usage
// BackButton.register();
(function (angular) {
  'use strict';

  angular.module('app').factory('BackButton', BackButton);

  BackButton.$inject = ['$window', '$ionicPlatform', '$ionicHistory', 'RootScope'];

  function BackButton($window, $ionicPlatform, $ionicHistory, RootScope) {

    var service = {
      register: register
    };

    function register() {
      return $ionicPlatform.registerBackButtonAction(function (e) {
        //backButton이 눌려졌을때 호출되는 콜백
        e.preventDefault();
        if (RootScope.areStates(['Main.Footer.Home'])) {
          //홈화면에서 백버튼을 누르면
          return ionic.Platform.exitApp(); //앱종료
        }
        if (RootScope.areStates(['Main.PostList'])) {}
        $ionicHistory.goBack();
      }, 101); //101을 사용하면 100보다 우선순위가 높아진다. 오버라이딩 가능.
      // Return to previous view = 100  이전 뷰로 돌아가기
      // Close side menu = 150          사이드메뉴를 닫기
      // Dismiss modal = 200            모달창 해제
      // Close action sheet = 300       액션시트를 닫기
      // Dismiss popup = 400            팝업 해제
      // Dismiss loading overlay = 500  로딩 오버레이를 해제
    }

    return service;
  };
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('CurrentPosition', CurrentPosition);

  CurrentPosition.$inject = ['$window', '$cordovaGeolocation', '$q', 'Message', 'AppStorage'];

  function CurrentPosition($window, $cordovaGeolocation, $q, Message, AppStorage) {
    var daum = $window.daum;
    var geocoder = new daum.maps.services.Geocoder();
    var service = {
      set: set
    };

    return service;

    //(
    //  toBindObj: {latitude: Integer, longitude: Integer} | Array
    //)
    // if toBindObj not defined makes AppStorage.currentPosition = {}
    function set(toBindObj, noLoadingBar) {
      if (!noLoadingBar) {
        Message.loading();
      }
      return $cordovaGeolocation.getCurrentPosition({
        maximumAge: 1000,
        timeout: 7000
      }).then(function (position) {
        console.log("position :::\n", position);
        if (position.coords == null) {
          Message.alert('위치 공유가 꺼져있습니다.', '위치 공유를 켜주세요.');
          console.log("err -- CurrentPosition.set --:::\n", 'noPlace');
          return $q.reject({ message: 'geolocationOff' });
        }
        if (Array.isArray(toBindObj)) {
          toBindObj[0] = Number(position.coords.longitude);
          toBindObj[1] = Number(position.coords.latitude);
        } else if (toBindObj) {
          toBindObj.longitude = Number(position.coords.longitude);
          toBindObj.latitude = Number(position.coords.latitude);
        } else {
          AppStorage.longitude = Number(position.coords.longitude);
          AppStorage.latitude = Number(position.coords.latitude);
        }
        var coords = new daum.maps.LatLng(Number(position.coords.latitude), Number(position.coords.longitude));
        var deferred = $q.defer();
        geocoder.coord2addr(coords, function (status, result) {
          if (status === daum.maps.services.Status.OK) {
            deferred.resolve(toBindObj);
            AppStorage.currentAddress = result[0].fullName;
          } else {
            deferred.reject({ message: 'noAddress' });
          }
        });
        return deferred.promise;
      }).then(function (toBindObj) {
        if (!noLoadingBar) {
          Message.hide();
        }
        return toBindObj;
      }).catch(function (err) {
        console.log("err -- CurrentPosition.set --:::\n", err);
        if (!noLoadingBar) {
          Message.hide();
        }
        Message.alert('위치 공유가 꺼져있습니다.', '위치 공유를 켜주세요.');
        return $q.reject({ message: 'geolocationOff' });
      });
    }
  }
})(angular);
'use strict';

// Usage
// Distance.between({latitude: 33, longitude: 33}, {latitude: 44, longitude:44});

// Output: distance between two points in meters.
// 20000
(function (angular) {
  'use strict';

  angular.module('app').factory('Distance', Distance);

  Distance.$inject = ['$window'];

  function Distance($window) {

    var service = {
      between: $window.geolib.getDistance,
      createDistanceProperty: createDistanceProperty
    };

    return service;

    //(
    //  places: Array<Place>,
    //  currentPosition: {
    //    latitude: Integer,
    //    longitude: Integer
    //  }
    //)
    // => Void    // place.distance created
    function createDistanceProperty(places, currentPosition) {
      angular.forEach(places, function (place) {
        var geoJSON = place.geoJSON;
        var placeLongitude = geoJSON.coordinates[0];
        var placeLatitude = geoJSON.coordinates[1];
        var distance = service.between({
          latitude: placeLatitude,
          longitude: placeLongitude
        }, {
          latitude: currentPosition.latitude,
          longitude: currentPosition.longitude
        });
        place.distance = distance;
      });
    }
  }
})(angular);
'use strict';

// Simple dom manipulation when making directive is a overkill
// USAGE;
// In View;
//<input id="daum-map-search-input" type="text">
// In controller;
//Dom.focusById('daum-map-search-input');
(function (angular) {
  'use strict';

  angular.module('app').factory('Dom', Dom);

  Dom.$inject = ['$timeout', '$window'];

  function Dom($timeout, $window) {
    var service = {
      focusById: focusById,
      blurById: blurById
    };

    return service;

    function focusById(id) {
      $timeout(function () {
        var domElement = $window.document.getElementById(id);
        if (domElement) {
          domElement.focus();
        }
      }, 0);
    }

    function blurById(id) {
      $timeout(function () {
        var domElement = $window.document.getElementById(id);
        if (domElement) {
          domElement.blur();
        }
      }, 0);
    }
  }
})(angular);
'use strict';

// like post avaiable to call from $rootScope
(function (angular) {
  'use strict';

  angular.module('app').factory('Favorite', Favorite);

  Favorite.$inject = ['$timeout', 'AppStorage', 'Posts', 'Message', 'Places', 'Events'];

  function Favorite($timeout, AppStorage, Posts, Message, Places, Events) {

    var service = {
      toggleSaveToFavorite: toggleSaveToFavorite,
      isFavorite: isFavorite,

      likePost: likePost,
      likePlace: likePlace,
      likeEvent: likeEvent
    };

    return service;
    //====================================================
    //  Favorite.toggleSaveToFavorite
    //====================================================
    // Usage;
    //Favorite.toggleFavorite('1asf31sf1adf31')
    // Output(localStorage favorites array);
    //AppStorage.favorites.
    function toggleSaveToFavorite(id) {
      if (!Array.isArray(AppStorage.favorites)) {
        AppStorage.favorites = [];
      }
      if (isFavorite(id)) {
        //delte favorite
        var index = AppStorage.favorites.indexOf(id);
        AppStorage.favorites.splice(index, 1);
      } else if (!isFavorite(id)) {
        // add favorite
        AppStorage.favorites.push(id);
      }
      return AppStorage.favorites;
    }

    //====================================================
    //  Favorite.isFavorite
    //====================================================
    // Usage;
    //Favorite.isFavorite('1asf31sf1adf31')
    // Output(boolean if id exists in AppStorage.favorites);
    //true || false
    function isFavorite(id) {
      if (!Array.isArray(AppStorage.favorites)) {
        AppStorage.favorites = [];
      }
      for (var i = 0; i < AppStorage.favorites.length; i++) {
        if (String(id) === String(AppStorage.favorites[i])) {
          return true;
        }
      }
      return false;
    }

    function likePost(postObj) {
      Message.loading();
      Posts.like({}, {
        post: postObj.id
      }).$promise.then(function (post) {
        if (post.message) {
          Message.alert('좋아요 알림', post.message);
        } else {
          $timeout(function () {
            postObj.likes = post.likes;
            Message.alert('좋아요 알림', '좋아요 성공!');
          }, 0);
        }
        console.log("---------- post ----------");
        console.log(post);
      }).catch(function (err) {
        Message.hide();
        Message.alert();
        console.log("---------- err ----------");
        console.log(err);
      });
    }

    function likePlace(placeObj) {
      Message.loading();
      Places.like({}, {
        place: placeObj.id
      }).$promise.then(function (place) {
        if (place.message) {
          Message.alert('좋아요 알림', place.message);
        } else {
          $timeout(function () {
            placeObj.likes = place.likes;
            Message.alert('좋아요 알림', '좋아요 성공!');
          }, 0);
        }
        console.log("---------- place ----------");
        console.log(place);
      }).catch(function (err) {
        Message.hide();
        Message.alert();
        console.log("---------- err ----------");
        console.log(err);
      });
    }

    function likeEvent(eventObj) {
      Message.loading();
      Events.like({}, {
        event: eventObj.id
      }).$promise.then(function (event) {
        if (event.message) {
          Message.alert('좋아요 알림', event.message);
        } else {
          $timeout(function () {
            eventObj.likes = event.likes;
            Message.alert('좋아요 알림', '좋아요 성공!');
          }, 0);
        }
        console.log("---------- event ----------");
        console.log(event);
      }).catch(function (err) {
        Message.hide();
        if (err.data.message) {
          Message.alert('좋아요 알림', err.data.message);
        } else {
          Message.alert();
        }
        console.log("---------- err ----------");
        console.log(err);
      });
    }
  } // Service END
})(angular);
'use strict';

// Used to call external resource such as external browser, calling phone, and social sharing;
// Dependencies
//Cordova InAppBrowser
//Cordova SocialSharing
(function (angular) {
  'use strict';

  angular.module('app').factory('Link', Link);

  Link.$inject = ['$window', '$cordovaSocialSharing', '$state', 'AppStorage', 'Message'];

  function Link($window, $cordovaSocialSharing, $state, AppStorage, Message) {

    var service = {
      call: call,
      open: open,
      share: share
    };
    return service;

    //====================================================
    //  Link.call Usage
    //====================================================
    //Link.call(01011010101)
    // Output
    //phone call
    function call(phone) {
      if (!phone) {
        Message.alert('전화하기 알림', '전화가 없습니다.');
        return false;
      }
      phone = String(phone);
      if (phone[0] !== '0') {
        phone = '0' + phone;
      }
      var phoneArray = phone.split('');
      var indexParen = phoneArray.indexOf(')');
      if (indexParen !== -1) {
        phoneArray.splice(indexParen, 1);
      }
      var indexDash = phoneArray.indexOf('-');
      if (indexDash !== -1) {
        phoneArray.splice(indexDash, 1);
      }
      indexDash = phoneArray.indexOf('-');
      if (indexDash !== -1) {
        phoneArray.splice(indexDash, 1);
      }
      indexDash = phoneArray.indexOf('-');
      if (indexDash !== -1) {
        phoneArray.splice(indexDash, 1);
      }
      phone = phoneArray.join('');
      $window.location.href = 'tel:' + phone;
    }

    //====================================================
    //  Link.openLink Usage
    //====================================================
    //Link.openLink('http://www.applicat.co.kr');
    // Output
    //InAppBrowser open new window with url
    function open(link) {
      console.log("1232131232132135216341256448934 :::\n", 1232131232132135216341256448934);
      return $window.open(link, '_system');
    }

    //====================================================
    //  Link.share Usage
    //====================================================
    // Link.share('my title', 'my content stuff', 'http://www.applicat.co.kr')
    // Output
    //Social Share title content and link
    function share(title, content, url) {
      return $cordovaSocialSharing.share(title, content, null, url).then(function (suc) {
        console.log(suc);
      }, function (err) {
        console.log(err);
      });
    }
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Log', Log);

  Log.$inject = ['$cordovaDevice', '$window', 'appStorage', 'Logs'];

  function Log($cordovaDevice, $window, appStorage, Logs) {
    var moment = $window.moment;

    var Service = {
      sendUUID: sendUUID
    };

    return Service;

    //====================================================
    //  Send device UUID if not sent between 00:00 to 23:59:59
    //====================================================
    function sendUUID() {
      var today = moment().hour(0).minute(0).second(0);
      if (!appStorage.loggedDate || moment(appStorage.loggedDate).isBefore(today)) {
        appStorage.loggedDate = new Date().toString();
        return Logs.log({}, {
          deviceId: $cordovaDevice.getUUID()
        }).$promise.then(function (data) {
          console.log("---------- data ----------");
          console.log(data);
          appStorage.loggedDate = new Date().toString();
        }).catch(function (err) {
          console.log("---------- err ----------");
          console.log(err);
        });
      }
    }
  }
})();
'use strict';

// loading spinner and common message wrapper
(function (angular) {
  'use strict';

  angular.module('app').factory('Message', Message);

  Message.$inject = ['$ionicLoading', '$ionicPopup'];

  function Message($ionicLoading, $ionicPopup) {
    var service = {
      loading: loading,
      hide: hide,
      success: success,
      error: error,
      alert: alert
    };

    return service;

    function loading(message) {
      $ionicLoading.show(message);
    }

    function success(message) {
      $ionicLoading.show({
        template: '<h4 class="message-success">' + message + '</h4>',
        duration: 2000
      });
    }

    function error(message) {
      $ionicLoading.show({
        template: '<h4 class="message-error">' + message + '</h4>',
        duration: 2000
      });
    }

    function hide() {
      $ionicLoading.hide();
    }

    function alert(title, message) {
      hide();
      return $ionicPopup.alert({
        title: title || '인터넷이 끊겼습니다.',
        template: message || '인터넷을 켜주세요.'
      });
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// function loginWithFacebook() {
//   return Oauth.facebook(FACEBOOK_KEY, ["email", "public_profile"])
//     .then(function() {
//       U.goToState('Main.Home', null, 'forward');
//     })
//     .catch(function(err) {
//       U.error(err);
//     });
// }

// function loginWithKakao() {
//   return Oauth.kakao(KAKAO_KEY)
//     .then(function() {
//       U.goToState('Main.Home', null, 'forward');
//     })
//     .catch(function(err) {
//       U.error(err);
//     });
// }

(function () {
  'use strict';

  angular.module('app').factory('Oauth', Oauth);

  Oauth.$inject = ['$q', '$window', '$http', '$timeout', 'Message', 'AppStorage', 'Users', 'OAUTH_CALLBACK_URL', 'SERVER_URL'];

  function Oauth($q, $window, $http, $timeout, Message, AppStorage, Users, OAUTH_CALLBACK_URL, SERVER_URL) {
    var _ = $window._;
    var Service = {
      facebook: facebook,
      kakao: kakao
    };

    return Service;

    function facebook(clientId, appScope, options) {
      Message.loading();
      var deferred = $q.defer();
      var redirect_uri = OAUTH_CALLBACK_URL;
      var flowUrl = "https://www.facebook.com/v2.0/dialog/oauth?client_id=" + clientId + "&redirect_uri=" + redirect_uri + "&response_type=token&scope=" + appScope.join(",");
      if (options !== undefined && options.hasOwnProperty("auth_type")) {
        flowUrl += "&auth_type=" + options.auth_type;
      }
      var success = false;
      var browserRef = $window.cordova.InAppBrowser.open(flowUrl, '_blank', 'location=no,clearsessioncache=yes,clearcache=yes,hidden=yes');

      browserRef.addEventListener('loadstart', function (event) {
        if (event.url.indexOf(redirect_uri) === 0) {
          success = true;
          browserRef.removeEventListener("exit", function () {});
          browserRef.close();
          var callbackResponse = event.url.split("#")[1];
          var responseParameters = callbackResponse.split("&");
          var parameterMap = [];
          for (var i = 0; i < responseParameters.length; i++) {
            parameterMap[responseParameters[i].split("=")[0]] = responseParameters[i].split("=")[1];
          }
          if (parameterMap.access_token !== undefined && parameterMap.access_token !== null) {
            // Message.hide();
            deferred.resolve({
              access_token: parameterMap.access_token,
              expires_in: parameterMap.expires_in
            });
          } else {
            if (event.url.indexOf("error_code=100") !== 0) {
              // Message.hide();
              deferred.reject("Facebook returned error_code=100: Invalid permissions");
            } else {
              // Message.hide();
              deferred.reject("Problem authenticating");
            }
          }
        }
      });

      browserRef.addEventListener('loadstop', function () {
        browserRef.show();
      });

      browserRef.addEventListener('exit', function () {
        if (!success) {
          // Message.hide();
          deferred.reject("The sign in flow was canceled");
        }
      });

      return deferred.promise.then(function (result) {
        result.provider = 'facebook';
        return $http({
          url: SERVER_URL + '/user/loginWithOauth',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        });
      }).then(function (dataWrapper) {
        var userWrapper = dataWrapper.data;
        console.log("userWrapper :::\n", userWrapper);
        var userFindOne = Users.findOne({
          query: {
            where: {
              id: userWrapper.user.id
            },
            // REFACTOR
            populate: ['roles', 'profilePhoto', 'favorites']
          }
        }).$promise.then(function (user) {
          user.favorites = _.map(user.favorites, 'place');
          return user;
        });
        return $q.all([dataWrapper, userFindOne]);
      }).then(function (array) {
        var dataWrapper = array[0];
        var user = array[1];
        var userWrapper = dataWrapper.data;
        console.log("userWrapper :::\n", userWrapper);
        AppStorage.user = user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        return userWrapper;
      });
    }

    function kakao(clientId) {
      Message.loading();
      var deferred = $q.defer();
      var redirect_uri = OAUTH_CALLBACK_URL;
      var flowUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=' + clientId + '&redirect_uri=' + redirect_uri + '&response_type=code';
      var browserRef = $window.cordova.InAppBrowser.open(flowUrl, '_blank', 'location=no,clearsessioncache=yes,clearcache=yes,hidden=yes');
      var success = false;

      browserRef.addEventListener('loadstart', function (event) {
        if (event.url.indexOf(redirect_uri) === 0) {
          success = true;
          browserRef.removeEventListener("exit", function () {});
          browserRef.close();
          var requestToken = event.url.split("code=")[1];
          $http({
            method: 'POST',
            url: "https://kauth.kakao.com/oauth/token",
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: "client_id=" + clientId + "&redirect_uri=" + redirect_uri + "&grant_type=authorization_code" + "&code=" + requestToken
          }).success(function (data) {
            deferred.resolve(data);
          }).error(function () {
            deferred.reject("Problem authenticating");
          });
        }
      });

      browserRef.addEventListener('loadstop', function () {
        browserRef.show();
      });

      browserRef.addEventListener('exit', function () {
        // Message.hide();
        if (!success) {
          deferred.reject("The sign in flow was canceled");
        }
      });
      return deferred.promise.then(function (result) {
        result.provider = 'kakao';
        console.log("result :::\n", result);
        return $http({
          url: SERVER_URL + '/user/loginWithOauth',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        });
      }).then(function (dataWrapper) {
        var userWrapper = dataWrapper.data;
        console.log("userWrapper --before findOne--:::\n", userWrapper);

        var userFindOne = Users.findOne({
          query: {
            where: {
              id: userWrapper.user.id
            },
            // REFACTOR
            populate: ['roles', 'profilePhoto', 'favorites']
          }
        }).$promise.then(function (user) {
          user.favorites = _.map(user.favorites, 'place');
          return user;
        });

        return $q.all([dataWrapper, userFindOne]);
      }).then(function (array) {
        var dataWrapper = array[0];
        var user = array[1];
        console.log("user :::\n", user);
        var userWrapper = dataWrapper.data;
        AppStorage.user = user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        return userWrapper;
      });
    }
  }
})();
'use strict';

//  Dependencies
//ng-file-uploead
//cordovaCamera/
//MessageService
(function (angular) {
  'use strict';

  angular.module('app').factory('Photo', Photo);

  Photo.$inject = ['$cordovaCamera', '$window', '$timeout', '$q', '$cordovaFile', '$rootScope', '$ionicModal', 'SERVER_URL', 'Message', 'Upload'];

  function Photo($cordovaCamera, $window, $timeout, $q, $cordovaFile, $rootScope, $ionicModal, SERVER_URL, Message, Upload) {

    var _ = $window._;
    $ionicModal.fromTemplateUrl('state/0Template/ImageCropModal.html', {
      id: '9999',
      scope: $rootScope,
      animation: 'instant-slide'
    }).then(function (modal) {
      $rootScope.ImageCropModal = modal;
      $rootScope.hideImageCropModal = function () {
        $rootScope.getPhotoCancelled = false;
        $rootScope.ImageCropModal.hide();
      };
    });

    $rootScope.ImageCropAttribute = {
      sourceImageBase64: '',
      croppedImageBase64: '',
      resultImageSize: 600,
      areaType: 'square',
      aspectRatio: 1
    };

    $rootScope.getPhotoCancelled = true;

    var service = {
      get: get,
      post: post,
      clean: clean
    };

    return service;

    //====================================================
    //  Photo.get Usage
    //====================================================
    //Usage
    //  Photo.get('camera' || 'gallery', 800, true, 300,'square | circle | rectangle', aspectRatioIfRectangle)
    //Output:
    //  'data:base64, asdfk1jmcl1...'
    function get(sourceType, width, cropTrue, resultImageSize, areaType, aspectRatio) {

      var promise;

      if (sourceType === 'camera') {
        promise = $cordovaCamera.getPicture({
          quality: 50,
          destinationType: $window.Camera.DestinationType.FILE_URI,
          encodingType: $window.Camera.EncodingType.JPEG,
          targetWidth: width || 800,
          correctOrientation: true,
          mediaType: $window.Camera.MediaType.PICTURE,
          cameraDirection: $window.Camera.Direction.BACK,
          sourceType: 1 //camera
        });
      } else if (sourceType === 'gallery') {
          promise = pickImage(width);
        }

      promise = promise.then(function (filePath) {
        var name = filePath.substr(filePath.lastIndexOf('/') + 1);
        var namePath = filePath.substr(0, filePath.lastIndexOf('/') + 1);
        return $cordovaFile.readAsDataURL(namePath, name);
      }).catch(function () /* cancelled */{
        $rootScope.ImageCropModal.hide();
        return $q.reject({
          message: 'cancelled'
        });
      });

      if (cropTrue) {
        $rootScope.ImageCropAttribute.sourceImageBase64 = null;
        $rootScope.ImageCropAttribute.areaType = areaType || 'square';
        $rootScope.ImageCropAttribute.aspectRatio = aspectRatio || 1;
        $rootScope.ImageCropAttribute.resultImageSize = resultImageSize || 600;
        $rootScope.ImageCropModal.show();
        promise = promise.then(function (base64) {
          $rootScope.ImageCropAttribute.sourceImageBase64 = base64;
          // $rootScope.ImageCropModal.show();
          var deferred = $q.defer();
          var modalHiddenListenerOff = $rootScope.$on('modal.hidden', function (event, modal) {
            if (modal.id === '9999') {
              if ($rootScope.getPhotoCancelled === true) {
                return $q.reject({
                  message: 'cancelled'
                });
              } else {
                $rootScope.getPhotoCancelled = true;
                deferred.resolve($rootScope.ImageCropAttribute.croppedImageBase64);
              }
            }
          });
          return $q.all([deferred.promise, modalHiddenListenerOff]);
        }).then(function (array) {
          var base64 = array[0];
          var modalHiddenListenerOff = array[1];
          modalHiddenListenerOff();
          return base64;
        }).then(function (base64) {
          console.log("base64 should be blob :::\n", base64);
          return base64;
        });
      }

      return promise;
    }

    //====================================================
    //  Photo.post Usage
    //====================================================
    // Usage:
    //Photo.post(
    //  '/place',
    //  { files: ['dataUri:base64', 'dataUri:base64'],
    //    title: '포스트 이름',
    //    content: '냠냠냠'
    //  },
    //  POST
    //)
    //  Promise with with response from server:
    // Output usage:
    //promise
    //  .then(function(createdPlaceWrapper){
    //    console.log(createdPlaceWrapper.data);
    //  })
    //  .catch(function(err){
    //    $q.reject(err);
    //  })
    function post(url, form, method) {
      var form_copy = _.clone(form);
      var filesToSend = [];
      angular.forEach(form_copy.files, function (base64File) {
        if (base64File != null) {
          filesToSend.push(base64ToFile(base64File));
        }
      });
      delete form_copy.files;

      if (url[0] !== '/') {
        url = '/' + url;
      }

      var promise = Upload.upload({
        url: SERVER_URL + url,
        method: method || 'POST',
        file: filesToSend,
        fields: form_copy,
        header: {
          enctype: "multipart/form-data"
        }
      });
      return promise;
    } //end post

    function clean() {
      return $cordovaCamera.cleanup();
    }

    //====================================================
    //  HELPERS
    //====================================================

    function pickImage(width) {
      var deferred = $q.defer();
      $window.imagePicker.getPictures(function (results) {
        if (results.length === 0) {
          deferred.reject({
            message: 'cancelled'
          });
        } else {
          deferred.resolve(results[0]);
        }
      }, function (cancelled) {
        deferred.reject(cancelled);
      }, {
        maximumImagesCount: 1,
        width: width || 800,
        height: width || 800
      });
      return deferred.promise;
    }

    function base64ToFile(dataUris) {
      var byteString;
      var mimestring;
      if (dataUris.split(',')[0].indexOf('base64') !== -1) {
        byteString = $window.atob(dataUris.split(',')[1]);
      } else {
        byteString = decodeURI(dataUris.split(',')[1]);
      }
      mimestring = dataUris.split(',')[0].split(':')[1].split(';')[0];
      console.log(mimestring);
      var content = [];
      for (var i = 0; i < byteString.length; i++) {
        content[i] = byteString.charCodeAt(i);
      }
      return new $window.Blob([new $window.Uint8Array(content)], {
        type: mimestring
      });
    }
  } // End
})(angular);
'use strict';

// Preload photos no longer used. use before enter init() and after enter bind approach;
// Preload.assets are used in app.js to load everything when app starts, automatically done
(function (angular) {
  'use strict';

  angular.module('app').factory('Preload', Preload);

  Preload.$inject = ['$q', '$filter', '$window'];

  function Preload($q, $filter, $window) {

    var _ = $window._;

    var service = {
      photos: photos,
      assets: assets
    };

    return service;

    //====================================================
    //  Implementation
    //====================================================
    function photos(arrayOfObjsWithPhotosArray, cloudinaryFilterName, onlyFirstOnesBool, neverMind) {
      if (neverMind) {
        return [];
      }
      var urls = getPhotos(arrayOfObjsWithPhotosArray, cloudinaryFilterName, onlyFirstOnesBool);
      var promises = [];
      angular.forEach(urls, function (url) {
        var deferred = $q.defer();
        var img = new $window.Image();
        img.onload = onImageLoad(deferred);
        img.onerror = onImageError(deferred, url);
        promises.push(deferred.promise);
        img.src = url;
      });
      return $q.all(promises);
    }

    function assets(fileUrls) {
      var promises = [];
      // var images = [];
      angular.forEach(fileUrls, function (url) {
        var deferred = $q.defer();
        var img = new $window.Image();
        img.onload = onImageLoad(deferred);
        img.onerror = onImageError(deferred, url);
        promises.push(deferred.promise);
        img.src = url;
        // images.push(img);
      });
      return $q.all(promises);
    }

    //====================================================
    //  Helper
    //====================================================
    function onImageLoad(deferred) {
      return function () {
        deferred.resolve();
      };
    }

    function onImageError(deferred, url) {
      return function () {
        deferred.reject(url);
      };
    }

    function getPhotos(posts, cloudinaryFilterName, onlyFirstOnesBool) {
      var preProcessedUrls = [];
      // make it work for single object
      if (!Array.isArray(posts)) {
        posts = [posts];
      }
      var arrayOfUrls = _.pluck(posts, 'photos');
      angular.forEach(arrayOfUrls, function (photos) {
        var urls = _.pluck(photos, 'url');
        if (onlyFirstOnesBool) {
          var first = urls[0];
          urls = [first];
        }
        preProcessedUrls = preProcessedUrls.concat(urls);
      });
      var urls = _.map(preProcessedUrls, function (url) {
        return $filter(cloudinaryFilterName)(url);
      });
      urls = _.filter(urls, function (url) {
        return url != null;
      });
      return urls;
    }
  } // Service END
})(angular);
'use strict';

// Implements latest version of phonegap-push-plugin
(function () {
  'use strict';

  angular.module('applicat.push.service', ['ngCordova']).service('PushService', PushService);

  PushService.$inject = ['$http', '$log', '$q', '$cordovaDialogs', '$window', '$timeout', '$rootScope', '$cordovaMedia', 'GOOGLE_PROJECT_NUMBER', 'SERVER_URL'];

  function PushService($http, $log, $q, $cordovaDialogs, $window, $timeout, $rootScope, $cordovaMedia, GOOGLE_PROJECT_NUMBER, SERVER_URL) {
    var deviceId = null;

    this.registerDevice = registerDevice;
    // maybe devideId is used outside of this service, or not...
    this.getDeviceId = function () {
      return deviceId;
    };

    //====================================================
    //  Implementation
    //====================================================
    function registerDevice() {
      var push = $window.PushNotification.init({
        android: {
          "senderID": GOOGLE_PROJECT_NUMBER,
          "icon": "pushicon"
        },
        ios: {
          "badge": true,
          "sound": "true",
          "alert": "true"
        }
      });

      if (ionic.Platform.isIOS()) {
        push.getApplicationIconBadgeNumber(function (n) {
          push.setApplicationIconBadgeNumber(function () {
            console.log('---- setApplicationBadegeNumber success with ' + n + ' ----');
          }, function () {
            console.log('----- setApplicationBadgeNumber error -----');
          }, n);
        }, function () {
          console.log('---- getBadgeNumber error ----');
        });
      }

      push.on('registration', function (result) {
        if (ionic.Platform.isIOS()) {
          storeDeviceToken(result.registrationId, 'IOS');
        } else if (ionic.Platform.isAndroid()) {
          storeDeviceToken(result.registrationId, 'ANDROID');
        }
      });

      push.on('notification', function (notification) {
        if (ionic.Platform.isAndroid()) {
          $window.plugin.notification.local.schedule({
            title: notification.title,
            text: notification.message,
            icon: "res://icon.png",
            smallIcon: "res://pushicon.png"
          });
        } else if (ionic.Platform.isIOS()) {
          handleIOS(notification);
        }
      });
    }

    //====================================================
    //  Helpers
    //====================================================
    function storeDeviceToken(deviceId, deviceType) {
      var registration = {
        deviceId: deviceId,
        platform: deviceType,
        active: true
      };
      return $http({
        url: SERVER_URL + '/device/register',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        data: registration
      }).then(function (dataWrapper) {
        $log.info("PushService - registered to server: " + JSON.stringify(dataWrapper));
        deviceId = dataWrapper.data.device.deviceId;
      }).catch(function (err) {
        $log.info("PushService - error: " + JSON.stringify(err));
      });
    }

    function handleIOS(notification) {
      // If foreground is not checked here it would make a sound twice,
      //once when received in background and once more upon opening it by clicking
      //the notification.
      if (notification.additionalData.foreground === true) {
        // Play custom audio if a sound specified.
        if (notification.sound) {
          var audio = $cordovaMedia.newMedia(notification.sound);
          audio.then(function (r) {
            console.log('success');
            console.log(r);
            $timeout(function () {
              audio.play();
            }, 500);
          }, function (r) {
            console.log('error');
            console.log(r);
          });
        }
        $cordovaDialogs.alert(notification.title, notification.message);
      } else {
        $cordovaDialogs.alert(notification.title, notification.message);
      }
    }
  }
})();
'use strict';

// Description: Extends $rootScope with custom functions;

// Usage;
// In app.js
// .run(['$rootScope', 'RootScope', function ($rootScope, RootScope){
//   angular.extend($rootScope, RootScope);
// }])
(function (angular) {
  'use strict';

  angular.module('app').factory('RootScope', RootScope);

  RootScope.$inject = ['$state', '$stateParams', '$ionicHistory', '$ionicSideMenuDelegate', '$timeout', '$rootScope', '$ionicViewSwitcher', '$ionicModal', '$ionicScrollDelegate', 'Message', 'AppStorage', 'Favorite', 'Link', 'PhotoClass', 'CurrentPosition', 'DEV_MODE'];

  function RootScope($state, $stateParams, $ionicHistory, $ionicSideMenuDelegate, $timeout, $rootScope, $ionicViewSwitcher, $ionicModal, $ionicScrollDelegate, Message, AppStorage, Favorite, Link, PhotoClass, CurrentPosition, DEV_MODE) {
    var service = {
      AppStorage: AppStorage,
      $state: $state,
      $stateParams: $stateParams,
      isState: isState,
      areStates: areStates,
      getState: getState,
      isParam: isParam,
      hasParam: hasParam,
      getParam: getParam,
      goToState: goToState,
      goBack: goBack,
      loading: loading,
      toggleSideMenu: toggleSideMenu,
      closeSideMenu: closeSideMenu,
      comingSoon: comingSoon,
      DEV_MODE: DEV_MODE,
      PhotoClass: new PhotoClass(),

      likePost: Favorite.likePost,
      likePlace: Favorite.likePlace,

      open: Link.open,
      isOwner: isOwner,
      goToStateIfGPS: goToStateIfGPS
    };

    return service;

    function isState(state) {
      return state === $ionicHistory.currentStateName();
    }

    function areStates(states) {
      return states.indexOf($ionicHistory.currentStateName()) !== -1;
    }

    function getState() {
      return $ionicHistory.currentStateName();
    }
    //====================================================
    //  $rootScope.isParam({id: '123', category: ''}) >> true | false
    //====================================================
    function isParam(paramObj) {
      for (var key in paramObj) {
        if ($state.params[key] !== paramObj[key]) {
          return false;
        }
      }
      return true;
    }

    function hasParam(paramKey) {

      if ($state.params[paramKey] !== '') {
        return true;
      } else {
        return false;
      }
    }
    //====================================================
    // $rootScope.getParam(category)  >> $stateParams[category]
    //====================================================
    function getParam(key) {
      return $state.params[key];
    }
    //====================================================
    //  $rootScope.goToState('Main.Home', {category: 'apple', theme: 'drink'}, 'forward | back', CtrlAsModel)
    //====================================================
    function goToState(state, params, direction, Model) {
      Message.hide();
      if (Model) {
        //if model remember scrollpostion and save
        if (Model.handle) {
          Model.scrollPosition = $ionicScrollDelegate.$getByHandle(Model.handle).getScrollPosition().top;
        } else {
          console.log('no CtrlAs.Model.handle --RootScope.goToState');
        }
      }
      $timeout(function () {
        if (direction) {
          $ionicViewSwitcher.nextDirection(direction);
        }
        $state.go(state, params);
        $ionicSideMenuDelegate.toggleLeft(false);
      }, 0);
    }
    //====================================================
    //  $rootScope.goBack();
    //====================================================
    function goBack(direction) {
      Message.hide();
      // if (direction) {
      //   $ionicViewSwitcher.nextDirection(direction);
      // }
      $ionicViewSwitcher.nextDirection('back');
      $ionicHistory.goBack();
    }
    //====================================================
    //  $rootScope.loading();
    //====================================================
    function loading() {
      Message.loading();
      $timeout(function () {
        Message.hide();
      }, 5000);
    }
    //====================================================
    //  $rootScope.closeSideMenu();
    //====================================================
    function closeSideMenu() {
      $ionicSideMenuDelegate.toggleLeft(false);
    }
    //====================================================
    //  $rootScope.toggleSideMenu();
    //====================================================
    function toggleSideMenu() {
      // if (requireLoggedIn) {
      //   if (!AppStorage.token) {
      //     return Message.alert('둘러보기 알림', '로그인을 하셔야 볼수있는 내용입니다.');
      //   }
      // }
      $ionicSideMenuDelegate.toggleLeft();
    }
    //====================================================
    //  $rootScope.comingSoon();
    //====================================================
    function comingSoon(title) {
      return Message.alert(title + ' 준비중인 서비스입니다.', '빠른시일내에 준비완료하겠습니다.');
    }

    function isOwner(data) {
      // console.log("RootScope... isOwner(data) :::\n", data);
      //data 자체가 owner의 id일 경우
      if (typeof data === 'string' && data === AppStorage.user.id) {
        return true;

        //data.owner가 id일 경우
      } else if (typeof data.owner === 'string' && data.owner === AppStorage.user.id) {
          return true;

          //data.owner가 object고 data.owner.id 가 존재할 경우
        } else if (data.owner.id === AppStorage.user.id) {
            return true;
          }

      //위의 모든 사항에 해당하지 않을경우 오너가 아님.
      return false;
    }

    function goToStateIfGPS(state, params, direction) {
      if (AppStorage.currentPosition) {
        return goToState(state, params, direction);
      } else {
        AppStorage.currentPosition = {};
      }
      return CurrentPosition.set(AppStorage.currentPosition).then(function () {
        return goToState(state, params, direction);
      }).catch(function (err) {
        AppStorage.currentPosition = null;
        if (err.message === 'geolocationOff') {
          return false;
        }
        return error(err);
      });
    }
  } //end
})(angular);
'use strict';

// Twitter example
(function () {
  'use strict';

  angular.module('app').factory('Twitter', Twitter);

  Twitter.$inject = ['$cordovaOauth', '$cordovaOauthUtility', '$http', '$reource', '$q', '$window'];

  function Twitter($cordovaOauth, $cordovaOauthUtility, $http, $resource, $q, $window) {
    // 1
    var twitterKey = "STORAGE.TWITTER.KEY";
    var clientId = 'TwitterAppConsumerKey';
    var clientSecret = 'TwitterAppConsumerSecret';

    // 2
    function storeUserToken(data) {
      $window.localStorage.setItem(twitterKey, JSON.stringify(data));
    }

    function getStoredToken() {
      return $window.localStorage.getItem(twitterKey);
    }

    // 3
    function createTwitterSignature(method, url) {
      var token = angular.fromJson(getStoredToken());
      var oauthObject = {
        oauth_consumer_key: clientId,
        oauth_nonce: $cordovaOauthUtility.createNonce(10),
        oauth_signature_method: "HMAC-SHA1",
        oauth_token: token.oauth_token,
        oauth_timestamp: Math.round(new Date().getTime() / 1000.0),
        oauth_version: "1.0"
      };
      var signatureObj = $cordovaOauthUtility.createSignature(method, url, oauthObject, {}, clientSecret, token.oauth_token_secret);
      $http.defaults.headers.common.Authorization = signatureObj.authorization_header;
    }

    return {
      // 4
      initialize: function initialize() {
        var deferred = $q.defer();
        var token = getStoredToken();

        if (token !== null) {
          deferred.resolve(true);
        } else {
          $cordovaOauth.twitter(clientId, clientSecret).then(function (result) {
            storeUserToken(result);
            deferred.resolve(true);
          }, function (error) {
            deferred.reject(false);
          });
        }
        return deferred.promise;
      },
      // 5
      isAuthenticated: function isAuthenticated() {
        return getStoredToken() !== null;
      },
      // 6
      getHomeTimeline: function getHomeTimeline() {
        var home_tl_url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';
        createTwitterSignature('GET', home_tl_url);
        return $resource(home_tl_url).query();
      },
      storeUserToken: storeUserToken,
      getStoredToken: getStoredToken,
      createTwitterSignature: createTwitterSignature
    };
  }
})();
'use strict';

// Utility
(function (angular) {
  'use strict';

  angular.module('app').factory('Util', Util);

  Util.$inject = ['$ionicHistory', '$ionicScrollDelegate', '$timeout', '$filter', '$window', '$rootScope', '$ionicSideMenuDelegate', '$state', '$ionicViewSwitcher', '$ionicSlideBoxDelegate', '$q', '$location', 'Message', 'RootScope', 'Dom'];

  function Util($ionicHistory, $ionicScrollDelegate, $timeout, $filter, $window, $rootScope, $ionicSideMenuDelegate, $state, $ionicViewSwitcher, $ionicSlideBoxDelegate, $q, $location, Message, RootScope, Dom) {

    var _ = $window._;
    var service = {
      isForwardView: isForwardView,
      isBackView: isBackView,
      isSiblingView: isSiblingView,
      areSiblingViews: areSiblingViews,
      hasPreviousStates: hasPreviousStates,
      resize: resize,
      update: update,
      resetSlides: resetSlides,
      error: error,
      bindData: bindData,
      appendData: appendData,
      broadcast: broadcast,
      top: top,
      scrollBottom: scrollBottom,
      scrollTop: scrollTop,
      scrollTo: scrollTo,
      scrollToId: scrollToId,
      freeze: freeze,
      loading: loading
    };

    _.defaults(service, RootScope); //extends

    return service;

    // Within Parent State Stack
    function isForwardView(stateName) {
      if ($ionicHistory.viewHistory().forwardView) {
        return $ionicHistory.viewHistory().forwardView.stateName === stateName;
      } else {
        return false;
      }
    }

    // Within Parent State Stack
    function isBackView(stateName) {
      if ($ionicHistory.viewHistory().backView) {
        return $ionicHistory.viewHistory().backView.stateName === stateName;
      } else {
        return false;
      }
    }

    // Within Parent State Stack
    function isSiblingView(stateName) {
      return isForwardView(stateName) || isBackView(stateName);
    }

    // Within Parent State Stack
    function areSiblingViews(stateNames) {
      var i;
      var stateName;
      for (i = 0; i < stateNames.length; i++) {
        stateName = stateNames[i];
        if (isSiblingView(stateName)) {
          return true;
        }
      }
      return false;
    }

    // Absolute previous State. Within or Without parent stack.
    function hasPreviousStates(stateNames) {
      if (stateNames.length === 0) {
        return false;
      }
      var currentViewId = $ionicHistory.currentView().viewId.split('ion').pop();
      var prevViewId = Number(currentViewId) - 1;
      var prevViewKey = 'ion' + prevViewId;
      var prevStateName = $ionicHistory.viewHistory().views[prevViewKey] && $ionicHistory.viewHistory().views[prevViewKey].stateName;
      var hasPrevView = _.indexOf(stateNames, prevStateName) !== -1;
      var hasSiblingView = areSiblingViews(stateNames);
      if (hasPrevView) {
        return true;
      } else if (hasSiblingView) {
        return true;
      }
      return false;
    }

    // update content scroll
    function resize() {
      $timeout(function () {
        $ionicScrollDelegate.resize();
      }, 0);
    }

    // update slidebox
    function update() {
      $timeout(function () {
        $ionicSlideBoxDelegate.update();
      }, 0);
    }

    // fix bug where prev slide number persist
    function resetSlides() {
      $ionicSlideBoxDelegate.slide(0, 0);
      $ionicSlideBoxDelegate.update();
    }

    function error(err) {
      console.log(err);
      freeze(false);
      $rootScope.$broadcast('scroll.refreshComplete');
      $rootScope.$broadcast('scroll.infiniteScrollComplete');
      if (err.data && err.data.invalidAttributes && err.data.invalidAttributes.username) {
        return Message.alert('회원가입 알림', '이미 존재하는 이메일입니다. 다른 이메일을 입력해주세요.').then(function () {
          Dom.focusById('email');
        });
      } else if (err.data && err.data.invalidAttributes && err.data.invalidAttributes.email) {
        return Message.alert('회원가입 알림', '이미 존재하는 이메일입니다. 다른 이메일을 입력해주세요.').then(function () {
          Dom.focusById('email');
        });
      } else if (err === 'Problem authenticating') {
        Message.alert('로그인 알림', '로그인이 잘못 되었습니다. 다시 시도해주세요.');
      } else if (err === 'Facebook returned error_code=100: Invalid permissions') {
        Message.alert('로그인 알림', '로그인이 잘못 되었습니다. 다시 시도해주세요.');
      } else if (err === 'The sign in flow was canceled') {
        Message.alert('로그인 알림', '로그인을 취소 하셨습니다.');
      } else {
        return Message.alert();
      }
    }

    function bindData(data, model, name, emitEventTrue, loadingModel) {
      var deferred = $q.defer();
      $timeout(function () {
        // if data is a dataArrayWrapper
        if (name[name.length - 1] === 's') {
          model[name] = data[name];
          model.more = data.more !== undefined ? data.more : model.more; //infinite scroll에서 사용
          model.total = data.total !== undefined ? data.total : model.total; //admin
        } else {
            // if data is a dataObject
            model[name] = data; //model에 property를 넣어줌.
          }
        if (!loadingModel) {
          model.loading = false;
        } else {
          loadingModel.loading = false; //부분적 로딩으로 사용
        }
        freeze(false);
        update();
        resize();
        $rootScope.$broadcast('scroll.refreshComplete');
        $rootScope.$broadcast('scroll.infiniteScrollComplete');
        if (emitEventTrue) {
          $rootScope.$broadcast('$rootScope:bindDataComplete');
        }
        deferred.resolve();
      }, 0);
      return deferred.promise;
    }

    function appendData(dataWrapper, model, name, emitEventTrue) {
      var deferred = $q.defer();
      $timeout(function () {
        if (name[name.length - 1] === 's') {
          angular.forEach(dataWrapper[name], function (item) {
            model[name].push(item);
          });
          model.more = dataWrapper.more;
          freeze(false);
          resize();
          $rootScope.$broadcast('scroll.refreshComplete');
          $rootScope.$broadcast('scroll.infiniteScrollComplete');
          if (emitEventTrue) {
            $rootScope.$broadcast('$rootScope:appendDataComplete');
          }
        } else {
          // if data is a data
          console.error('no dataArrayWrapper.dataArray perhaps dataWrapper is dataObject.');
        }
        deferred.resolve();
      }, 0);
      return deferred.promise;
    }

    function broadcast($scope) {
      $scope.$broadcast('scroll.refreshComplete');
      $scope.$broadcast('scroll.infiniteScrollComplete');
    }

    function top() {
      $ionicScrollDelegate.scrollTop(false);
    }

    function scrollBottom(animationTrue) {
      $ionicScrollDelegate.scrollBottom(animationTrue);
    }

    function scrollTop(animationTrue) {
      $ionicScrollDelegate.scrollTop(animationTrue);
    }

    function scrollTo(Model) {
      if (Model) {
        if (Model.scrollPosition === undefined) {
          console.log('no CtrlAs.Model.scollPosition -- Util.scrollTo');
        }
        if (Model.handle) {
          $ionicScrollDelegate.$getByHandle(Model.handle).scrollTo(undefined, Model.scrollPosition, false);
        } else {
          console.log('no CtrlAs.Model.handle -- Util.scrollTo');
        }
      } else {
        console.log('no CtrlAs.Model -- Util.scrollTo');
      }
    }

    function scrollToId(elementId, animationTrue) {
      $location.hash(elementId);
      $ionicScrollDelegate.anchorScroll(animationTrue);
    }

    function freeze(shouldFreezeTrue) {
      $ionicScrollDelegate.freezeScroll(shouldFreezeTrue);
    }

    function loading(Model) {
      Model.loading = true;
      $timeout(function () {
        if (Model.handle) {
          $ionicScrollDelegate.$getByHandle(Model.handle).scrollTop(false);
        } else {
          top();
        }
        freeze(true);
      }, 600);
    }
  } // Service END
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('_MockData', _MockData);

  _MockData.$inject = [];

  function _MockData() {

    var geoJSON_example = {
      "type": "FeatureCollection",
      "features": [{
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [102.0, 0.5]
        },
        "properties": { "prop0": "value0" }
      }, {
        "type": "Feature",
        "geometry": {
          "type": "LineString",
          "coordinates": [[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]]
        },
        "properties": {
          "prop0": "value0",
          "prop1": 0.0
        }
      }, {
        "type": "Feature",
        "geometry": {
          "type": "Polygon",
          "coordinates": [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]]]
        },
        "properties": {
          "prop0": "value0",
          "prop1": { "this": "that" }
        }
      }]
    };

    var Model = {

      //===================================================================

      banner1: {
        id: 100,
        isExternal: true,
        homepage: 'http://naver.com',
        index: 1,
        get event() {
          return Model.event1;
        },
        get photo() {
          return Model.photo1;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      banner2: {
        id: 101,
        isExternal: true,
        homepage: 'http://naver.com',
        index: 2,
        get event() {
          return Model.event2;
        },
        get photo() {
          return Model.photo2;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      banner3: {
        id: 102,
        isExternal: true,
        homepage: 'http://naver.com',
        index: 3,
        get event() {
          return Model.event3;
        },
        get photo() {
          return Model.photo3;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // banners: [this.banner1, this.banner2, this.banner3],

      //===================================================================

      comment1: {
        id: 200,
        content: '하나 댓글입니다~!',
        isAnnonymous: false,
        get post() {
          return Model.post1;
        },
        get review() {
          return Model.review1;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      comment2: {
        id: 201,
        content: '두울 댓글입니다~!',
        isAnnonymous: true,
        get post() {
          return Model.post2;
        },
        get review() {
          return Model.review2;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      comment3: {
        id: 202,
        content: '세엣 댓글입니다~!',
        isAnnonymous: true,
        get post() {
          return Model.post3;
        },
        get review() {
          return Model.review3;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // comments: [this.comment1, this.comment2, this.comment3],

      //===================================================================

      device1: {
        id: 400,
        deviceId: 'Galaxy S7',
        platform: 'ANDROID',
        active: true,

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      device2: {
        id: 401,
        deviceId: 'iPhone 5',
        platform: 'IOS',
        active: true,

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      device3: {
        id: 402,
        deviceId: 'iPhone 6 Plus',
        platform: 'IOS',
        active: false,

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // devices: [this.device1, this.device2, this.device3],

      //===================================================================

      event1: {
        id: 500,
        title: '하나 이벤트!(제목)',
        category: 'JOODANG-EVENT',
        showLinkButton: true,
        duration: '2016.03.07 ~ 2016.03.09',
        location: '1역삼동 르네상스호텔',
        content: '1맛있는 식사를 해봅시다!',
        warning: '1만 19세 미만은 참가할 수 없습니다.',
        get photo() {
          return Model.photo1;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      event2: {
        id: 501,
        title: '두울 이벤트!(제목)',
        category: 'BAR-EVENT',
        showLinkButton: true,
        duration: '2016.03.07 ~ 2016.03.09',
        location: '2역삼동 르네상스호텔',
        content: '2맛있는 식사를 해봅시다!',
        warning: '2만 19세 미만은 참가할 수 없습니다.',
        get photo() {
          return Model.photo2;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      event3: {
        id: 502,
        title: '세엣 이벤트!(제목)',
        category: 'BAR-EVENT',
        showLinkButton: false,
        duration: '2016.03.07 ~ 2016.03.09',
        location: '3역삼동 르네상스호텔',
        content: '3맛있는 식사를 해봅시다!',
        warning: '3만 19세 미만은 참가할 수 없습니다.',
        get photo() {
          return Model.photo3;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // events: [this.event1, this.event2, this.event3],

      //===================================================================

      favorite1: {
        id: 600,
        get place() {
          return Model.place1;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      favorite2: {
        id: 601,
        get place() {
          return Model.place2;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      favorite3: {
        id: 602,
        get place() {
          return Model.place3;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // favorites: [this.favorite1, this.favorite2, this.favorite3],

      //===================================================================

      like1: {
        id: 700,
        get post() {
          return Model.post1;
        },
        get place() {
          return Model.place1;
        },
        get product() {
          return Model.product1;
        },
        get comment() {
          return Model.comment1;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      like2: {
        id: 701,
        get post() {
          return Model.post2;
        },
        get place() {
          return Model.place2;
        },
        get product() {
          return Model.product2;
        },
        get comment() {
          return Model.comment2;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      like3: {
        id: 702,
        get post() {
          return Model.post3;
        },
        get place() {
          return Model.place3;
        },
        get product() {
          return Model.product3;
        },
        get comment() {
          return Model.comment3;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // likes: [this.like1, this.like2, this.like3],

      //===================================================================

      message1: {
        id: 800,
        content: '안녕하세요? 예약좀 할려고하는데요, 계신가요?!',
        isNew: true,
        get sender() {
          return Model.user;
        },
        get receiver() {
          return Model.owner;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      message2: {
        id: 801,
        content: '네 안녕하세요, 몇시로 예약해드릴까요? 성함과 연락처 알려주세요!',
        isNew: true,
        get sender() {
          return Model.owner;
        },
        get receiver() {
          return Model.user;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      message3: {
        id: 802,
        content: '예약자 이름은 동호로 해주시구요, 연락처는 010-111-2222입니다. 오늘저녁 10시 예약부탁드립니다!ㅎㅎ 감사해요~!',
        isNew: true,
        get sender() {
          return Model.user;
        },
        get receiver() {
          return Model.owner;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      message4: {
        id: 803,
        content: '예약자 이름은 동호로 해주시구요, 연락처는 010-111-2222입니다. 오늘저녁 10시 예약부탁드립니다!ㅎㅎ 감사해요~!',
        isNew: true,
        get sender() {
          return Model.user;
        },
        get receiver() {
          return Model.owner;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      message5: {
        id: 804,
        content: '예약자 이름은 동호로 해주시구요, 연락처는 010-111-2222입니다. 오늘저녁 10시 예약부탁드립니다!ㅎㅎ 감사해요~!',
        isNew: true,
        get sender() {
          return Model.user;
        },
        get receiver() {
          return Model.owner;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // messages: [this.message1, this.message2, this.message3],

      //===================================================================

      photo1: {
        id: 1200,
        name: '하나사진',
        url: 'img/_box200x200_orange.png',

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      photo2: {
        id: 1201,
        name: '두울사진',
        url: 'img/_box200x200_green.png',

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      photo3: {
        id: 1202,
        name: '세엣사진',
        url: 'img/_box200x200_sky.png',

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // photos: [this.photo1, this.photo2, this.photo3],

      //===================================================================

      place1: {
        id: 1300,
        name: '하나 술집 강남점',
        tagString: '태그1 태그2 태그3 태그4 태그5',
        tags: ['양주', '소주', '오렌지쥬스', '맛있는안주', '짱짱'],
        category: 'PREMIUM', //PREMIUM, SPECIAL, NORMAL
        province: '강남',
        themes: ['헌팅', '데이트', '단체', '술마시기좋은', '안주가맛있는'],
        keywords: ['포차/호프', 'Pub', 'Bar/라운지', '이자카야', 'Beer', '와인', '전통주점', '퓨전주점', '룸식', '24시', '조용한', '편한의자', '내부화장실', '좌식', '흡연가능', '싸다'],
        averageRating: 4.8,
        viewCount: 3421,
        favoriteCount: 324,
        address: '서울 강남구 역삼동 123-234',
        geoJSON: geoJSON_example,
        hours: '오전 9시 ~ 오후 6시 1',
        size: '120석 1',
        summary: '안주가 맛있는 핫플레이스입니다. 환영합니다! 1',
        showDiscountTag: true,
        discountTitle: '50%할인! 1',
        discountContent: '50%할인을 해드리겠습니다. 많이많이오세요! 1',
        showEventTag: true,
        phone: '02-934-5713 1',
        get events() {
          return Model.events;
        },
        get reviewCount() {
          return Model.reviews.length;
        },
        get photos() {
          return Model.photos;
        },
        get reviews() {
          return Model.reviews;
        },
        get products() {
          return Model.products;
        },
        get favorites() {
          return Model.favorites;
        },
        get posts() {
          return Model.posts;
        }, // Not used but just incase

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      place2: {
        id: 1301,
        name: '두울 술집 역삼점',
        tagString: '태그2 태그2 태그3 태그4 태그5',
        tags: ['양주', '소주', '오렌지쥬스', '맛있는안주', '짱짱'],
        category: 'SPECIAL', //PREMIUM, SPECIAL, NORMAL
        province: '강남',
        themes: ['헌팅', '데이트', '단체', '술마시기좋은', '안주가맛있는'],
        keywords: ['포차/호프', 'Pub', 'Bar/라운지', '이자카야', 'Beer', '와인', '전통주점', '퓨전주점', '룸식', '24시', '조용한', '편한의자', '내부화장실', '좌식', '흡연가능', '싸다'],
        averageRating: 3.8,
        viewCount: 3422,
        favoriteCount: 324,
        address: '서울 강남구 역삼동 223-234',
        geoJSON: geoJSON_example,
        hours: '오전 9시 ~ 오후 6시 2',
        size: '220석 2',
        summary: '안주가 맛있는 핫플레이스입니다. 환영합니다! 2',
        showDiscountTag: true,
        discountTitle: '50%할인! 2',
        discountContent: '50%할인을 해드리겠습니다. 많이많이오세요! 2',
        showEventTag: true,
        phone: '02-934-5723 2',
        get events() {
          return Model.events;
        },
        get reviewCount() {
          return Model.reviews.length;
        },
        get photos() {
          return Model.photos;
        },
        get reviews() {
          return Model.reviews;
        },
        get products() {
          return Model.products;
        },
        get favorites() {
          return Model.favorites;
        },
        get posts() {
          return Model.posts;
        }, // Not used but just incase

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      place3: {
        id: 1302,
        name: '세엣 술집 논현점',
        tagString: '태그3 태그2 태그3 태그4 태그5',
        tags: ['양주', '소주', '오렌지쥬스', '맛있는안주', '짱짱'],
        category: 'NORMAL', //PREMIUM, SPECIAL, NORMAL
        province: '강남',
        themes: ['헌팅', '데이트', '단체', '술마시기좋은', '안주가맛있는'],
        keywords: ['포차/호프', 'Pub', 'Bar/라운지', '이자카야', 'Beer', '와인', '전통주점', '퓨전주점', '룸식', '24시', '조용한', '편한의자', '내부화장실', '좌식', '흡연가능', '싸다'],
        averageRating: 3.45555,
        viewCount: 3423,
        favoriteCount: 324,
        address: '서울 강남구 역삼동 323-234',
        geoJSON: geoJSON_example,
        hours: '오전 9시 ~ 오후 6시 3',
        size: '320석 3',
        summary: '안주가 맛있는 핫플레이스입니다. 환영합니다! 3',
        showDiscountTag: true,
        discountTitle: '50%할인! 3',
        discountContent: '50%할인을 해드리겠습니다. 많이많이오세요! 3',
        showEventTag: true,
        phone: '02-934-5733 3',
        get events() {
          return Model.events;
        },
        get reviewCount() {
          return Model.reviews.length;
        },
        get photos() {
          return Model.photos;
        },
        get reviews() {
          return Model.reviews;
        },
        get products() {
          return Model.products;
        },
        get favorites() {
          return Model.favorites;
        },
        get posts() {
          return Model.posts;
        }, // Not used but just incase

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // places: [this.place1, this.place2, this.place3],

      //===================================================================

      post1: {
        id: 1400,
        title: '퇴근하고 칵테일 한잔 하실분들 모집! 1',
        category: '자유톡', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
        showInTalk: true, //익명여부
        content: '010-111-1111 으로 카톡주세요! 서울 강남역 5번출구에서 8시에 모입니다 ㅎㅎ 1',
        get commentCount() {
          return Model.comments.length;
        },
        get comments() {
          return Model.comments;
        },
        get photos() {
          return Model.photos;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      post2: {
        id: 1401,
        title: '퇴근하고 칵테일 한잔 하실분들 모집! 2',
        category: '연애톡', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
        showInTalk: false, //익명여부
        content: '020-222-2222 으로 카톡주세요! 서울 강남역 5번출구에서 8시에 모입니다 ㅎㅎ 2',
        get commentCount() {
          return Model.comments.length;
        },
        get comments() {
          return Model.comments;
        },
        get photos() {
          return Model.photos;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      post3: {
        id: 1402,
        title: '퇴근하고 칵테일 한잔 하실분들 모집! 3',
        category: '자유톡', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
        showInTalk: true, //익명여부
        content: '030-333-3333 으로 카톡주세요! 서울 강남역 5번출구에서 8시에 모입니다 ㅎㅎ 3',
        get commentCount() {
          return Model.comments.length;
        },
        get comments() {
          return Model.comments;
        },
        get photos() {
          return Model.photos;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      post4: {
        id: 1403,
        title: '공지입니다. 오늘은 정기정검 날입니다.',
        category: 'NOTICE', // '자유톡', '연애톡', '번개톡', '유머톡', 'NOTICE', 'FAQ'
        showInTalk: true, //익명여부
        content: '9시부터 6시까지 사용불가입니다~! 잠시만 기다려주세요!',
        get commentCount() {
          return Model.comments.length;
        },
        get comments() {
          return Model.comments;
        },
        get photos() {
          return Model.photos;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // posts: [this.post1, this.post2, this.post3],

      //===================================================================

      product1: {
        id: 1500,
        category: 'FOOD', // FOOD / DRINK
        name: '생크림케잌 1',
        price: '13000원 1', //Integer가 아니다.
        get place() {
          return Model.place1;
        },
        get photos() {
          return Model.photos;
        }, //  Not used just incase
        get reviews() {
          return Model.reviews;
        }, //  Not used just incase

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      product2: {
        id: 1501,
        category: 'DRINK', // FOOD / DRINK
        name: '오렌지쥬스 2',
        price: '23000원 2', //Integer가 아니다.
        get place() {
          return Model.place2;
        },
        get photos() {
          return Model.photos;
        }, //  Not used just incase
        get reviews() {
          return Model.reviews;
        }, //  Not used just incase

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      product3: {
        id: 1502,
        category: 'FOOD', // FOOD / DRINK
        name: '고구마케잌 3',
        price: '33000원 3', //Integer가 아니다.
        get place() {
          return Model.place3;
        },
        get photos() {
          return Model.photos;
        }, //  Not used just incase
        get reviews() {
          return Model.reviews;
        }, //  Not used just incase

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // products: [this.product1, this.product2, this.product3],

      //===================================================================

      review1: {
        id: 1700,
        rating: 5,
        content: '정말 맛있네요 대박집인듯 굳굳! 1',
        viewCount: 23,
        get photos() {
          return Model.photos;
        },
        get place() {
          return Model.place1;
        },
        get comment() {
          return Model.comment1;
        },
        get product() {
          return Model.product1;
        }, //  Not used

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      review2: {
        id: 1701,
        rating: 3,
        content: '별로네요 여기 분위기도 친절도도 노답 2',
        viewCount: 23,
        get photos() {
          return Model.photos;
        },
        get place() {
          return Model.place2;
        },
        get comment() {
          return Model.comment2;
        },
        get product() {
          return Model.product2;
        }, //  Not used

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.owner;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      review3: {
        id: 1702,
        rating: 4,
        content: '나쁘지않아요 괜찮은편이네요. 3',
        viewCount: 23,
        get photos() {
          return Model.photos;
        },
        get place() {
          return Model.place3;
        },
        get comment() {
          return Model.comment3;
        },
        get product() {
          return Model.product3;
        }, //  Not used

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.admin;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      // reviews: [this.review1, this.review2, this.review3],

      //===================================================================

      user: {
        id: 2000,
        username: '일반유저',
        email: 'aaa123@naver.com',
        nickname: '일반 aaa',
        get profilePhoto() {
          return Model.photo1;
        },
        get devices() {
          return Model.devices;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      owner: {
        id: 2001,
        username: '사장유저',
        email: 'bbb123@naver.com',
        nickname: '사장 bbb',
        get profilePhoto() {
          return Model.photo2;
        },
        get devices() {
          return Model.devices;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },
      admin: {
        id: 2002,
        username: '관리유저',
        email: 'ccc123@naver.com',
        nickname: '관리 ccc',
        get profilePhoto() {
          return Model.photo3;
        },
        get devices() {
          return Model.devices;
        },

        get createdAt() {
          return new Date();
        },
        get updatedAt() {
          return new Date();
        },
        get owner() {
          return Model.user;
        },
        get createdBy() {
          return Model.user;
        },
        get updatedBy() {
          return Model.user;
        }
      },

      //owner: null, createdBy: null, updatedBy: null
      //===================================================================

      //Controller에서 id를 넘겨주면 id로 검색해서 해당객체를 return함
      findOne: function findOne(id) {
        for (var attr in this) {
          if (this[attr].id === id) {
            return this[attr];
          }
        }
      }

    };

    //this키워드는 먹히지 않는 모양이다... 이렇게 각각 초기화시켜주는 수 밖에 없다.
    Model.banners = [Model.banner1, Model.banner2, Model.banner3];
    Model.comments = [Model.comment1, Model.comment2, Model.comment3];
    Model.devices = [Model.device1, Model.device2, Model.device3];
    Model.events = [Model.event1, Model.event2, Model.event3];
    Model.favorites = [Model.favorite1, Model.favorite2, Model.favorite3];
    Model.likes = [Model.like1, Model.like2, Model.like3];
    Model.messages = [Model.message1, Model.message2, Model.message3, Model.message4, Model.message5];
    Model.photos = [Model.photo1, Model.photo2, Model.photo3];
    Model.places = [Model.place1, Model.place2, Model.place3];
    Model.posts = [Model.post1, Model.post2, Model.post3];
    Model.products = [Model.product1, Model.product2, Model.product3];
    Model.reviews = [Model.review1, Model.review2, Model.review3];

    return Model;
  }
})();
'use strict';

//====================================================
//  Usage
//====================================================
// <ion-content class="has-subheader bottom44px"
//   scroll="false"
// >
//   <div id="gm0"
//     google-map
//     icon="img/map_iconunselect.png"
//     active-icon="img/map_iconselect.png"
//     center-marker="true"
//     idle-event="true"
//     vm="GoogleMap"
//     places="GoogleMap.Model.products"
//   >

//   </div>
// </ion-content>
(function () {
  'use strict';

  angular.module('app').directive('averageStars', averageStars);

  averageStars.$inject = [];

  function averageStars() {

    var directiveDefinitionObject = {
      scope: {
        rating: '=',
        vm: '='
      },
      template: '\n        <div class="col-auto zero mr2p"\n          ng-repeat="a in vm.getAverageRating(rating)">\n          <i class="ion-android-star positive"></i>\n        </div>\n        <div class="col-auto zero mr2p"\n          ng-repeat="a in vm.getAverageRating(4.99999999999999 - rating)"><!--5일경우 0.5 단위일시 반올림으로인한 오류가 발생함-->\n          <i class="ion-android-star grey"></i>\n        </div>\n      '
    };

    return directiveDefinitionObject;
  } // google map directive ends
})();
'use strict';

// Calls a specified function when enter is pressed on input
// Usage
// <input ng-enter="vm.myFunction()"></input>
(function (angular) {
  'use strict';

  angular.module('app').directive('dynamicHandle', dynamicHandle);

  dynamicHandle.$inject = [];

  function dynamicHandle() {
    var DDO = {
      priority: 10000,
      restrict: 'A',
      compile: compile
    };

    return DDO;

    function compile(tElement, tAttrs) {
      tAttrs.$set('delegate-handle', 'home');
      return function () {};
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// <ion-content class="has-subheader bottom44px"
//   scroll="false"
// >
//   <div id="gm0"
//     google-map
//     icon="img/map_iconunselect.png"
//     active-icon="img/map_iconselect.png"
//     center-marker="true"
//     idle-event="true"
//     vm="vm"
//     places="GoogleMap.Model.products"
//   >

//   </div>
// </ion-content>
(function () {
  'use strict';

  angular.module('app').directive('googleMap', googleMap);

  googleMap.$inject = ['$window', '$timeout', '$state', '$cordovaGeolocation', 'Message', 'AppStorage'];

  function googleMap($window, $timeout, $state, $cordovaGeolocation, Message, AppStorage) {
    var _ = $window._;

    // Required Input
    // scope.vm: <Object>CtrlAsObject
    // scope.places: <Array>{ geoJSON: { type: 'Point', coordinates: <Array>Number } }
    // atrs.id: String
    // EventListener: <Event>(EventName: '$rootScope:dataBindComplete', data: null)
    // EventListener: <Event>(EventName: 'view.afterEnter', data: null)

    // Optional Input
    // attrs.icon: <String>imgUrl
    // attrs.activeIcon: <String>imgUrl
    // attrs.centerMarker: <String>Boolean
    // attrs.idleEvent: <String>Boolean

    // Output =>
    // vm.setCenterByAddress: (address: String) => void
    // vm.setCEnterByCurrentPosition: () => $qPromise
    // EventEmitter: <Event>(EventName: 'googleMap:featureClicked', data: <String>Place.id)
    // EventEmitter: <Event>(EventName: 'googleMap:centerChanged', data: <Object>{lat: Number, lng: Number})
    var directiveDefinitionObject = {
      scope: {
        vm: '=',
        places: '='
      },
      compile: function compile(element, attrs) {
        var google = $window.google;
        //====================================================
        //  Initial Setup
        //====================================================
        attrs.$set('dataTapDisabled', true);
        element.css({
          height: '100%',
          width: '100%'
        });
        var div = element[0];

        if (!AppStorage[attrs.id]) {
          AppStorage[attrs.id] = {
            lastCenter: {
              lat: null,
              lng: null
            }
          };
        }
        if (!AppStorage[attrs.id].lastCenter.lat || !AppStorage[attrs.id].lastCenter.lng) {
          AppStorage[attrs.id].lastCenter.lat = 37.497942;
          AppStorage[attrs.id].lastCenter.lng = 127.027621;
        }
        var mapOptions = {
          center: AppStorage[attrs.id].lastCenter,
          zoom: 15,
          streetViewControl: true,
          scaleControl: false,
          rotateControl: false,
          zoomControl: false,
          mapTypeControl: false
        };

        var map = new google.maps.Map(div, mapOptions);
        var geocoder = new google.maps.Geocoder();
        var ps = new google.maps.places.PlacesService(map);
        var myMarker; /* available when center-marker="true"*/
        if (attrs.icon) {
          /*set marker image*/
          map.data.setStyle({
            icon: attrs.icon
          });
        }

        //====================================================
        //  Compile Implementations
        //====================================================
        // (searchWord: String) => void
        function setCenterByPlace(searchWord) {
          console.log("'searchPlace' :::\n", 'searchPlace');
          ps.textSearch({
            query: searchWord
          }, function (results, status) {
            console.log("results[0] :::\n", results[0]);
            if (status == google.maps.places.PlacesServiceStatus.OK) {
              map.setCenter(results[0].geometry.location);
              if (attrs.centerMarker === 'true') {
                if (myMarker) {
                  myMarker.setMap(null);
                }
                myMarker = new google.maps.Marker({
                  map: map,
                  position: results[0].geometry.location,
                  draggable: true
                });
                myMarker.addListener('dragend', function () {
                  map.setCenter(myMarker.getPosition());
                });
              }
            } else {
              console.log("googleMap.searchPlace status :::\n", status);
            }
          });
        }
        // (address: String) => void
        function setCenterByAddress(address) {
          geocoder.geocode({
            address: address
          }, function (results, status) {
            console.log("results :::\n", results);
            if (status === google.maps.GeocoderStatus.OK) {
              map.setCenter(results[0].geometry.location);
              if (attrs.centerMarker === 'true') {
                if (myMarker) {
                  myMarker.setMap(null);
                }
                myMarker = new google.maps.Marker({
                  map: map,
                  position: results[0].geometry.location,
                  draggable: true
                });
                myMarker.addListener('dragend', function () {
                  map.setCenter(myMarker.getPosition());
                });
              }
            } else {
              console.log("googleMap.setCenterByAddress :::\n", status);
            }
          });
        }

        // () => $qPromise
        function setCenterByCurrentPosition() {
          Message.loading();
          return $cordovaGeolocation.getCurrentPosition({
            maximumAge: 10000,
            timeout: 7000
          }).then(function (position) {
            Message.hide();
            if (position.coords == null) {
              Message.alert('위치 공유가 꺼져있습니다.', '위치 공유를 켜주세요.');
              return false;
            }
            var centerLatLng = new google.maps.LatLng(Number(position.coords.latitude), Number(position.coords.longitude));
            map.setCenter(centerLatLng);
            if (attrs.centerMarker === 'true') {
              if (myMarker) {
                myMarker.setMap(null);
              }
              myMarker = new google.maps.Marker({
                map: map,
                position: centerLatLng,
                draggable: true
              });
              myMarker.addListener('dragend', function () {
                map.setCenter(myMarker.getPosition());
              });
            }
          }).catch(function (err) {
            console.log("googleMap.setCenterByCurrentPosition :::\n", err);
            Message.hide();
            Message.alert('위치 공유가 꺼져있습니다.', '위치 공유를 켜주세요.');
          });
        }

        // find address.

        //====================================================
        //  Link Function
        //====================================================
        return function link(scope, element, attrs) {
          // functions bind to CtrlAs method
          scope.vm.setCenterByAddress = setCenterByAddress;
          scope.vm.setCenterByCurrentPosition = setCenterByCurrentPosition;
          scope.vm.setCenterByPlace = setCenterByPlace;
          // on bindDataComplete add features to the map
          // if params.id exists remove all features and add only one back.
          scope.$on('$rootScope:bindDataComplete', function () {
            $timeout(function () {
              var geoJson = dataToFeatures(scope.places);
              if (geoJson.length === 0) {
                return false;
              }
              if ($state.params.placeId) {
                map.setCenter(new google.maps.LatLng(Number(geoJson.features[0] && geoJson.features[0].geometry.coordinates[1]), Number(geoJson.features[0] && geoJson.features[0].geometry.coordinates[0])));
              }
              map.data.addGeoJson(geoJson);
            }, 5);
          });

          map.data.addListener('click', function (event) {
            scope.$emit('googleMap:featureClicked', event.feature.getProperty('id'));
            if (attrs.activeIcon) {
              /* set clicked feature's style */
              map.data.revertStyle();
              map.data.overrideStyle(event.feature, {
                icon: attrs.activeIcon
              });
            }
          });

          scope.$on('relayout', function () {
            $timeout(function () {
              google.maps.event.trigger(map, 'resize');
            }, 0);
          });

          if (attrs.idleEvent === 'true') {
            if (!$state.params.placeId) {
              map.addListener('idle', function () {
                var lng = map.getCenter().lng();
                var lat = map.getCenter().lat();
                AppStorage[attrs.id].lastCenter.lat = lat;
                AppStorage[attrs.id].lastCenter.lng = lng;
                scope.$emit('googleMap:centerChanged', AppStorage[attrs.id].lastCenter);
              });
            }
          }
        }; /*link ends*/
      } /*compile ends*/
    }; /* directive definition object ends */

    return directiveDefinitionObject;

    //====================================================
    //  Helper
    //====================================================
    //( placeArray: <Array>{geoJSON: {type: 'Point', coordinates: <Array>Number}} )
    //=> FeatureObjs: <Array> {
    //  type: String,
    //  features: {
    //    type: String,
    //    geometry: <Array>Number,
    //    properties: Object
    //  }}
    function dataToFeatures(placeArray) {
      var result = {
        type: 'FeatureCollection',
        features: []
      };
      if (!Array.isArray(placeArray)) {
        placeArray = _.compact([placeArray]);
      }
      var features = _.map(placeArray, function (item) {
        var feature = {
          type: 'Feature'
        };
        if (item.geoJSON) {
          var geometry = _.clone(item.geoJSON);
          delete item.geoJSON;
          feature.properties = item;
          feature.geometry = geometry;
          return feature;
        }
      });
      result.features = _.compact(features);
      return result;
    }
  } // google map directive ends
})();
'use strict';

// Calls a specified function when enter is pressed on input
// Usage
// <input ng-enter="vm.myFunction()"></input>
(function (angular) {
  'use strict';

  angular.module('app').directive('ngEnter', ngEnter);

  ngEnter.$inject = ['$window'];

  function ngEnter($window) {
    return function (scope, element, attrs) {
      element.bind("keydown keypress", function (event) {
        if (event.which === 13) {
          scope.$apply(function () {
            scope.$eval(attrs.ngEnter);
          });
          if ($window.cordova) {
            $window.cordova.plugins.Keyboard.close();
          }
          event.preventDefault();
        }
      });
    };
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// wait for ng repat to finish 'ngRepeatFinished' event emitted to controller
(function (angular) {
  'use strict';

  angular.module('app').directive('onFinishRender', onFinishRender);

  onFinishRender.$inject = ['$timeout'];

  function onFinishRender($timeout) {
    return {
      restrict: 'A',
      link: link
    };

    function link(scope) {
      if (scope.$last === true) {
        $timeout(function () {
          scope.$emit('ngRepeatFinished');
        });
      }
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// ion-scroll[direction="x" parent-scroll]

// Fixes the case where parent veritcal scrolling(eg ion-content scroll) is disabled on area where ion-scroll is located.
(function (angular) {
  'use strict';

  angular.module('app').directive('parentScroll', parentScroll);

  parentScroll.$inject = ['$ionicScrollDelegate', '$timeout', '$window', '$document'];

  function parentScroll($ionicScrollDelegate, $timeout, $window, $document) {
    return {
      scope: true,
      restrict: 'A',
      compile: compile
    };

    function compile(element, attr) {

      if (!$window.horizontalIonScrollCount) {
        $window.horizontalIonScrollCount = 0;
      }

      $window.horizontalIonScrollCount++;
      attr.delegateHandle = "horizontal" + $window.horizontalIonScrollCount;

      return function (scope, element, attr) {
        $timeout(function () {
          var horizontal = attr.delegateHandle;
          var sv = $ionicScrollDelegate.$getByHandle(horizontal).getScrollView();

          var container = sv.__container;

          var originaltouchStart = sv.touchStart;
          var originalmouseDown = sv.mouseDown;
          var originaltouchMove = sv.touchMove;
          var originalmouseMove = sv.mouseMove;

          container.removeEventListener('touchstart', sv.touchStart);
          container.removeEventListener('mousedown', sv.mouseDown);
          $document.removeEventListener('touchmove', sv.touchMove);
          $document.removeEventListener('mousemove', sv.mousemove);

          sv.touchStart = function (e) {
            e.preventDefault = function () {};
            originaltouchStart.apply(sv, [e]);
          };

          sv.touchMove = function (e) {
            e.preventDefault = function () {};
            originaltouchMove.apply(sv, [e]);
          };

          sv.mouseDown = function (e) {
            e.preventDefault = function () {};

            if (originalmouseDown) {
              originalmouseDown.apply(sv, [e]);
            }
          };

          sv.mouseMove = function (e) {
            e.preventDefault = function () {};

            if (originalmouseMove) {
              originalmouseMove.apply(sv, [e]);
            }
          };

          container.addEventListener("touchstart", sv.touchStart, false);
          container.addEventListener("mousedown", sv.mouseDown, false);
          $document.addEventListener("touchmove", sv.touchMove, false);
          $document.addEventListener("mousemove", sv.mouseMove, false);
        });
      };
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================

// Injects findPlaces(searchWord) to PostCreate CtrlAsObj
// vm.findPlaces(searchWord) => vm.Model.places: [{}];

// IN HTML
// <div
//   place-search
//   vm="PostCreate"
// ></div>

// <div class="row zero">
//   <div class="col zero">
//     <input type="text"
//       placeholder="국가 / 지역 / 역(건물) 주변까지 검색하여 입력"
//       ng-model="PostCreate.searchWord"
//       ng-enter="PostCreate.findPlaces(PostCreate.searchWord)"
//     >
//   </div>
//   <div class="col-10 flex"
//     ng-click="PostCreate.findPlaces(PostCreate.searchWord);"
//   >
//     <i class="ion-android-search"></i>
//   </div>
// </div>

// <div
//   ng-if="PostCreate.Model.places.length > 0"
// >
//   <p class="zero">
//     장소를 골라주세요
//   </p>
//   <div class="row zero row-places"
//     ng-repeat="place in PostCreate.Model.places"
//     ng-click="PostCreate.selectAbroadPlace(place);"
//   >
//     <div class="col zero col-address flex">
//       <p class="zero address-text">
//         {{place.formatted_address}}
//       </p>
//     </div>
//   </div>
// </div>

// IN CONTROLLER
// function selectAbroadPlace(placeObj) {
//   PostCreate.searchWord = placeObj.formatted_address;
//   PostCreateModel.form.address = placeObj.formatted_address;
//   PostCreateModel.form.geoJSON = {
//     type: 'Point',
//     coordinates: [
//       Number(placeObj.geometry.location.lng()),
//       Number(placeObj.geometry.location.lat())
//     ]
//   };
//   PostCreateModel.places = [];
//   $ionicScrollDelegate.resize();
// }

(function () {
  'use strict';

  angular.module('app').directive('placeSearch', placeSearch);

  placeSearch.$inject = ['$window', '$timeout', '$state', '$cordovaGeolocation', '$q'];

  function placeSearch($window, $timeout, $state, $cordovaGeolocation, $q) {

    var directiveDefinitionObject = {
      scope: {
        vm: '='
      },
      compile: function compile(element) {
        var google = $window.google;
        //====================================================
        //  Initial Setup
        //====================================================
        var div = element[0];
        var map = new google.maps.Map(div);
        var geocoder = new google.maps.Geocoder();
        var ps = new google.maps.places.PlacesService(map);

        //====================================================
        //  Compile Implementations
        //====================================================

        //====================================================
        //  Link Function
        //====================================================
        return function link(scope) {
          // functions bind to CtrlAs method
          scope.vm.findPlaces = findPlaces;
          //====================================================
          //  Link Implementation
          //====================================================
          function findPlaces(searchWord) {
            var deferred = $q.defer();
            ps.textSearch({
              query: searchWord
            }, function (results, status) {
              if (status == google.maps.places.PlacesServiceStatus.OK) {
                var latLng = results[0].geometry.location;
                deferred.resolve(latLng);
              } else {
                deferred.reject(status);
              }
            });

            deferred.promise.then(function (latLng) {
              var lat = latLng.lat();
              var lng = latLng.lng();

              var deferred = $q.defer();
              geocoder.geocode({
                location: {
                  lat: lat,
                  lng: lng
                }
              }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                  deferred.resolve(results);
                } else {
                  deferred.reject(status);
                }
              });
              return deferred.promise;
            }).then(function (results) {
              console.log("results :::\n", results);
              $timeout(function () {
                scope.vm.Model.places = results;
                console.log("scope.vm.Model.places :::\n", scope.vm.Model.places);
              }, 0);
            }).catch(function (status) {
              console.log("placeSearch.findPlaces status :::\n", status);
            });
          }
        }; /*link ends*/
      } /*compile ends*/
    }; /* directive definition object ends */

    return directiveDefinitionObject;
  } // google map directive ends
})();
'use strict';

//====================================================
//  Usage
//====================================================
// <div class="h300px w100p"
//   static-daum-map
//   marker-src="img/map_04.png"
//   marker-width="40"
//   marker-height="22"
//   longitude="{{PlaceDetail.Model.place.geoJSON.coordinates[0]}}"
//   latitude="{{PlaceDetail.Model.place.geoJSON.coordinates[1]}}"
// >
// </div>
//====================================================
//  Dependencies
//====================================================
// daum map api in www/index.html;
// <script src="http://apis.daum.net/maps/maps3.js?apikey=1d77329135df78c95c219758f5fdddfb&libraries=services"></script>

(function (angular) {
  'use strict';

  angular.module('app').directive('staticDaumMap', staticDaumMap);

  staticDaumMap.$inject = ['$timeout', '$window'];

  function staticDaumMap($timeout, $window) {
    var daum = $window.daum;
    return {
      restrict: 'A',
      link: link
    };

    function link(scope, element, attrs) {
      var DOM = element[0];
      // static daum map does not allow marker image to be set.
      // disabled class is added to normal daumMap to disable all touch events
      element.addClass('disabled' /*30_touched.scss*/);
      scope.$on('$rootScope:bindDataComplete', function () {
        var markerSize = new daum.maps.Size(Number(attrs.markerWidth), Number(attrs.markerHeight));
        var markerImg = new daum.maps.MarkerImage(attrs.markerSrc, markerSize);
        var placePosition = new daum.maps.LatLng(Number(attrs.latitude), Number(attrs.longitude));
        var marker = new daum.maps.Marker({
          position: placePosition,
          image: markerImg
        });
        var staticMapOption = {
          center: placePosition,
          level: 4
        };
        $timeout(function () {
          var map = new daum.maps.Map(DOM, staticMapOption);
          marker.setMap(map);
        }, 0);
      });
    }
  }
})(angular);
'use strict';

// used for setting top value of ion-content
// needed as ios has 20px difference

(function (angular) {
  'use strict';

  angular.module('app').directive('top', top);

  top.$inject = [];

  function top() {
    return {
      restrict: 'A',
      compile: compile
    };

    function compile(element, attrs) {
      var height = attrs.top;
      if (ionic.Platform.isIOS()) {
        element.css('top', Number(height) + 20 + 'px');
      } else {
        element.css('top', Number(height) + 'px');
      }
      return function () {};
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// Some element would not apply .activated class, this fixes it
// div[touch]
// style in touched.scss

(function (angular) {
  'use strict';

  angular.module('app').directive('touch', touch);

  touch.$inject = ['$timeout'];

  function touch($timeout) {
    return {
      restrict: 'A',
      link: link
    };

    function link(scope, element) {
      element.on('click', function () {
        element.addClass('touch');
        $timeout(function () {
          element.removeClass('touch');
        }, 50);
      });
    }
  }
})(angular);
'use strict';

//====================================================
//  Usage
//====================================================
// Set by default in index.html
// make device width in pixels available globally
(function (angular) {
  'use strict';

  angular.module('app').directive('vw', vw);

  vw.$inject = ['$rootScope', '$window'];

  function vw($rootScope, $window) {
    return {
      link: link
    };

    function link(scope, element) {
      $rootScope.vw = element.prop('offsetWidth');

      $window.addEventListener('resize', function () {
        $rootScope.$apply(function () {
          $rootScope.vw = element.prop('offsetWidth');
        });
      });
    }
  }
})(angular);
'use strict';

//<p>{{input | AppText}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('AppText', AppText);

  AppText.$inject = [];

  function AppText() {
    return function (input) {
      if (input === 'faq') {
        return '자주 묻는 질문';
      } else if (input === 'notification') {
        return '공지사항';
      } else if (input === 'high') {
        return '상';
      } else if (input === 'medium') {
        return '중';
      } else if (input === 'low') {
        return '하';
      }
    };
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').filter('Cloudinary800', CloudinaryFilter.bind(null, 800)).filter('Cloudinary750', CloudinaryFilter.bind(null, 750)).filter('Cloudinary700', CloudinaryFilter.bind(null, 700)).filter('Cloudinary650', CloudinaryFilter.bind(null, 650)).filter('Cloudinary600', CloudinaryFilter.bind(null, 600)).filter('Cloudinary550', CloudinaryFilter.bind(null, 550)).filter('Cloudinary500', CloudinaryFilter.bind(null, 500)).filter('Cloudinary450', CloudinaryFilter.bind(null, 450)).filter('Cloudinary400', CloudinaryFilter.bind(null, 400)).filter('Cloudinary350', CloudinaryFilter.bind(null, 350)).filter('Cloudinary300', CloudinaryFilter.bind(null, 300)).filter('Cloudinary250', CloudinaryFilter.bind(null, 250)).filter('Cloudinary200', CloudinaryFilter.bind(null, 200)).filter('Cloudinary150', CloudinaryFilter.bind(null, 150)).filter('Cloudinary100', CloudinaryFilter.bind(null, 100)).filter('Cloudinary50', CloudinaryFilter.bind(null, 50));

  function CloudinaryFilter(size) {
    var matching = /upload/;
    return function (input) {
      if (input) {
        var index = input.search(matching);
        if (index !== -1) {
          return input.substring(0, index) + 'upload/c_scale,w_' + size + '/' + input.substring(input.lastIndexOf('/'));
        } else {
          return input;
        }
      } else if (input == null) {
        return null;
      } else {
        return input;
      }
    };
  }
})(angular);
/**
 * Created by Seunghoon Ko on 10/10/2015
 * As part of applicat platform
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Seunghoon Ko - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Seunghoon Ko <imskojs@gmail.com>, 10/10/2015
 *
 */
'use strict';

//<p>{{input | AppText}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('DateAgo', DateAgo);

  DateAgo.$inject = [];

  function DateAgo() {
    return function (input) {
      var today = moment().startOf('day'); // 2016/03/08 00:00:00
      var at = new Date(input);
      if (at > today) {
        return "test";
      } else {
        return moment(at).format('yyyy.MM.dd HH.mm.ss');
      }
    };
  }
})(angular);
'use strict';

//<p>{{post.owner | GetName}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('GetName', GetName);

  GetName.$inject = [];

  function GetName() {
    return function (user) {
      if (user.name) {
        return user.name;
      } else if (user.nickname) {
        return user.nickname;
      } else if (user.fullname) {
        return user.fullname;
      } else if (user.username) {
        return user.username;
      } else {
        return 'UserX';
      }
    };
  }
})(angular);
'use strict';

//<p>{{post.owner | GetPhoto}}</p>
(function (angular) {
  'use strict';

  angular.module('app').filter('GetPhoto', GetPhoto);

  GetPhoto.$inject = [];

  function GetPhoto() {
    return function (user) {
      if (user.profilePhoto && user.profilePhoto.url) {
        return user.profilePhoto.url;
      } else if (user.profile_image) {
        return user.profile_image;
      } else {
        return 'img/defaultimg.png';
      }
    };
  }
})(angular);
'use strict';

// Input
// vm.openingHours = [{start: "07:00", end: "20:20"}, ..., {start: "08:00", end: "18:00"} ]

// Usage
// div{vm.openingHours | GroupByOpeningHours}

// Output
// ["월~목 07:00 ~ 20:20", "금~토 08:00 ~ 16:00", "일요일 휴무"]

(function (angular) {
  'use strict';

  angular.module('app').filter('GroupByOpeningHours', GroupByOpeningHours);

  GroupByOpeningHours.$inject = ['$window'];

  function GroupByOpeningHours($window) {
    return filter;

    function filter(openingHours) {
      // append index to object
      if (!openingHours) {
        return ['업데이트 해주세요'];
      }
      openingHours = appendIndexToObj(openingHours);
      // group by same hours
      var grouped = groupByBusinessHours(openingHours);
      // create [{days: [0, 1], start: "08:00", end: "20:00"},...}
      var orderedResultArray = createArrayOfObjWithGroup(grouped);
      // create ["월 ~ 금" 08:00 ~ 03:00", "일요일 휴무"]
      var textArray = $window._.map(orderedResultArray, function (result) {
        // result = {days:[0,1], start: '', end: ''};
        result.days = $window._.map(result.days, function (day) {
          var daysKorean = parseDay(day);
          return daysKorean;
        });
        result.days = tildeArrayValuesToText(result.days);
        var apendTime = '';
        if (result.start === result.end) {
          apendTime = '휴무';
        } else {
          apendTime = result.start + ' ~ ' + result.end;
        }
        var texts = result.days + ' ' + apendTime;
        return texts;
      });

      return textArray;
    }

    function appendIndexToObj(openingHours) {
      for (var i = 0; i < openingHours.length; i++) {
        openingHours[i].index = i;
      }
      return openingHours;
    }

    function groupByBusinessHours(openingHours) {
      var grouped = $window._.groupBy(openingHours, function (hoursObj) {
        var start = hoursObj.start;
        var end = hoursObj.end;
        var groupCategory = start + end;
        return groupCategory;
      });
      return grouped;
    }

    function createArrayOfObjWithGroup(grouped) {
      // grouped = ['1212': [{start:'', end:'', index: 0}, ...]]
      // out = [{days:[0,1], start:'',  end:''}, ...]
      var keys = Object.keys(grouped);

      var resultArray = [];
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var subOpeningHoursArray = grouped[key];

        var daysResult = [];
        for (var j = 0; j < subOpeningHoursArray.length; j++) {
          var openingHourObj = subOpeningHoursArray[j];
          daysResult.push(openingHourObj.index);
        }

        var start = subOpeningHoursArray[0].start;
        var end = subOpeningHoursArray[0].end;

        resultArray.push({
          days: daysResult,
          start: start,
          end: end
        });
      }

      var orderedResultArray = $window._.sortBy(resultArray, function (obj) {
        var day = obj.days[0];
        if (day === 0) {
          day = 7;
        }
        return day;
      });

      return orderedResultArray;
    }

    function parseDay(day) {
      if (day === 0) {
        return '일';
      } else if (day === 1) {
        return '월';
      } else if (day === 2) {
        return '화';
      } else if (day === 3) {
        return '수';
      } else if (day === 4) {
        return '목';
      } else if (day === 5) {
        return '금';
      } else if (day === 6) {
        return '토';
      }
    }

    function tildeArrayValuesToText(array) {
      var daysInNumbers = $window._.map(array, function (dayInKorean) {
        if (dayInKorean === '일요일') {
          return 7;
        } else if (dayInKorean === '월') {
          return 1;
        } else if (dayInKorean === '화') {
          return 2;
        } else if (dayInKorean === '수') {
          return 3;
        } else if (dayInKorean === '목') {
          return 4;
        } else if (dayInKorean === '금') {
          return 5;
        } else if (dayInKorean === '토') {
          return 6;
        }
      });
      for (var i = 0; i < daysInNumbers.length - 1; i++) {
        var day_1 = daysInNumbers[i];
        var day_2 = daysInNumbers[i + 1];
        if (Math.abs(day_1 - day_2) > 1) {
          var concatStart = array[0];
          for (var j = 1; j < daysInNumbers.length; j++) {
            concatStart = concatStart + ', ' + array[j];
          }
          return concatStart;
        }
      }
      if (array.length > 2) {
        return array[0] + ' ~ ' + array[array.length - 1];
      } else if (array.length === 2) {
        return array[0] + ', ' + array[1];
      } else if (array.length === 1) {
        return array[0];
      }
    }
  }
})(angular);
/**
 * Created by Seunghoon Ko on 10/10/2015
 * As part of applicat platform
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Seunghoon Ko - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Seunghoon Ko <imskojs@gmail.com>, 10/10/2015
 *
 */
'use strict';

//====================================================
//  Usage
//====================================================
// <p> {{diatanceInMeters | MeterToKilometer}} </p>
// if distance is bigger than 1000m it will convert it to km
(function (angular) {
  'use strict';

  angular.module('app').filter('MeterToKilometer', MeterToKilometer);

  MeterToKilometer.$inject = [];

  function MeterToKilometer() {
    return function (input) {
      if (input >= 1000) {
        return (input / 1000).toFixed(2) + ' km';
      } else if (input === undefined) {
        return '0 m';
      } else {
        return input + ' m';
      }
    };
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Banners', Banners);

  Banners.$inject = ['$resource', 'SERVER_URL'];

  function Banners($resource, SERVER_URL) {

    var endPoint = SERVER_URL + '/banner' + '/:uri';

    var params = {
      uri: '@uri'
    };

    var actions = {
      findFive: {
        method: 'GET',
        params: {
          uri: 'findFive'
        }
      }
    };

    var service = $resource(endPoint, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Comments', Comments);

  Comments.$inject = ['$resource', 'SERVER_URL', 'Photo'];

  function Comments($resource, SERVER_URL, Photo) {

    var commentUrl = SERVER_URL + '/comment' + '/:uri';
    var params = {
      uri: '@uri'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },
      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },
      createComment: {
        method: 'POST',
        params: {
          uri: 'createComment'
        }
      },
      updateComment: {
        method: 'PUT',
        params: {
          uri: 'updateComment'
        }
      },
      destroyComment: {
        method: 'DELETE',
        params: {
          uri: 'destroyComment'
        }
      }
    };

    var service = $resource(commentUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Coupons', Coupons);

  Coupons.$inject = ['$resource', 'SERVER_URL'];

  function Coupons($resource, SERVER_URL) {

    var couponUrl = SERVER_URL + '/coupon' + '/:find' + '/:findOne' + '/:create' + '/:update' + '/:updatePassword' + '/:use' + '/:destroy';

    var params = {
      find: '@find',
      findOne: '@findOne',
      create: '@create',
      update: '@update',
      destroy: '@destroy',
      updatePassword: '@updatePassword',
      use: '@use'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },
      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },
      create: {
        method: 'POST',
        params: {
          create: 'create'
        }
      },
      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },
      updatePassword: {
        method: 'PUT',
        params: {
          updatePassword: 'updatePassword'
        }
      },
      use: {
        method: 'PUT',
        params: {
          use: 'use'
        }
      },
      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      }
    };

    var service = $resource(couponUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Events', Events);

  Events.$inject = ['$resource', 'SERVER_URL'];

  function Events($resource, SERVER_URL) {

    var eventUrl = SERVER_URL + '/event' + '/:find' + '/:findOne' + '/:create' + '/:update' + '/:destroy' + '/:like' + '/:unlike' + '/:findLikedEvents';

    var params = {
      find: '@find',
      findOne: '@findOne',
      create: '@create',
      update: '@update',
      destroy: '@destroy',
      like: '@like',
      unlike: '@unlike',
      findLikedEvents: '@findLikedEvents'
    };

    var actions = {

      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },

      create: {
        method: 'POST',
        params: {
          create: 'create'
        }
      },

      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      },

      like: {
        method: 'POST',
        params: {
          like: 'like'
        }
      },

      unlike: {
        method: 'POST',
        params: {
          unlike: 'unlike'
        }
      },
      findLikedEvents: {
        method: 'GET',
        params: {
          findOne: 'findLikedEvents'
        }
      }
    };

    var service = $resource(eventUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Favorites', Favorites);

  Favorites.$inject = ['$resource', 'SERVER_URL'];

  function Favorites($resource, SERVER_URL) {
    var url = SERVER_URL + '/favorite/:uri';

    var params = { uri: '@uri' };

    var actions = {
      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      createPlace: {
        method: 'POST',
        params: {
          uri: 'createPlace'
        }
      },

      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          uri: 'destroy'
        }
      }
    };

    return $resource(url, params, actions);
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('Logs', Logs);

  Logs.$inject = ['$resource', 'governorUrl'];

  function Logs($resource, governorUrl) {

    var postUrl = governorUrl + '/log';

    var params = {
      log: '@log'
    };

    var actions = {
      log: {
        method: 'POST',
        params: {
          log: 'log'
        }
      }
    };

    var service = $resource(postUrl, params, actions);
    return service;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Messages', Messages);

  Messages.$inject = ['$resource', 'SERVER_URL'];

  function Messages($resource, SERVER_URL) {

    var reviewUrl = SERVER_URL + '/message' + '/:uri';

    var params = {
      uri: '@uri'
    };

    var actions = {

      create: {
        method: 'POST',
        params: {
          uri: 'create'
        }
      },

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findUnique: {
        method: 'GET',
        params: {
          uri: 'findUnique'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          uri: 'destroy'
        }
      }
    };

    var service = $resource(reviewUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Places', Places);

  Places.$inject = ['$resource', 'SERVER_URL'];

  function Places($resource, SERVER_URL) {

    var placeUrl = SERVER_URL + '/place' + '/:find' + '/:findLikedPlaces' + '/:findOne' + '/:create' + '/:update' + '/:destroy' + '/:like' + '/:findNative' + '/:contactOwner';

    var params = {
      find: '@find',
      findLikedPlaces: '@findLikedPlaces',
      findOne: '@findOne',
      create: '@create',
      update: '@update',
      destroy: '@destroy',
      like: '@like',

      findNative: '@findNative',
      contactOwner: '@contactOwner'
    };

    var actions = {

      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },

      findLikedPlaces: {
        method: 'GET',
        params: {
          findLikedPlaces: 'findLikedPlaces'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },

      create: {
        method: 'POST',
        params: {
          create: 'create'
        }
      },

      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },

      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      },

      like: {
        method: 'POST',
        params: {
          like: 'like'
        }
      },

      // longitude, latitude, distance
      findNative: {
        method: 'GET',
        params: {
          findNative: 'findNative'
        }
      },

      contactOwner: {
        method: 'POST',
        params: {
          contactOwner: 'contactOwner'
        }
      }

    };

    var service = $resource(placeUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Posts', Posts);

  Posts.$inject = ['$resource', 'SERVER_URL', 'Photo'];

  function Posts($resource, SERVER_URL, Photo) {

    var postUrl = SERVER_URL + '/post' + '/:uri';

    var params = {
      uri: '@uri'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },
      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },
      create: {
        method: 'POST',
        params: {
          uri: 'create'
        }
      },
      update: {
        method: 'PUT',
        params: {
          uri: 'update'
        }
      },
      destroy: {
        method: 'DELETE',
        params: {
          uri: 'destroy'
        }
      }
    };

    var service = $resource(postUrl, params, actions);

    return service;
  }
})(angular);
/**
 * Created by Seunghoon Ko on 10/10/2015
 * As part of applicat platform
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Seunghoon Ko - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Seunghoon Ko <imskojs@gmail.com>, 10/10/2015
 *
 */
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Products', Products);

  Products.$inject = ['$resource', 'SERVER_URL', 'Photo'];

  function Products($resource, SERVER_URL, Photo) {

    var productUrl = SERVER_URL + '/product' + '/:uri';

    var params = {
      'uri': '@uri'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      }
    };

    var service = $resource(productUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Reviews', Reviews);

  Reviews.$inject = ['$resource', 'SERVER_URL'];

  function Reviews($resource, SERVER_URL) {

    var reviewUrl = SERVER_URL + '/review' + '/:uri';

    var params = {
      uri: '@uri'
    };

    var actions = {

      find: {
        method: 'GET',
        params: {
          uri: 'find'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          uri: 'findOne'
        }
      },

      createReview: {
        method: 'POST',
        params: {
          uri: 'createReview'
        }
      },

      updateReview: {
        method: 'PUT',
        params: {
          uri: 'updateReview'
        }
      },

      destroyReview: {
        method: 'DELETE',
        params: {
          uri: 'destroyReview'
        }
      }

    };

    var service = $resource(reviewUrl, params, actions);

    return service;
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('Users', Users);

  Users.$inject = ['$resource', 'Photo', 'SERVER_URL'];

  function Users($resource, Photo, SERVER_URL) {

    var postUrl = SERVER_URL + '/user' + '/:login' + '/:findOne' + '/:update' + '/:changePassword' + '/:sendEmail';

    var params = {
      login: '@login',
      findOne: '@findOne',
      update: '@update',
      changePassword: '@changePassword',
      sendEmail: '@sendEmail'
    };

    var actions = {
      login: {
        method: 'POST',
        params: {
          login: 'login'
        }
      },

      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },

      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },

      changePassword: {
        method: 'POST',
        params: {
          changePassword: 'changePassword'
        }
      },

      sendEmail: {
        method: 'POST',
        params: {
          sendEmail: 'sendEmail'
        }
      }
    };

    var service = $resource(postUrl, params, actions);

    service.register = register;
    service.updateMyPageBg = updateMyPageBg;
    service.update = update;

    return service;

    function register(param, query) {
      console.log("---------- Users.register Service Query ----------");
      console.log(query);
      var promise = Photo.post('/user/register', query, 'POST').then(function (dataWrapper) {
        return dataWrapper.data;
      });
      return {
        $promise: promise
      };
    }

    function updateMyPageBg(param, query) {
      var promise = Photo.post('/user/updateMyPageBg', query, 'PUT').then(function (dataWrapper) {
        return dataWrapper.data;
      });
      return {
        $promise: promise
      };
    }

    function update(param, query) {
      var promise = Photo.post('/user/update', query, 'PUT').then(function (dataWrapper) {
        return dataWrapper;
      });
      return {
        $promise: promise
      };
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('MainController', MainController);

  MainController.$inject = ['_MockData', '$scope', '$state', '$ionicSideMenuDelegate', '$ionicModal', 'MainModel', 'AppStorage'];

  function MainController(_MockData, $scope, $state, $ionicSideMenuDelegate, $ionicModal, MainModel, AppStorage) {

    var Main = this;
    Main.Model = MainModel;

    Main.logout = logout;
    //====================================================
    //  Implementation
    //====================================================
    function logout(stateAfterLogout) {
      AppStorage = {
        isFirstTime: true
      };
      $ionicSideMenuDelegate.toggleLeft(false);
      $state.go(stateAfterLogout);
    }

    //====================================================
    //  Modal
    //====================================================
    // $ionicModal.fromTemplateUrl('state/Main/Modal/RequestLoginModal.html', {
    //   scope: $scope,
    //   animation: 'mh-slide'
    // }).then(function(modal) {
    //   Main.RequestLoginModal = modal;
    // });
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('MainModel', MainModel);

  MainModel.$inject = [];

  function MainModel() {

    var model = {};

    return model;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('FooterController', FooterController);

  FooterController.$inject = ['$rootScope', '$state', 'FooterModel'];

  function FooterController($rootScope, $state, FooterModel) {
    var Footer = this;
    Footer.Model = FooterModel;

    Footer.goToState = goToState;
    //====================================================
    //  Implementation
    //====================================================
    function goToState(state, params) {
      // Home
      if ($state.includes('Main.Footer.Home')) {
        return $rootScope.goToState(state, params, 'forward');

        //EventTab 과 하위 state까지 포함 (JoodangEventList 등)
      } else if ($state.includes('Main.Footer.EventTab')) {
          if (state === 'Main.Footer.Home') {
            return $rootScope.goToState(state, params, 'back');
          } else {
            return $rootScope.goToState(state, params, 'forward');
          }

          //SearchTab 과 하위 state까지 포함 (ProvinceSearchList 등)
        } else if ($state.includes('Main.Footer.SearchTab')) {
            if (state === 'Main.Footer.Home' || state === 'Main.Footer.EventTab.JoodangEventList') {
              return $rootScope.goToState(state, params, 'back');
            } else {
              return $rootScope.goToState(state, params, 'forward');
            }

            //TalkList
          } else if ($state.includes('Main.Footer.TalkList') || $state.includes('Main.Footer.MyTalkList') || $state.includes('Main.Footer.TalkDetail') || $state.includes('Main.Footer.TalkCreate') || $state.includes('Main.Footer.TalkUpdate')) {
              if (state === 'Main.Footer.Home' || state === 'Main.Footer.EventTab.JoodangEventList' || state === 'Main.Footer.SearchTab.ProvinceList') {
                return $rootScope.goToState(state, params, 'back');
              } else {
                return $rootScope.goToState(state, params, 'forward');
              }

              //SettingList
            } else if ($state.includes('Main.Footer.SettingList') || $state.includes('Main.Footer.Profile')) {
                if (state === 'Main.Footer.Home' || state === 'Main.Footer.EventTab.JoodangEventList' || state === 'Main.Footer.SearchTab.ProvinceList' || state === 'Main.Footer.TalkList') {
                  return $rootScope.goToState(state, params, 'back');
                } else {
                  return $rootScope.goToState(state, params, 'forward');
                }
              }
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('FooterModel', FooterModel);

  FooterModel.$inject = [];

  function FooterModel() {

    var Model = {
      handle: 'footer',
      loading: false

    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('BarEventDetailController', BarEventDetailController);

  BarEventDetailController.$inject = ['_MockData', '$scope', '$q', '$state', 'BarEventDetailModel', 'Util', 'Events'];

  function BarEventDetailController(_MockData, $scope, $q, $state, BarEventDetailModel, Util, Events) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = BarEventDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(BarEventDetailModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      initPromise.then(function (event) {
        //initPromise 를 실행하고 나온 결과값인가?
        Util.bindData(event, BarEventDetailModel, 'event'); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        console.log("vm.Model :::\n", vm.Model);
      });
      /*  bindData(data, model, name, emitEventTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.events = EventWrapper
          ==> Model.events = EventWrapper.events  */
      // console.log("_MockData :::\n", _MockData);
      // Util.bindData(_MockData, BarEventDetailModel, 'events');
      // console.log("BarEventDetailModel :::\n", BarEventDetailModel);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      return eventFind({ id: $state.params.eventId });
    }

    function reset() {}
    // vm.Model.review.rating = 0;
    // vm.Model.review.content = '';
    // vm.Model.review.photos = [];


    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          sort: {},
          limit: 30,
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.findOne(queryWrapper).$promise.then(function (event) {
        console.log("event :::\n", event);
        return event; //{id: 12321, name: 'eventName'}
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('BarEventDetailModel', BarEventDetailModel);

  BarEventDetailModel.$inject = [];

  function BarEventDetailModel() {

    var Model = {
      handle: 'bar-event-detail',
      loading: false
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('BarEventListController', BarEventListController);

  BarEventListController.$inject = ['_MockData', '$scope', '$q', 'BarEventListModel', 'Util', 'Events', 'RootScope'];

  function BarEventListController(_MockData, $scope, $q, BarEventListModel, Util, Events, RootScope) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = BarEventListModel;
    vm.goToState = goToState;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(BarEventListModel);
        initPromise = init();
        //2개의 array Promise가 들어있는 Promise array 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      initPromise.then(function (array) {
        //initPromise 를 실행하고 나온 결과값인가?
        var joodangEventsWrapper = array[0];
        var barEventsWrapper = array[1];
        BarEventListModel.events = joodangEventsWrapper.events; //바인딩 되는것은 이거나 아래나 똑같지만,
        Util.bindData(barEventsWrapper, BarEventListModel, 'events'); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        console.log("BarEventListModel :::\n", BarEventListModel);
      });
      /*  bindData(data, model, name, emitEventTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.events = EventWrapper
          ==> Model.events = EventWrapper.events  */
      // console.log("_MockData :::\n", _MockData);
      // Util.bindData(_MockData, BarEventListModel, 'events');
      // console.log("BarEventListModel :::\n", BarEventListModel);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function goToState(category, params, direction) {
      if (category === 'JOODANG-EVENT') {
        RootScope.goToState('Main.JoodangEventDetail', params, direction);
      } else if (category === 'BAR-EVENT') {
        RootScope.goToState('Main.BarEventDetail', params, direction);
      }
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var joodangEventsPromise = eventFind({ category: 'JOODANG-EVENT' });
      var barEventsPromise = eventFind({ category: 'BAR-EVENT' });
      return $q.all([joodangEventsPromise, barEventsPromise]).then(function (array) {
        //위의 3개의 array promise를 보내서
        return array; //하나의 array promise가 return됨. (무슨 작업을 하는지는 의문)
      });
    }

    function reset() {}
    // vm.Model.review.rating = 0;
    // vm.Model.review.content = '';
    // vm.Model.review.photos = [];


    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          sort: {},
          limit: 30,
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.find(queryWrapper).$promise.then(function (eventsWrapper) {
        console.log("eventsWrapper :::\n", eventsWrapper);
        return eventsWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('BarEventListModel', BarEventListModel);

  BarEventListModel.$inject = [];

  function BarEventListModel() {

    var Model = {
      handle: 'bar-event-list',
      loading: false,
      events: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('CommentCreateController', CommentCreateController);

  CommentCreateController.$inject = ['_MockData', '$scope', '$state', '$q', 'CommentCreateModel', 'Util', 'RootScope', 'AppStorage', 'Users', 'Reviews', 'Comments'];

  function CommentCreateController(_MockData, $scope, $state, $q, CommentCreateModel, Util, RootScope, AppStorage, Users, Reviews, Comments) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = CommentCreateModel;
    vm.getAverageRating = getAverageRating;
    vm.commentCreate = commentCreate;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log('\n\n\n====================\n' + $state.current.url + '\n====================\n');
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
      console.log("$state.params :::\n", $state.params);
    }

    function onAfterEnter() {
      initPromise.then(function (array) {
        var user = array[0];
        var review = array[1];
        vm.Model.reviewOwner = user;
        Util.bindData(review, vm.Model, 'review');
      });
      // var review = _MockData.findOne($state.params.reviewId);
      // console.log("review :::\n", review);
      // Util.bindData(review, vm.Model, 'review');

      vm.Model.user = AppStorage.user;
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      var userPromise = userFind({ id: $state.params.reviewOwner.id });
      var reviewPromise = reviewFind({ id: $state.params.reviewId }, { populate: ['photos'] });
      return $q.all([userPromise, reviewPromise]).then(function (array) {
        return array;
      });
    }

    function reset() {
      var defaultObj = {
        loading: false,
        user: {}, //로그인한 유저 본인, 세션
        review: {},
        reviewOwner: {},
        comment: {
          content: ''
        }
      };
      angular.copy(defaultObj, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function userFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };

      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Users.findOne(queryWrapper).$promise.then(function (user) {
        console.log("user :::\n", user);
        return user;
      });
    }

    function reviewFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };

      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Reviews.findOne(queryWrapper).$promise.then(function (review) {
        //{id: 1300, name: 'asda' ... }
        console.log("review :::\n", review);
        return review;
      });
    }

    function commentCreate() {
      vm.Model.loading = true;
      var queryWrapper = {
        query: {
          review: $state.params.reviewId,
          content: vm.Model.comment.content,
          category: 'REVIEW-COMMENT'
        }
      };
      return Comments.createComment(null, queryWrapper).$promise.then(function (commentsWrapper) {
        console.log("commentsWrapper :::\n", commentsWrapper);
        vm.Model.loading = false;
        RootScope.goBack('forward');
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('CommentCreateModel', CommentCreateModel);

  CommentCreateModel.$inject = [];

  function CommentCreateModel() {

    var Model = {
      handle: 'comment-create',
      loading: false,
      user: {}, //로그인한 유저 본인, 세션
      review: {},
      reviewOwner: {},
      comment: {
        content: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').controller('CompanyCreateController', CompanyCreateController);

    CompanyCreateController.$inject = ['_MockData', '$scope', '$state', 'CompanyCreateModel', 'RootScope']; //Controller함수에 factory로 생성된 model을 주입(factory 이름).
    //동일한 app 모듈에 선언한 factory이기 때문에 주입받을 수 있다.

    function CompanyCreateController(_MockData, $scope, $state, CompanyCreateModel, RootScope) {
        var initPromise;
        var noLoadingStates = [];
        var vm = this;
        vm.Model = CompanyCreateModel;
        vm.companyCreate = companyCreate;

        $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
        $scope.$on('$ionicView.afterEnter', onAfterEnter);

        //====================================================
        //  View Event
        //====================================================

        function onBeforeEnter() {
            console.log("$state.params.keywords :::\n", $state.params.keywords);
            console.log("$state.params.keywordString :::\n", $state.params.keywordString);
            // initPromise = init();
        }

        function onAfterEnter() {}
        // initPromise
        //   .then((array) => {
        //     let premiumPlacesWrapper = array[0];
        //     let specialPlacesWrapper = array[1];
        //     let normalPlacesWrapper = array[2];
        //     // CompanyCreateModel.premium.places = premiumPlacesWrapper.places;
        //     // CompanyCreateModel.special.places = specialPlacesWrapper.places;
        //     // Util.bindData(normalPlacesWrapper, CompanyCreateModel.normal, 'places');
        //   })


        //====================================================
        //  VM
        //====================================================

        //====================================================
        //  Private
        //====================================================

        function init() {}

        //====================================================
        //  Modals
        //====================================================

        //====================================================
        //  REST
        //====================================================

        // 문의하기 버튼 클릭
        function companyCreate() {
            // implementation
            //1. Validation Check 진행
            console.log("vm.Model.placeName :::\n", vm.Model.placeName);
            console.log("vm.Model.phoneNumber :::\n", vm.Model.phoneNumber);
            console.log("vm.Model.location :::\n", vm.Model.location);
            console.log("vm.Model.title :::\n", vm.Model.title);
            console.log("vm.Model.content :::\n", vm.Model.content);
            //body에 붙여서 서버로 query를 보냄
            return RootScope.goToState('Main.Footer.SettingList', {}, 'forward');
        }
    }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('CompanyCreateModel', CompanyCreateModel);
  //app모듈에 객체를 return하는 팩토리생성, 이름과 콜백function을 파라메터로 전달함

  CompanyCreateModel.$inject = [];

  function CompanyCreateModel() {
    var Model = {
      placeName: '',
      phoneNumber: '',
      location: '',
      title: '',
      content: ''
    };
    return Model;
  }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').controller('ContactCreateController', ContactCreateController);

    ContactCreateController.$inject = ['_MockData', '$scope', '$state', 'ContactCreateModel', 'RootScope']; //Controller함수에 factory로 생성된 model을 주입(factory 이름).
    //동일한 app 모듈에 선언한 factory이기 때문에 주입받을 수 있다.

    function ContactCreateController(_MockData, $scope, $state, ContactCreateModel, RootScope) {
        var initPromise;
        var noLoadingStates = [];
        var vm = this;
        vm.Model = ContactCreateModel;
        vm.contactCreate = contactCreate;

        $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
        $scope.$on('$ionicView.afterEnter', onAfterEnter);

        //====================================================
        //  View Event
        //====================================================

        function onBeforeEnter() {
            console.log("$state.params.keywords :::\n", $state.params.keywords);
            console.log("$state.params.keywordString :::\n", $state.params.keywordString);
            // initPromise = init();
        }

        function onAfterEnter() {}
        // initPromise
        //   .then((array) => {
        //     let premiumPlacesWrapper = array[0];
        //     let specialPlacesWrapper = array[1];
        //     let normalPlacesWrapper = array[2];
        //     // ContactCreateModel.premium.places = premiumPlacesWrapper.places;
        //     // ContactCreateModel.special.places = specialPlacesWrapper.places;
        //     // Util.bindData(normalPlacesWrapper, ContactCreateModel.normal, 'places');
        //   })


        //====================================================
        //  VM
        //====================================================

        //====================================================
        //  Private
        //====================================================

        function init() {}

        //====================================================
        //  Modals
        //====================================================

        //====================================================
        //  REST
        //====================================================

        // 문의하기 버튼 클릭
        function contactCreate() {
            // implementation
            //1. Validation Check 진행
            console.log("vm.Model.email :::\n", vm.Model.email);
            console.log("vm.Model.phoneNumber :::\n", vm.Model.phoneNumber);
            console.log("vm.Model.title :::\n", vm.Model.title);
            console.log("vm.Model.content :::\n", vm.Model.content);
            //body에 붙여서 서버로 query를 보냄
            return RootScope.goToState('Main.Footer.SettingList', {}, 'forward');
        }
    }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ContactCreateModel', ContactCreateModel);
  //app모듈에 객체를 return하는 팩토리생성, 이름과 콜백function을 파라메터로 전달함

  ContactCreateModel.$inject = [];

  function ContactCreateModel() {
    var Model = {
      email: '',
      phoneNumber: '',
      title: '',
      content: ''
    };
    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('CustomerListController', CustomerListController);

  CustomerListController.$inject = ['_MockData', 'CustomerListModel'];

  function CustomerListController(_MockData, CustomerListModel) {
    var CustomerList = this;
    CustomerList.Model = CustomerListModel;

    //====================================================
    //  Implementation
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('CustomerListModel', CustomerListModel);

  CustomerListModel.$inject = [];

  function CustomerListModel() {

    var Model = {
      handle: 'customer-list',
      loading: false

    };

    return Model;
  }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').controller('EventTabController', EventTabController);

    EventTabController.$inject = ['_MockData', '$scope', '$q', 'EventTabModel', 'Util', 'Events', 'RootScope'];

    function EventTabController(_MockData, $scope, $q, EventTabModel, Util, Events, RootScope) {
        var initPromise;
        var noLoadingStates = [];
        var vm = this;
        vm.Model = EventTabModel;
        vm.tabChange = tabChange;

        $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
        $scope.$on('$ionicView.afterEnter', onAfterEnter);
        $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

        //====================================================
        //  View Event
        //====================================================

        function onBeforeEnter() {
            if (!Util.hasPreviousStates(noLoadingStates)) {
                Util.loading(EventTabModel);
                initPromise = init();
            } else {
                Util.freeze(false);
            }
        }

        function onAfterEnter() {}

        function onBeforeLeave() {}

        //====================================================
        //  VM
        //====================================================

        function tabChange($event) {
            console.log("$event.currentTarget :::\n", $event.currentTarget);
            if ($event.currentTarget.textContent === '주당이벤트') {
                $event.currrentTarget.classList.add('positive positive-bb3px');
            }
            RootScope.goToState('Main.Footer.EventTab.JoodangEventList', {}, 'back');
            RootScope.goToState('Main.Footer.EventTab.BarEventList', {}, 'forward');
        }

        //====================================================
        //  Private
        //====================================================

        function init() {}

        function reset() {}

        //====================================================
        //  Modals
        //====================================================

        //====================================================
        //  REST
        //====================================================
    }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('EventTabModel', EventTabModel);

  EventTabModel.$inject = [];

  function EventTabModel() {

    var Model = {
      handle: 'event-tab',
      loading: false,
      currentTab: '주당이벤트'
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('FaqListController', FaqListController);

  FaqListController.$inject = ['_MockData', '$scope', '$q', '$state', 'FaqListModel', 'Util', 'Posts'];

  function FaqListController(_MockData, $scope, $q, $state, FaqListModel, Util, Posts) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = FaqListModel;
    vm.toggle = toggle;
    vm.toggleArray = [];

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      // console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      initPromise.then(function (postsWrapper) {
        return Util.bindData(postsWrapper, vm.Model, 'posts');
      }).then(function () {
        console.log("vm.Model :::\n", vm.Model);
      });
      /*  bindData(data, model, name, emitPostTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.posts = PostsWrapper
          ==> Model.posts = PostsWrapper.posts  */
      // console.log("_MockData :::\n", _MockData);
      // vm.Model.notices.push(_MockData.post4);  //공지
      // Util.bindData(_MockData, vm.Model, 'posts');
      // console.log("vm.Model :::\n", vm.Model);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function toggle(post) {
      var index = vm.toggleArray.indexOf(post.id);
      if (index === -1) {
        vm.toggleArray.push(post.id);
      } else {
        vm.toggleArray.splice(index, 1);
      }
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      return postFind({ category: 'FAQ' });
      then(function (postsWrapper) {
        return postsWrapper;
      });
    }

    function reset() {
      var Model = {
        loading: false,
        notices: []
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        console.log("postsWrapper :::\n", postsWrapper);
        // Resource object안에 array가 존재
        // {events: [{id:101, name:'aaa'}, {id: 102, name:'bbb'} ...]}
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('FaqListModel', FaqListModel);

  FaqListModel.$inject = [];

  function FaqListModel() {

    var Model = {
      handle: 'faq-list',
      loading: false,
      posts: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('FavoriteListController', FavoriteListController);

  FavoriteListController.$inject = ['_MockData', '$scope', '$q', '$window', 'FavoriteListModel', 'Util', 'Places', 'Distance', 'CurrentPosition', 'AppStorage', 'Favorites'];

  function FavoriteListController(_MockData, $scope, $q, $window, FavoriteListModel, Util, Places, Distance, CurrentPosition, AppStorage, Favorites) {
    var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = FavoriteListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    vm.getAverageRating = getAverageRating;

    vm.setCurrentPosition = setCurrentPosition;
    vm.loadMore = loadMore;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //3개의 array Promise가 들어있는 array Promise 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (placesWrapper) {
          //initPromise 를 실행하고 나온 결과값인가?
          Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
          return Util.bindData(placesWrapper, vm.Model, 'places');
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        }).catch(function (err) {
          Util.error(err);
        });
        /*  bindData(data, model, name, emitEventTrue, loadingModel)
            "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
            model[name] = data;
            model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
            ==> Model.places = PlaceWrapper
            ==> Model.places = PlaceWrapper.places  */
        // console.log("_MockData :::\n", _MockData);
        // Util.bindData(_MockData, vm.Model, 'places');
      } else {
          Util.freeze(false);
        }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    // set stars on view.
    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    function setCurrentPosition() {
      if (!AppStorage.currentPosition) {
        AppStorage.currentPosition = {};
      }
      Util.loading(vm.Model);
      return CurrentPosition.set(AppStorage.currentPosition, 'noLoadingIcon').then(function (currentPosition) {
        console.log("currentPosition :::\n", currentPosition);
        initPromise = init();
        onAfterEnter();
      });
    }

    function loadMore(category) {
      vm.Model[category].buttonLoading = true;
      return placeFindNative({
        category: category
      }, {
        skip: vm.Model[category].places.length,
        limit: 1
      }).then(function (placesWrapper) {
        console.log("placesWrapper --loadMore-- :::\n", placesWrapper);
        Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
        return Util.appendData(placesWrapper, vm.Model[category], 'places');
      }).then(function () {
        vm.Model[category].buttonLoading = false;
      }).then(function () {}).catch(function (err) {
        vm.Model[category].buttonLoading = false;
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      return favoriteFind({ owner: AppStorage.user.id }).then(function (aaa) {
        return aaa;
      });
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function favoriteFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Favorites.find(queryWrapper).$promise.then(function (favoritesWrapper) {
        var placeIds = _.map(favoritesWrapper.favorites, 'place');
        console.log("favoritesWrapper :::\n", favoritesWrapper);
        return placeFind({ id: placeIds });
      });
    }

    function placeFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            geoJSON: {
              $near: {
                $geometry: {
                  type: "Point",
                  coordinates: [AppStorage.currentPosition.longitude, AppStorage.currentPosition.latitude] //longitude, latitude
                },
                $maxDistance: 999999
              }
            }
          },
          // tags: {$in: tags },
          // filter = new RegExp([filter].join(""), "i");
          // $or: [{'name': filter }, {'description': filter }, {'createdBy': filter }],
          // id: {$gt: someId }, id: {$lt: someId }
          // skip: 30,
          limit: 99999,
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.findNative(queryWrapper).$promise.then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return placesWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('FavoriteListModel', FavoriteListModel);

  FavoriteListModel.$inject = [];

  function FavoriteListModel() {

    var Model = {
      handle: 'favorite-list',
      loading: false,
      longitude: 126,
      latitude: 37,
      places: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('GoogleMapController', GoogleMapController);

  GoogleMapController.$inject = ['$rootScope', '$scope', '$state', 'GoogleMapModel'];

  function GoogleMapController($rootScope, $scope, $state, GoogleMapModel) {
    var vm = this;
    vm.Model = GoogleMapModel;

    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    // set by google-map directive
    vm.setCenterByAdress = null;
    vm.setCenterByCurrentPosition = null;

    //====================================================
    //  View Events
    //====================================================
    function onAfterEnter() {
      if ($state.params.placeId) {
        vm.Model.place = $state.params.place;
        console.log("vm.Model.place :::\n", vm.Model.place);
        $scope.$broadcast('relayout');
        $rootScope.$broadcast('$rootScope:bindDataComplete');
      }
    }
  } //END
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('GoogleMapModel', GoogleMapModel);

  GoogleMapModel.$inject = [];

  function GoogleMapModel() {

    var Model = {
      handle: 'google-map',
      loading: false,
      place: {}
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('HomeController', HomeController);

  HomeController.$inject = ['$scope', 'Util', 'HomeModel', 'Banners'];

  function HomeController($scope, Util, HomeModel, Banners) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = HomeModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    //  View Event
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        reset();
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (bannersWrapper) {
          // bannersWrapper = {banners: [Banner, Banner, ..., Banner]}
          console.log("bannersWrapper :::\n", bannersWrapper);
          return Util.bindData(bannersWrapper, HomeModel, 'banners');
        }).then(function () {
          console.log("HomeModel.banners :::\n", HomeModel.banners);
        }).catch(function (err) {
          Util.error(err);
        });
      }
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================
    function init() {
      //서버에 query
      return bannerFindFive();
    }

    function reset() {
      console.log("'test' :::\n", 'test');
      var defaultObj = {
        handle: 'home',
        loading: false,
        banners: []
      };
      angular.copy(defaultObj, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function bannerFindFive(extraQuery, extraOperation) {
      //where: 조건, populate: join, skip/limit/sort
      var queryWrapper = {
        query: {
          where: {},
          populate: ['photo']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Banners.findFive(queryWrapper).$promise.then(function (bannersWrapper) {
        return bannersWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('HomeModel', HomeModel);

  HomeModel.$inject = [];

  function HomeModel() {

    var Model = {
      handle: 'home',
      loading: false,
      banners: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('JoodangEventDetailController', JoodangEventDetailController);

  JoodangEventDetailController.$inject = ['_MockData', '$scope', '$q', '$state', 'JoodangEventDetailModel', 'Util', 'Events'];

  function JoodangEventDetailController(_MockData, $scope, $q, $state, JoodangEventDetailModel, Util, Events) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = JoodangEventDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(JoodangEventDetailModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      initPromise.then(function (event) {
        //initPromise 를 실행하고 나온 결과값인가?
        Util.bindData(event, JoodangEventDetailModel, 'event'); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        console.log("vm.Model :::\n", vm.Model);
      });
      /*  bindData(data, model, name, emitEventTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.events = EventWrapper
          ==> Model.events = EventWrapper.events  */
      // console.log("_MockData :::\n", _MockData);
      // Util.bindData(_MockData, JoodangEventDetailModel, 'events');
      // console.log("JoodangEventDetailModel :::\n", JoodangEventDetailModel);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      return eventFind({ id: $state.params.eventId });
    }

    function reset() {}
    // vm.Model.review.rating = 0;
    // vm.Model.review.content = '';
    // vm.Model.review.photos = [];


    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          sort: {},
          limit: 30,
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.findOne(queryWrapper).$promise.then(function (event) {
        console.log("event :::\n", event);
        return event; //{id: 12321, name: 'eventName'}
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('JoodangEventDetailModel', JoodangEventDetailModel);

  JoodangEventDetailModel.$inject = [];

  function JoodangEventDetailModel() {

    var Model = {
      handle: 'joodang-event-detail',
      loading: false,
      events: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('JoodangEventListController', JoodangEventListController);

  JoodangEventListController.$inject = ['_MockData', '$scope', '$q', 'JoodangEventListModel', 'Util', 'Events', 'RootScope'];

  function JoodangEventListController(_MockData, $scope, $q, JoodangEventListModel, Util, Events, RootScope) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = JoodangEventListModel;
    vm.goToState = goToState;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(JoodangEventListModel);
        initPromise = init();
        //2개의 array Promise가 들어있는 Promise array 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      initPromise.then(function (array) {
        //initPromise 를 실행하고 나온 결과값인가?
        var joodangEventsWrapper = array[0];
        var barEventsWrapper = array[1];
        JoodangEventListModel.events = joodangEventsWrapper.events; //바인딩 되는것은 이거나 아래나 똑같지만,
        Util.bindData(joodangEventsWrapper, JoodangEventListModel, 'events'); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        console.log("JoodangEventListModel :::\n", JoodangEventListModel);
      });
      /*  bindData(data, model, name, emitEventTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.events = EventWrapper
          ==> Model.events = EventWrapper.events  */
      // console.log("_MockData :::\n", _MockData);
      // Util.bindData(_MockData, JoodangEventListModel, 'events');
      // console.log("JoodangEventListModel :::\n", JoodangEventListModel);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function goToState(category, params, direction) {
      if (category === 'JOODANG-EVENT') {
        RootScope.goToState('Main.JoodangEventDetail', params, direction);
      } else if (category === 'BAR-EVENT') {
        RootScope.goToState('Main.BarEventDetail', params, direction);
      }
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var joodangEventsPromise = eventFind({ category: 'JOODANG-EVENT' });
      var barEventsPromise = eventFind({ category: 'BAR-EVENT' });
      return $q.all([joodangEventsPromise, barEventsPromise]).then(function (array) {
        //위의 3개의 array promise를 보내서
        return array; //하나의 array promise가 return됨. (무슨 작업을 하는지는 의문)
      });
    }

    function reset() {}
    // vm.Model.review.rating = 0;
    // vm.Model.review.content = '';
    // vm.Model.review.photos = [];


    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function eventFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          sort: {},
          limit: 30,
          populate: [{
            property: 'photos',
            criteria: {
              sort: 'index ASC'
            }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Events.find(queryWrapper).$promise.then(function (eventsWrapper) {
        console.log("eventsWrapper :::\n", eventsWrapper);
        return eventsWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('JoodangEventListModel', JoodangEventListModel);

  JoodangEventListModel.$inject = [];

  function JoodangEventListModel() {

    var Model = {
      handle: 'joodang-event-list',
      loading: false,
      events: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('KeywordListController', KeywordListController);

  KeywordListController.$inject = ['$scope', '$rootScope', 'KeywordListModel', 'KeywordSearchListModel', 'RootScope', 'Util'];

  function KeywordListController($scope, $rootScope, KeywordListModel, KeywordSearchListModel, RootScope, Util) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = KeywordListModel;
    vm.toggleClass = toggleClass;
    vm.isSelected = isSelected;
    vm.search = search;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {}

    function onAfterEnter() {}

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function toggleClass(multipleKeyword) {
      // class= {title, photUrl, photoHoverUrl };
      var index = vm.Model.selectedMultipleKeywords.indexOf(multipleKeyword.title);
      // if class.title exists in selectedMultipleKeywords
      if (index !== -1) {
        // remove class.title from selectedMultipleKeywords
        vm.Model.selectedMultipleKeywords.splice(index, 1);
      } else {
        // else add to selectedMultipleKeywords
        vm.Model.selectedMultipleKeywords.push(multipleKeyword.title);
      }
      console.log("vm.Model.selectedMultipleKeywords :::\n", vm.Model.selectedMultipleKeywords);
    }

    function isSelected(multipleKeyword) {
      var index = vm.Model.selectedMultipleKeywords.indexOf(multipleKeyword.title);
      if (index !== -1) {
        return true;
      } else {
        return false;
      }
    }

    function search() {
      beforeSearch();
      $rootScope.goToState('Main.KeywordSearchList', {
        keywords: vm.Model.selectedMultipleKeywords,
        keywordString: vm.Model.keywordString
      }, 'forward');
      reset();
    }

    //====================================================
    //  Private
    //====================================================

    function init() {}

    function copyObject(copyObj, pasteObj) {
      for (var key in copyObj) {
        pasteObj[key] = copyObj[key];
      }
    }

    function reset() {
      var Model = {
        loading: false,
        selectedUniqueKeyword: '',
        selectedMultipleKeywords: [],
        keywordString: '',
        uniqueKeywords: [{
          title: '포차/호프',
          photoUrl: 'img/keyword_icon01.png',
          photoHoverUrl: 'img/keyword_hover_icon01.png'
        }, {
          title: 'Pub',
          photoUrl: 'img/keyword_icon02.png',
          photoHoverUrl: 'img/keyword_hover_icon02.png'
        }, {
          title: 'Bar/라운지',
          photoUrl: 'img/keyword_icon03.png',
          photoHoverUrl: 'img/keyword_hover_icon03.png'
        }, {
          title: '이자카야',
          photoUrl: 'img/keyword_icon04.png',
          photoHoverUrl: 'img/keyword_hover_icon04.png'
        }, {
          title: 'Beer',
          photoUrl: 'img/keyword_icon05.png',
          photoHoverUrl: 'img/keyword_hover_icon05.png'
        }, {
          title: '와인',
          photoUrl: 'img/keyword_icon06.png',
          photoHoverUrl: 'img/keyword_hover_icon06.png'
        }, {
          title: '전통주점',
          photoUrl: 'img/keyword_icon07.png',
          photoHoverUrl: 'img/keyword_hover_icon07.png'
        }, {
          title: '퓨전주점',
          photoUrl: 'img/keyword_icon08.png',
          photoHoverUrl: 'img/keyword_hover_icon08.png'
        }],

        multipleKeywords: [{
          title: '음식',
          photoUrl: 'img/keyword_icon09.png',
          photoHoverUrl: 'img/keyword_hover_icon09.png'
        }, {
          title: '24시',
          photoUrl: 'img/keyword_icon10.png',
          photoHoverUrl: 'img/keyword_hover_icon10.png'
        }, {
          title: '조용한',
          photoUrl: 'img/keyword_icon11.png',
          photoHoverUrl: 'img/keyword_hover_icon11.png'
        }, {
          title: '편한의자',
          photoUrl: 'img/keyword_icon12.png',
          photoHoverUrl: 'img/keyword_hover_icon12.png'
        }, {
          title: '내부화장실',
          photoUrl: 'img/keyword_icon13.png',
          photoHoverUrl: 'img/keyword_hover_icon13.png'
        }, {
          title: '좌식',
          photoUrl: 'img/keyword_icon14.png',
          photoHoverUrl: 'img/keyword_hover_icon14.png'
        }, {
          title: '흡연가능',
          photoUrl: 'img/keyword_icon15.png',
          photoHoverUrl: 'img/keyword_hover_icon15.png'
        }, {
          title: '싸다',
          photoUrl: 'img/keyword_icon16.png',
          photoHoverUrl: 'img/keyword_hover_icon16.png'
        }]
      };
      angular.copy(Model, vm.Model);
      console.log("vm.Model 222222222222222222222222222222 :::\n", vm.Model);
    }

    function beforeSearch() {
      vm.Model.selectedMultipleKeywords.push(vm.Model.selectedUniqueKeyword);
      vm.Model.keywordString = vm.Model.selectedMultipleKeywords.join(',');
      console.log("vm.Model.keywordString :::\n", vm.Model.keywordString);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('KeywordListModel', KeywordListModel);

  KeywordListModel.$inject = [];

  function KeywordListModel() {

    var Model = {
      handle: 'keyword-list',
      loading: false,
      selectedUniqueKeyword: '',
      selectedMultipleKeywords: [],
      keywordString: '',
      uniqueKeywords: [{
        title: '포차/호프',
        photoUrl: 'img/keyword_icon01.png',
        photoHoverUrl: 'img/keyword_hover_icon01.png'
      }, {
        title: 'Pub',
        photoUrl: 'img/keyword_icon02.png',
        photoHoverUrl: 'img/keyword_hover_icon02.png'
      }, {
        title: 'Bar/라운지',
        photoUrl: 'img/keyword_icon03.png',
        photoHoverUrl: 'img/keyword_hover_icon03.png'
      }, {
        title: '이자카야',
        photoUrl: 'img/keyword_icon04.png',
        photoHoverUrl: 'img/keyword_hover_icon04.png'
      }, {
        title: 'Beer',
        photoUrl: 'img/keyword_icon05.png',
        photoHoverUrl: 'img/keyword_hover_icon05.png'
      }, {
        title: '와인',
        photoUrl: 'img/keyword_icon06.png',
        photoHoverUrl: 'img/keyword_hover_icon06.png'
      }, {
        title: '전통주점',
        photoUrl: 'img/keyword_icon07.png',
        photoHoverUrl: 'img/keyword_hover_icon07.png'
      }, {
        title: '퓨전주점',
        photoUrl: 'img/keyword_icon08.png',
        photoHoverUrl: 'img/keyword_hover_icon08.png'
      }],

      multipleKeywords: [{
        title: '음식',
        photoUrl: 'img/keyword_icon09.png',
        photoHoverUrl: 'img/keyword_hover_icon09.png'
      }, {
        title: '24시',
        photoUrl: 'img/keyword_icon10.png',
        photoHoverUrl: 'img/keyword_hover_icon10.png'
      }, {
        title: '조용한',
        photoUrl: 'img/keyword_icon11.png',
        photoHoverUrl: 'img/keyword_hover_icon11.png'
      }, {
        title: '편한의자',
        photoUrl: 'img/keyword_icon12.png',
        photoHoverUrl: 'img/keyword_hover_icon12.png'
      }, {
        title: '내부화장실',
        photoUrl: 'img/keyword_icon13.png',
        photoHoverUrl: 'img/keyword_hover_icon13.png'
      }, {
        title: '좌식',
        photoUrl: 'img/keyword_icon14.png',
        photoHoverUrl: 'img/keyword_hover_icon14.png'
      }, {
        title: '흡연가능',
        photoUrl: 'img/keyword_icon15.png',
        photoHoverUrl: 'img/keyword_hover_icon15.png'
      }, {
        title: '싸다',
        photoUrl: 'img/keyword_icon16.png',
        photoHoverUrl: 'img/keyword_hover_icon16.png'
      }]
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('KeywordSearchListController', KeywordSearchListController);

  KeywordSearchListController.$inject = ['_MockData', '$scope', '$state', '$q', 'KeywordSearchListModel', 'Util', 'Places', 'Distance', 'CurrentPosition', 'AppStorage'];

  function KeywordSearchListController(_MockData, $scope, $state, $q, KeywordSearchListModel, Util, Places, Distance, CurrentPosition, AppStorage) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = KeywordSearchListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.getAverageRating = getAverageRating;
    vm.setCurrentPosition = setCurrentPosition;
    vm.loadMore = loadMore;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //3개의 array Promise가 들어있는 array Promise 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          //initPromise 를 실행하고 나온 결과값인가?
          var premiumPlacesWrapper = array[0];
          var specialPlacesWrapper = array[1];
          var normalPlacesWrapper = array[2];

          Distance.createDistanceProperty(premiumPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(specialPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(normalPlacesWrapper.places, AppStorage.currentPosition);

          vm.Model.PREMIUM.places = premiumPlacesWrapper.places;
          vm.Model.SPECIAL.places = specialPlacesWrapper.places; //바인딩 되는것은 이거나 아래나 똑같지만,
          return Util.bindData(normalPlacesWrapper, vm.Model.NORMAL, 'places', false, vm.Model); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        }).catch(function (err) {
          Util.error(err);
        });
        /*  bindData(data, model, name, emitEventTrue, loadingModel)
            "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
            model[name] = data;
            model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
            ==> Model.places = PlaceWrapper
            ==> Model.places = PlaceWrapper.places  */
        // console.log("_MockData :::\n", _MockData);
        // Util.bindData(_MockData, vm.Model, 'places');
      } else {
          Util.freeze(false);
        }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================
    function setCurrentPosition() {
      if (!AppStorage.currentPosition) {
        AppStorage.currentPosition = {};
      }
      Util.loading(vm.Model);
      return CurrentPosition.set(AppStorage.currentPosition, 'noLoadingIcon').then(function (currentPosition) {
        console.log("currentPosition :::\n", currentPosition);
        initPromise = init();
        onAfterEnter();
      });
    }

    function loadMore(category) {
      vm.Model[category].buttonLoading = true;
      return placeFindNative({
        category: category

      }, {
        skip: vm.Model[category].places.length,
        limit: 1
      }).then(function (placesWrapper) {
        console.log("placesWrapper --loadMore-- :::\n", placesWrapper);
        Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
        return Util.appendData(placesWrapper, vm.Model[category], 'places');
      }).then(function () {
        vm.Model[category].buttonLoading = false;
      }).then(function () {}).catch(function (err) {
        vm.Model[category].buttonLoading = false;
        Util.error(err);
      });
    }

    // set stars on view.
    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }
    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var premiumPromise = placeFindNative({ category: 'PREMIUM' });
      var specialPromise = placeFindNative({ category: 'SPECIAL' });
      var normalPromise = placeFindNative({ category: 'NORMAL' });
      return $q.all([premiumPromise, specialPromise, normalPromise]).then(function (array) {
        //위의 3개의 array promise를 보내서
        return array; //하나의 array promise가 return됨. (무슨 작업을 하는지는 의문)
      });
    }

    function reset() {
      var Model = {
        loading: false,
        longitude: 126,
        latitude: 37,
        PREMIUM: {
          places: [],
          buttonLoading: false
        },
        SPECIAL: {
          places: [],
          buttonLoading: false
        },
        NORMAL: {
          places: [],
          buttonLoading: false
        }
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function placeFindNative(extraQuery, extraOperation) {

      var queryWrapper = {
        query: {
          where: {
            geoJSON: {
              $near: {
                $geometry: {
                  type: "Point",
                  coordinates: [AppStorage.currentPosition.longitude, AppStorage.currentPosition.latitude] //longitude, latitude
                },
                $maxDistance: 999999
              }
            },
            keywords: { $in: $state.params.keywords } //string이 담긴 Array를 전달
            // tags: {$in: tags },
            // filter = new RegExp([filter].join(""), "i");
            // $or: [{'name': filter }, {'description': filter }, {'createdBy': filter }],
            // id: {$gt: someId }, id: {$lt: someId }
          },
          // skip: 30,
          limit: 3,
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.findNative(queryWrapper).$promise.then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return placesWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('KeywordSearchListModel', KeywordSearchListModel);

  KeywordSearchListModel.$inject = [];

  function KeywordSearchListModel() {

    var Model = {
      handle: 'keyword-search-list',
      loading: false,
      longitude: 126,
      latitude: 37,
      PREMIUM: {
        places: [],
        buttonLoading: false
      },
      SPECIAL: {
        places: [],
        buttonLoading: false
      },
      NORMAL: {
        places: [],
        buttonLoading: false
      }

    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('LoginController', LoginController);

  LoginController.$inject = ['_MockData', 'LoginModel', 'Message', 'Users', 'AppStorage', 'Oauth', 'Util', 'KAKAO_KEY', 'FACEBOOK_KEY'];

  function LoginController(_MockData, LoginModel, Message, Users, AppStorage, Oauth, Util, KAKAO_KEY, FACEBOOK_KEY) {
    var vm = this;
    vm.Model = LoginModel;

    vm.loginWithKakao = loginWithKakao;
    vm.loginWithFacebook = loginWithFacebook;
    //====================================================
    //  View Event
    //====================================================

    //====================================================
    //  VM
    //====================================================

    function loginWithKakao() {
      return Oauth.kakao(KAKAO_KEY).then(function (userWrapper) {
        console.log("userWrapper :::\n", userWrapper);
        Util.goToState('Main.Footer.Home', {}, 'forward');
      }).catch(function (err) {
        console.log("err :::\n", err);
        Util.error(err);
      });
    }

    function loginWithFacebook() {
      return Oauth.facebook(FACEBOOK_KEY, ["email", "public_profile"]).then(function (userWrapper) {
        console.log("userWrapper :::\n", userWrapper);
        Util.goToState('Main.Footer.Home', {}, 'forward');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
  }
})();

// function localLogin() {
//   Message.loading();
//   return Users.login({}, LoginModel.form).$promise //promise에서는 반드시 return
//     .then((userWrapper) => {
//       Message.hide();
//       console.log("userWrapper :::\n", userWrapper);
//       AppStorage.user = userWrapper.user; //로그인정보
//       AppStorage.token = userWrapper.token; //해당 기기에 대한 권한
//       AppStorage.isFirstTime = false; //첫 튜토리얼 마쳤다는 의미
//       Util.goToState('Main.SettingList', {}, 'forward');
//     })
//     .catch((err) => {
//       console.log("err :::\n", err);
//       if (err.status === 403) {
//         return Message.alert('로그인 알림', '비밀번호/이메일이 틀렸습니다. 다시 입력해주세요.');
//       } else {
//         return Message.alert();
//       }
//     });
// }
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('LoginModel', LoginModel);

  LoginModel.$inject = [];

  function LoginModel() {

    var Model = {
      handle: 'login',
      loading: false

    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('MenuListController', MenuListController);

  MenuListController.$inject = ['_MockData', '$scope', '$state', 'MenuListModel', 'Util', 'Products'];

  function MenuListController(_MockData, $scope, $state, MenuListModel, Util, Products) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = MenuListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(MenuListModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
      console.log("$state.params :::\n", $state.params);
    }

    function onAfterEnter() {
      initPromise.then(function (productsWrapper) {
        //{id: 1300, name: 'asda' ... }
        Util.bindData(productsWrapper, MenuListModel, 'products'); //Model['place'] = place
      }).catch(function (err) {
        console.log("err :::\n", err);
      });
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      //$state.params.productId 를 통해 Place를 findOne()
      return productFind({ place: $state.params.placeId }).then(function (productsWrapper) {
        return productsWrapper;
      });
    }

    function reset() {}
    // vm.Model.review.rating = 0;
    // vm.Model.review.content = '';
    // vm.Model.review.photos = [];


    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function productFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };

      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Products.find(queryWrapper).$promise.then(function (productsWrapper) {
        //{id: 1300, name: 'asda' ... }
        console.log("productsWrapper :::\n", productsWrapper);
        return productsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('MenuListModel', MenuListModel);

  MenuListModel.$inject = [];

  function MenuListModel() {

    var Model = {
      handle: 'menu-list',
      loading: false,
      products: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('MessageCreateController', MessageCreateController);

  MessageCreateController.$inject = ['$scope', '$state', '$window', '$location', '$ionicScrollDelegate', '$q', 'MessageCreateModel', 'Util', 'AppStorage', 'Message', 'Messages', 'Places'];

  function MessageCreateController($scope, $state, $window, $location, $ionicScrollDelegate, $q, MessageCreateModel, Util, AppStorage, Message, Messages, Places) {
    var _ = $window._;
    var moment = $window.moment;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = MessageCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.getAverageRating = getAverageRating;
    vm.create = create;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          var messagesWrapper = array[0];
          var placesWrapper = array[1];
          // placesString
          vm.Model.places = placesWrapper.places;
          var placeNames = _.map(vm.Model.places, 'name');
          vm.Model.placesString = placeNames.join(', ');
          // dayBreak adn bind messages
          _.reduce(messagesWrapper.messages, dayBreaker, null);
          return Util.bindData(messagesWrapper, vm.Model, 'messages');
        }).then(function () {
          var hasNewMessage = false;
          for (var i = 0; i < vm.Model.messages.length; i++) {
            var message = vm.Model.messages[i];
            if (message.sender.id !== AppStorage.user.id && message.isNew) {
              hasNewMessage = true;
              break;
            }
          }
          if (hasNewMessage) {
            Util.scrollToId('firstNew');
          } else {
            Util.scrollBottom(true);
          }
        }).catch(function (err) {
          Util.error(err);
        });
      } else {
        Util.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    function create() {
      Message.loading();
      return messageCreate().then(function (messagesWrapper) {
        _.reduce(messagesWrapper.messages, dayBreaker, null);
        return Util.bindData(messagesWrapper, vm.Model, 'messages');
      }).then(function () {
        var hasNewMessage = false;
        for (var i = 0; i < vm.Model.messages.length; i++) {
          var message = vm.Model.messages[i];
          if (message.sender.id !== AppStorage.user.id && message.isNew) {
            hasNewMessage = true;
            break;
          }
        }
        if (hasNewMessage) {
          Util.scrollToId('firstNew');
        } else {
          Util.scrollBottom(true);
        }
        vm.Model.message.content = '';
        Message.hide();
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      var P_messageFind = messageFind().then(function (messagesWrapper) {
        return messagesWrapper;
      });
      var P_placeFind = placeFind().then(function (placesWrapper) {
        return placesWrapper;
      });
      return $q.all([P_messageFind, P_placeFind]);
    }

    function reset() {
      var defaultObj = {
        loading: false,
        // [{dayBreaker: true}, {dayBreaker: false}]
        messages: [],
        message: {
          sender: '',
          receiver: '',
          content: ''
        },
        places: [],
        placesString: ''
      };
      angular.copy(defaultObj, vm.Model);
    }

    function dayBreaker(message1, message2) {
      if (!message1) {
        return message2;
      }
      var moment1 = moment(message1.createdAt);
      var moment2 = moment(message2.createdAt);
      var year1 = moment1.year();
      var month1 = moment1.month();
      var date1 = moment1.day();
      var year2 = moment2.year();
      var month2 = moment2.month();
      var date2 = moment2.day();
      if (year1 !== year2) {
        message2.dayBreaker = true;
      } else if (month1 !== month2) {
        message2.dayBreaker = true;
      } else if (date1 !== date2) {
        message2.dayBreaker = true;
      } else {
        message2.dayBreaker = false;
      }
      //====================================================
      //  TEST
      //====================================================
      // var second1 = moment1.second();
      // var second2 = moment2.second();
      // if (second1 !== second2) {
      //   message2.dayBreaker = true;
      // } else {
      //   message2.dayBreaker = false;
      // }

      return message2;
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function messageFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            or: [{
              sender: $state.params.ownerId,
              receiver: AppStorage.user.id
            }, {
              receiver: $state.params.ownerId,
              sender: AppStorage.user.id
            }]
          },
          sort: 'id ASC'
        }
      };

      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Messages.find(queryWrapper).$promise.then(function (messagesWrapper) {
        return messagesWrapper;
      });
    }

    function placeFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.find(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }

    function messageCreate(extraQuery) {
      vm.Model.message.sender = AppStorage.user.id;
      vm.Model.message.receiver = $state.params.ownerId;
      var queryWrapper = {
        query: vm.Model.message
      };

      angular.extend(queryWrapper.query, extraQuery);
      return Messages.create(queryWrapper).$promise.then(function (messagesWrapper) {
        return messagesWrapper; // all messages
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('MessageCreateModel', MessageCreateModel);

  MessageCreateModel.$inject = [];

  //AppStorage.user.roles[0] === 'OWNER', 'USER', 'ADMIN'
  function MessageCreateModel() {

    var Model = {
      handle: 'message-create',
      loading: false,
      // [{dayBreaker: true}, {dayBreaker: false}]
      messages: [],
      message: {
        sender: '',
        receiver: '',
        content: ''
      },
      places: [],
      placesString: ''

    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('MyMessageListController', MyMessageListController);

  MyMessageListController.$inject = ['$scope', '$state', 'MyMessageListModel', 'Util', 'Messages', 'AppStorage'];

  function MyMessageListController($scope, $state, MyMessageListModel, Util, Messages, AppStorage) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = MyMessageListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (messagesWrapper) {
          console.log("messagesWrapper :::\n", messagesWrapper);
          return Util.bindData(messagesWrapper, vm.Model, 'messages');
        }).then(function () {
          console.log("vm.Model -- MyMessageList --:::\n", vm.Model);
        }).catch(function (err) {
          Util.error(err);
        });
      } else {
        Util.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================
    function init() {
      return messageFindUnique().then(function (messagesWrapper) {
        return messagesWrapper;
      });
    }

    function reset() {
      var defaultObj = {
        loading: false,
        messages: []
      };
      angular.copy(defaultObj, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function messageFindUnique(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            receiver: AppStorage.user.id
          },
          sort: 'id DESC'
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Messages.findUnique(queryWrapper).$promise.then(function (placeList) {
        return placeList;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('MyMessageListModel', MyMessageListModel);

  MyMessageListModel.$inject = [];

  function MyMessageListModel() {

    var Model = {
      handle: 'my-message-list',
      loading: false,

      messages: [{
        sender: {
          model: 'User',
          index: true
        },
        receiver: {
          model: 'User',
          index: true
        },
        content: {
          type: 'STRING'
        },
        isNew: {
          type: 'BOOLEAN',
          defaultsTo: true
        },
        owner: {
          model: 'User'
        },
        createdBy: {
          model: 'User'
        },
        updatedBy: {
          model: 'User'
        }
      }, {
        sender: {
          model: 'User',
          index: true
        },
        receiver: {
          model: 'User',
          index: true
        },
        content: {
          type: 'STRING'
        },
        isNew: {
          type: 'BOOLEAN',
          defaultsTo: true
        },
        owner: {
          model: 'User'
        },
        createdBy: {
          model: 'User'
        },
        updatedBy: {
          model: 'User'
        }
      }]
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('MyTalkListController', MyTalkListController);

  MyTalkListController.$inject = ['_MockData', '$scope', '$q', '$state', 'MyTalkListModel', 'Util', 'Posts', 'RootScope', 'Message', 'AppStorage'];

  function MyTalkListController(_MockData, $scope, $q, $state, MyTalkListModel, Util, Posts, RootScope, Message, AppStorage) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = MyTalkListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      // console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //2개의 array Promise가 들어있는 Promise array 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      initPromise.then(function (array) {
        // let noticePostsWrapper = array[0]; //공지
        // console.log("noticePostsWrapper :::\n", noticePostsWrapper);
        // vm.Model.notices = noticePostsWrapper.posts;
        console.log("array[1] :::\n", array[1]);
        var normalPostsWrapper = array[1]; //일반 주당톡
        return Util.bindData(normalPostsWrapper, vm.Model, 'posts');
      }).then(function () {
        console.log("vm.Model :::\n", vm.Model);
      });
      /*  bindData(data, model, name, emitPostTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.posts = PostWrapper
          ==> Model.posts = PostWrapper.posts  */
      // console.log("_MockData :::\n", _MockData);
      // vm.Model.notices.push(_MockData.post4);  //공지
      // Util.bindData(_MockData, vm.Model, 'posts');
      // console.log("vm.Model :::\n", vm.Model);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      // vm.Model.notices.pop(); //id의 track by 오류가 발생함.
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var noticePostPromise = postFind({ showInTalk: false }, { limit: 5 });
      var normalPostPromise = postFind({ showInTalk: true, createdBy: AppStorage.user.id });
      return $q.all([noticePostPromise, normalPostPromise]).then(function (array) {
        return array;
      });
    }

    function reset() {
      var Model = {
        loading: false,
        posts: []
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          // sort: {},
          populate: ['photos', 'owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        console.log("postsWrapper :::\n", postsWrapper);
        // Resource object안에 array가 존재
        // {events: [{id:101, name:'aaa'}, {id: 102, name:'bbb'} ...]}
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('MyTalkListModel', MyTalkListModel);

  MyTalkListModel.$inject = [];

  function MyTalkListModel() {

    var Model = {
      handle: 'my-talk-list',
      loading: false,
      // categoryToggle: false,
      // selectedCategory: '전체',
      // notices: [],
      posts: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('NoticeDetailController', NoticeDetailController);

  NoticeDetailController.$inject = ['_MockData', '$scope', '$q', '$state', 'NoticeDetailModel', 'Util', 'Posts'];

  function NoticeDetailController(_MockData, $scope, $q, $state, NoticeDetailModel, Util, Posts) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = NoticeDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      initPromise.then(function (post) {
        return Util.bindData(post, vm.Model, 'post');
      }).then(function () {
        console.log("vm.Model :::\n", vm.Model);
      });
      /*  bindData(data, model, name, emitPostTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.posts = PostsWrapper
          ==> Model.posts = PostsWrapper.posts  */
      // console.log("_MockData :::\n", _MockData);
      // vm.Model.notices.push(_MockData.post4);  //공지
      // Util.bindData(_MockData, vm.Model, 'posts');
      // console.log("vm.Model :::\n", vm.Model);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      return postFindOne({ id: $state.params.postId });
      then(function (post) {
        return post;
      });
    }

    function reset() {
      var Model = {
        loading: false,
        post: {}
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        console.log("post :::\n", post);
        // Resource object안에 array가 존재
        // {events: [{id:101, name:'aaa'}, {id: 102, name:'bbb'} ...]}
        return post;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('NoticeDetailModel', NoticeDetailModel);

  NoticeDetailModel.$inject = [];

  function NoticeDetailModel() {

    var Model = {
      handle: 'notice-detail',
      loading: false,
      post: {}
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('NoticeListController', NoticeListController);

  NoticeListController.$inject = ['_MockData', '$scope', '$q', '$state', 'NoticeListModel', 'Util', 'Posts'];

  function NoticeListController(_MockData, $scope, $q, $state, NoticeListModel, Util, Posts) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = NoticeListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      // console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      initPromise.then(function (postsWrapper) {
        return Util.bindData(postsWrapper, vm.Model, 'posts');
      }).then(function () {
        console.log("vm.Model :::\n", vm.Model);
      });
      /*  bindData(data, model, name, emitPostTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.posts = PostsWrapper
          ==> Model.posts = PostsWrapper.posts  */
      // console.log("_MockData :::\n", _MockData);
      // vm.Model.notices.push(_MockData.post4);  //공지
      // Util.bindData(_MockData, vm.Model, 'posts');
      // console.log("vm.Model :::\n", vm.Model);
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      return postFind({ category: 'NOTICE' });
      then(function (postsWrapper) {
        return postsWrapper;
      });
    }

    function reset() {}

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        console.log("postsWrapper :::\n", postsWrapper);
        // Resource object안에 array가 존재
        // {events: [{id:101, name:'aaa'}, {id: 102, name:'bbb'} ...]}
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('NoticeListModel', NoticeListModel);

  NoticeListModel.$inject = [];

  function NoticeListModel() {

    var Model = {
      handle: 'notice-list',
      loading: false,
      posts: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PlaceDetailController', PlaceDetailController);

  PlaceDetailController.$inject = ['_MockData', '$scope', '$state', '$ionicModal', 'PlaceDetailModel', 'Util', 'Places', 'Reviews', 'Comments', 'Favorites', 'Message', 'AppStorage'];

  function PlaceDetailController(_MockData, $scope, $state, $ionicModal, PlaceDetailModel, Util, Places, Reviews, Comments, Favorites, Message, AppStorage) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = PlaceDetailModel;
    vm.getAverageRating = getAverageRating;
    vm.moreReview = moreReview;
    vm.reviewDelete = reviewDelete;
    vm.commentDelete = commentDelete;
    vm.favoriteCreate = favoriteCreate;
    vm.favoriteDestory = favoriteDestory;
    vm.expandPhoto = expandPhoto;
    vm.isModal = false; //true면 현재 모달창이 열려있는 상태
    vm.Model.selectedPhoto = null;
    vm.isNotFavorite = true;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    $ionicModal.fromTemplateUrl('state/PlaceDetail/Modal/ExpandPhotoModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function (modal) {
      vm.ExpandPhotoModal = modal;
    });

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
      console.log("$state.params :::\n", $state.params);
    }

    function onAfterEnter() {
      initPromise.then(function (place) {
        //{id: 1300, name: 'asda' ... }
        Util.bindData(place, vm.Model, 'place'); //Model['place'] = place
      }).then(function () {
        return restAPI({ place: $state.params.placeId }, {
          populate: ['photos', 'comments', 'owner'],
          limit: 5
        }, Reviews, 'find');
      }).then(function (reviewsWrapper) {
        Util.bindData(reviewsWrapper, vm.Model, 'reviews');
      }).then(function () {
        console.log("vm.Model :::\n", vm.Model);
      }).catch(function (err) {
        return console.log("err :::\n", err);
      });

      console.log("AppStorage :::\n", AppStorage);
      vm.isNotFavorite = AppStorage.user.favorites.indexOf($state.params.placeId) === -1;
      //있으면 false
      //없으면 true
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    //리뷰 더보기 버튼 클릭
    function moreReview() {}

    //====================================================
    //  Private
    //====================================================

    function init() {
      // let placePromise = find({id: $state.params.placeId}, null, Places, 'findOne');
      //$state.params.placeId 를 통해 Place를 findOne()
      return restAPI({ id: $state.params.placeId }, null, Places, 'findOne').then(function (obj) {
        return obj;
      });
    }

    function reset() {
      // vm.Model.review.rating = 0;
      // vm.Model.review.content = '';
      // vm.Model.review.photos = [];
    }

    function loadingByIdToggle(id) {
      var index = vm.Model.loadingById.indexOf(id);
      if (index === -1) {
        vm.Model.loadingById.push(id);
        console.log('로딩중...' + id);
      } else {
        console.log('로딩완료...' + id);
        vm.Model.loadingById.splice(index, 1);
      }
    }

    function expandPhoto(photo) {
      vm.Model.selectedPhoto = photo;
      if (vm.isModal) {
        //모달이 열려있으면
        vm.isModal = false;
        vm.ExpandPhotoModal.hide();
      } else {
        //모달이 닫혀있으면
        vm.isModal = true;
        vm.ExpandPhotoModal.show();
      }
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    //view Review,
    function restAPI(extraQuery, extraOperation, Obj, method) {
      var queryWrapper = {
        query: {
          where: {}
        }
      };

      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Obj[method](queryWrapper).$promise.then(function (obj) {
        //{id: 1300, name: 'asda' ... }
        console.log('쿼리 성공! ==> ', obj);
        return obj;
      });
    }

    // 유저 리뷰삭제 버튼 클릭
    function reviewDelete(id) {
      loadingByIdToggle(id);
      var queryWrapper = {
        query: {
          where: { id: id }
        }
      };
      return Reviews.destroyReview(queryWrapper).$promise.then(function (reviewsWrapper) {
        // console.log("reviewsWrapper :::\n", reviewsWrapper);
        // Util.bindData(reviewsWrapper, vm.Model, 'reviews');
        loadingByIdToggle(id);
        $state.reload();
      });
    }

    // 사장님 댓글삭제 버튼 클릭
    function commentDelete(id) {
      loadingByIdToggle(id);
      var queryWrapper = {
        query: {
          where: { id: id }
        }
      };
      return Comments.destroyComment(queryWrapper.query.where).$promise.then(function (commentsWrapper) {
        // console.log("commentsWrapper :::\n", commentsWrapper);
        // Util.bindData(commentsWrapper, vm.Model, 'comments');
        loadingByIdToggle(id);
        return $state.reload();
      });
    }

    function favoriteCreate() {
      if (!AppStorage.user) {
        Message.alert('즐겨찾기', '로그인을 해주세요.');
        return;
      }
      loadingByIdToggle('FAVORITE');
      console.log('즐겨찾기 추가');
      var queryWrapper = {
        query: {
          place: $state.params.placeId
        }
      };
      return Favorites.createPlace(queryWrapper).$promise.then(function (favoritesWrapper) {
        console.log("favoritesWrapper :::\n", favoritesWrapper);
        AppStorage.user.favorites = favoritesWrapper.favorites; //["fsea3", "edsa32"]
        console.log("AppStorage.user.favorites :::\n", AppStorage.user.favorites);
        vm.isNotFavorite = AppStorage.user.favorites.indexOf($state.params.placeId) === -1;
        //있으면(즐겨찾기중이면) false
        //없으면(즐겨찾기 제거하면) true
        loadingByIdToggle('FAVORITE');
        return favoritesWrapper;
      });
    }

    function favoriteDestory() {
      loadingByIdToggle('FAVORITE');
      console.log('즐겨찾기 제거');
      return Favorites.destroy({ place: $state.params.placeId }).$promise.then(function (favoritesWrapper) {
        console.log("favoritesWrapper :::\n", favoritesWrapper);
        AppStorage.user.favorites = favoritesWrapper.favorites;
        vm.isNotFavorite = AppStorage.user.favorites.indexOf($state.params.placeId) === -1;
        //있으면(즐겨찾기중이면) false
        //없으면(즐겨찾기 제거하면) true
        loadingByIdToggle('FAVORITE');
        return favoritesWrapper;
      });
    }
  }
})();

// {//   "isFirstTime": false,
//   "user": {
//     "roles": [{
//       "name": "USER",
//       "active": true,
//       "createdAt": "2016-03-14T06:28:57.628Z",
//       "updatedAt": "2016-03-14T06:28:57.628Z",
//       "id": "56e65a29d392c84d9ab199b6"
//     }],
//     "owner": "56e8ba6d1f8c772be64f8461",
//     "username": "940191342763462",
//     "firstname": null,
//     "lastname": null,
//     "nickname": "David Seunghoon Ko",
//     "profile_image": "http://graph.facebook.com/940191342763462/picture",
//     "createdAt": "2016-03-16T01:44:13.394Z",
//     "updatedAt": "2016-03-16T04:17:56.245Z",
//     "id": "56e8ba6d1f8c772be64f8461",
//     "gravatarUrl": "https://gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e",
//     "favorites": { "favorites": ["56e7b8f44d057aa06ecce5aa", "56e67012d392c84d9ab19a7c"] }
//   },
//   "token": "CAAGpjZAKzNvcBAExU9XPhff4Yz0EFRrVm5FoHPg6mMSxbkTZBi3taVWirmbHXPIznQ4OwBlqXMBCHRyyycQHaeZBIQWDZBfRQUob2gQt0XP07nVJWqRGGF9ZBpIZAntZChKYIFE4Eeitu6SWCoX9ybLfARjeIWTF7vS4Y29xrX36U77nMKQoJXATzYR6WNRZCFcZD",
//   "currentPosition": { "longitude": 127.04128370000001, "latitude": 37.5001021 },
//   "currentAddress": "서울특별시 강남구 역삼2동"
// }

// {
//   "isFirstTime": false,
//   "user": {
//     "roles": [
//       {
//         "name": "USER",
//         "active": true,
//         "createdAt": "2016-03-14T06:28:57.628Z",
//         "updatedAt": "2016-03-14T06:28:57.628Z",
//         "id": "56e65a29d392c84d9ab199b6"
//       }],
//     "owner": "56e8b6ae1f8c772be64f845e",
//     "username": "101185286",
//     "nickname": "고승훈",
//     "thumbnail_image": "http://mud-kage.kakao.co.kr/14/dn/btqcNGvK7U3/sgk4IX7U7Awp5w24iIEYVk/o.jpg",
//     "profile_image": "http://mud-kage.kakao.co.kr/14/dn/btqcNCfOQwt/zGemOQCiCmrWjC9ssWmed1/o.jpg",
//     "createdAt": "2016-03-16T01:28:14.569Z",
//     "updatedAt": "2016-03-16T03:58:15.916Z",
//     "id": "56e8b6ae1f8c772be64f845e",
//     "gravatarUrl": "https://gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e",
//     "favorites": { "favorites": ["56e7b8f44d057aa06ecce5aa", "56e66641d392c84d9ab19a71", "56e66ea6d392c84d9ab19a75", "56e67012d392c84d9ab19a7c"] }
//   },
//   "token": "P--6FcsLBdTBFf60_pACIECJkUyxRLqYmqwMLqwQQI0AAAFTfZLyIg",
//   "currentPosition": { "longitude": 127.04127619999998, "latitude": 37.5001058 },
//   "currentAddress": "서울특별시 강남구 역삼2동",
//   "gm0": { "lastCenter": { "lat": 37.497942, "lng": 127.027621 } }
// }

/*
{
  "isFirstTime": false,
  "user": {
    "roles": [{
      "name": "USER",
      "active": true,
      "createdAt": "2016-03-14T06:28:57.628Z",
      "updatedAt": "2016-03-14T06:28:57.628Z",
      "id": "56e65a29d392c84d9ab199b6"
  }],
    "owner": "56e8b6ae1f8c772be64f845e",
    "username": "101185286",
    "nickname": "고승훈",
    "thumbnail_image": "http://mud-kage.kakao.co.kr/14/dn/btqcNGvK7U3/sgk4IX7U7Awp5w24iIEYVk/o.jpg",
    "profile_image": "http://mud-kage.kakao.co.kr/14/dn/btqcNCfOQwt/zGemOQCiCmrWjC9ssWmed1/o.jpg",
    "createdAt": "2016-03-16T01:28:14.569Z",
    "updatedAt": "2016-03-16T03:58:15.916Z",
    "id": "56e8b6ae1f8c772be64f845e",
    "gravatarUrl": "https://gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e"
  },
  "token": "P--6FcsLBdTBFf60_pACIECJkUyxRLqYmqwMLqwQQI0AAAFTfZLyIg",
  "currentPosition": {
    "longitude": 127.04127619999998,
    "latitude": 37.5001058
  },
  "currentAddress": "서울특별시 강남구 역삼2동"
}
*/
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PlaceDetailModel', PlaceDetailModel);

  PlaceDetailModel.$inject = [];

  function PlaceDetailModel() {

    var Model = {
      handle: 'place-detail',
      loading: false,
      isNotFavorite: true,

      loadingById: [],
      commentDestroyLoading: false,
      place: {},
      reviews: [],
      comments: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('PlaceListController', PlaceListController);

  PlaceListController.$inject = ['_MockData', '$scope', '$q', '$window', 'PlaceListModel', 'Util', 'Places', 'Distance', 'CurrentPosition', 'AppStorage'];

  function PlaceListController(_MockData, $scope, $q, $window, PlaceListModel, Util, Places, Distance, CurrentPosition, AppStorage) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = ['Main.PlaceDetail'];
    var vm = this;
    vm.Model = PlaceListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    vm.getAverageRating = getAverageRating;

    vm.setCurrentPosition = setCurrentPosition;
    vm.loadMore = loadMore;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //3개의 array Promise가 들어있는 array Promise 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          //initPromise 를 실행하고 나온 결과값인가?

          var premiumPlacesWrapper = array[0];
          var specialPlacesWrapper = array[1];
          var normalPlacesWrapper = array[2];

          Distance.createDistanceProperty(premiumPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(specialPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(normalPlacesWrapper.places, AppStorage.currentPosition);

          vm.Model.PREMIUM.places = premiumPlacesWrapper.places;
          vm.Model.SPECIAL.places = specialPlacesWrapper.places; //바인딩 되는것은 이거나 아래나 똑같지만,
          return Util.bindData(normalPlacesWrapper, vm.Model.NORMAL, 'places', false, vm.Model); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        }).catch(function (err) {
          Util.error(err);
        });
        /*  bindData(data, model, name, emitEventTrue, loadingModel)
            "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
            model[name] = data;
            model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
            ==> Model.places = PlaceWrapper
            ==> Model.places = PlaceWrapper.places  */
        // console.log("_MockData :::\n", _MockData);
        // Util.bindData(_MockData, vm.Model, 'places');
      } else {
          Util.freeze(false);
        }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    // set stars on view.
    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    function setCurrentPosition() {
      if (!AppStorage.currentPosition) {
        AppStorage.currentPosition = {};
      }
      Util.loading(vm.Model);
      return CurrentPosition.set(AppStorage.currentPosition, 'noLoadingIcon').then(function (currentPosition) {
        console.log("currentPosition :::\n", currentPosition);
        initPromise = init();
        onAfterEnter();
      });
    }

    function loadMore(category) {
      vm.Model[category].buttonLoading = true;
      return placeFindNative({
        category: category
      }, {
        skip: vm.Model[category].places.length,
        limit: 1
      }).then(function (placesWrapper) {
        console.log("placesWrapper --loadMore-- :::\n", placesWrapper);
        Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
        return Util.appendData(placesWrapper, vm.Model[category], 'places');
      }).then(function () {
        vm.Model[category].buttonLoading = false;
      }).then(function () {}).catch(function (err) {
        vm.Model[category].buttonLoading = false;
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var premiumPromise = placeFindNative({ category: 'PREMIUM' });
      var specialPromise = placeFindNative({ category: 'SPECIAL' });
      var normalPromise = placeFindNative({ category: 'NORMAL' });
      return $q.all([premiumPromise, specialPromise, normalPromise]).then(function (array) {
        //위의 3개의 array promise를 보내서
        return array; //하나의 array promise가 return됨. (무슨 작업을 하는지는 의문)
      });
    }

    function reset() {}
    // vm.Model.review.rating = 0;
    // vm.Model.review.content = '';
    // vm.Model.review.photos = [];


    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function placeFindNative(extraQuery, extraOperation) {

      var queryWrapper = {
        query: {
          where: {
            geoJSON: {
              $near: {
                $geometry: {
                  type: "Point",
                  coordinates: [AppStorage.currentPosition.longitude, AppStorage.currentPosition.latitude] //longitude, latitude
                },
                $maxDistance: 999999
              }
            }
          },
          // tags: {$in: tags },
          // filter = new RegExp([filter].join(""), "i");
          // $or: [{'name': filter }, {'description': filter }, {'createdBy': filter }],
          // id: {$gt: someId }, id: {$lt: someId }
          // skip: 30,
          limit: 3,
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.findNative(queryWrapper).$promise.then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return placesWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PlaceListModel', PlaceListModel);

  PlaceListModel.$inject = [];

  function PlaceListModel() {

    var Model = {
      handle: 'place-list',
      loading: false,
      longitude: 126,
      latitude: 37,
      PREMIUM: {
        places: [],
        buttonLoading: false
      },
      SPECIAL: {
        places: [],
        buttonLoading: false
      },
      NORMAL: {
        places: [],
        buttonLoading: false
      }

    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ProfileController', ProfileController);

  ProfileController.$inject = ['_MockData', '$scope', '$state', '$ionicModal', 'ProfileModel', 'Users'];

  function ProfileController(_MockData, $scope, $state, $ionicModal, ProfileModel, Users) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ProfileModel;
    vm.logout = logout;
    vm.NicknameUpdate = NicknameUpdate;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    $ionicModal.fromTemplateUrl("state/Profile/Modal/NicknameUpdateModal.html", { //이 위치의 html내용을 모달로 사용
      scope: $scope, //옵션1
      animation: 'mh-slide' //옵션2
    }).then(function (modal) {
      //콜백
      vm.NicknameUpdateModal = modal;
    });

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params.keywords :::\n", $state.params.keywords);
      console.log("$state.params.keywordString :::\n", $state.params.keywordString);
      // initPromise = init();
    }

    function onAfterEnter() {}
    // initPromise
    //   .then((array) => {
    //     let premiumPlacesWrapper = array[0];
    //     let specialPlacesWrapper = array[1];
    //     let normalPlacesWrapper = array[2];
    //     // ProfileModel.premium.places = premiumPlacesWrapper.places;
    //     // ProfileModel.special.places = specialPlacesWrapper.places;
    //     // Util.bindData(normalPlacesWrapper, ProfileModel.normal, 'places');
    //   })


    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {
      var premiumPromise = placeFind({ category: 'PREMIUM' });
      var specialPromise = placeFind({ category: 'SPECIAL' });
      var normalPromise = placeFind({ category: 'NORMAL' });
      return $q.all([premiumPromise, specialPromise, normalPromise]).then(function (array) {
        return array;
      });
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function placeFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          keywords: $state.params.keywords,
          sort: {},
          limit: 30
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.find(queryWrapper).$promise.then(function (placeList) {
        return placeList;
      });
    }

    function logout() {
      // Users.logout();
      //session kill
    }

    function NicknameUpdate() {
      // User.update()
      // vm.Model.user.hopeNickname 쿼리에 담아서 update전송
      //  Implementation
      vm.NicknameUpdateModal.hide();
    };
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ProfileModel', ProfileModel);

  ProfileModel.$inject = [];

  function ProfileModel() {

    var Model = {
      handle: 'profile',
      loading: false,
      hopeNickname: '',

      user: {
        username: {
          type: 'string',
          unique: true,
          index: true
        },
        email: {
          type: 'email',
          unique: true,
          index: true
        },

        // Properties
        nickname: {
          // unique: true,
          type: 'String'
        },

        profilePhoto: {
          model: 'Photo'
        },

        devices: {
          collection: 'Device',
          via: 'user'
        },

        //====================================================
        //  Not used
        //====================================================
        password_reset_code: {
          type: 'string'
        },
        password_reset_time: {
          type: 'integer'
        },
        accesscount: {
          type: 'integer'
        }

      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ProvinceListController', ProvinceListController);

  ProvinceListController.$inject = ['$scope', '$timeout', 'ProvinceListModel', 'Util'];

  function ProvinceListController($scope, $timeout, ProvinceListModel, Util) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ProvinceListModel;
    vm.toggle = toggle;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      // console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        // Util.loading(vm.Model);
        initPromise = init();
        //2개의 array Promise가 들어있는 Promise array 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {}
    }

    function onBeforeLeave() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return reset();
      }
    }

    //====================================================
    //  VM
    //====================================================

    function toggle(key) {
      var index = vm.Model.toggleArray.indexOf(key);
      $timeout(function () {
        if (index != -1) {
          vm.Model.toggleArray.splice(index, 1);
        } else {
          vm.Model.toggleArray.push(key);
        }
      }, 0);
    }

    //====================================================
    //  Private
    //====================================================

    function init() {}

    function reset() {}

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ProvinceListModel', ProvinceListModel);

  ProvinceListModel.$inject = ['Province'];

  function ProvinceListModel(Province) {

    var Model = {
      handle: 'province-list',
      loading: false,
      toggleArray: [],
      province: Province
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ProvinceSearchListController', ProvinceSearchListController);

  ProvinceSearchListController.$inject = ['$scope', '$state', '$q', 'ProvinceSearchListModel', 'Util', 'Places', 'Distance', 'CurrentPosition', 'AppStorage'];

  function ProvinceSearchListController($scope, $state, $q, ProvinceSearchListModel, Util, Places, Distance, CurrentPosition, AppStorage) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ProvinceSearchListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    vm.getAverageRating = getAverageRating;

    vm.setCurrentPosition = setCurrentPosition;
    vm.loadMore = loadMore;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //3개의 array Promise가 들어있는 array Promise 를 initPromise 변수에 대입
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          //initPromise 를 실행하고 나온 결과값인가?

          var premiumPlacesWrapper = array[0];
          var specialPlacesWrapper = array[1];
          var normalPlacesWrapper = array[2];

          Distance.createDistanceProperty(premiumPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(specialPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(normalPlacesWrapper.places, AppStorage.currentPosition);

          vm.Model.PREMIUM.places = premiumPlacesWrapper.places;
          vm.Model.SPECIAL.places = specialPlacesWrapper.places; //바인딩 되는것은 이거나 아래나 똑같지만,
          return Util.bindData(normalPlacesWrapper, vm.Model.NORMAL, 'places', false, vm.Model); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        }).catch(function (err) {
          Util.error(err);
        });
        /*  bindData(data, model, name, emitEventTrue, loadingModel)
            "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
            model[name] = data;
            model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
            ==> Model.places = PlaceWrapper
            ==> Model.places = PlaceWrapper.places  */
        // console.log("_MockData :::\n", _MockData);
        // Util.bindData(_MockData, vm.Model, 'places');
      } else {
          Util.freeze(false);
        }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    // set stars on view.
    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    function setCurrentPosition() {
      if (!AppStorage.currentPosition) {
        AppStorage.currentPosition = {};
      }
      Util.loading(vm.Model);
      return CurrentPosition.set(AppStorage.currentPosition, 'noLoadingIcon').then(function (currentPosition) {
        console.log("currentPosition :::\n", currentPosition);
        initPromise = init();
        onAfterEnter();
      });
    }

    function loadMore(category) {
      vm.Model[category].buttonLoading = true;
      return placeFindNative({
        category: category,
        province: $state.params.province
      }, {
        skip: vm.Model[category].places.length,
        limit: 1
      }).then(function (placesWrapper) {
        console.log("placesWrapper --loadMore-- :::\n", placesWrapper);
        Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
        return Util.appendData(placesWrapper, vm.Model[category], 'places');
      }).then(function () {
        vm.Model[category].buttonLoading = false;
      }).then(function () {}).catch(function (err) {
        vm.Model[category].buttonLoading = false;
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var premiumPromise = placeFindNative({ category: 'PREMIUM', province: $state.params.province });
      var specialPromise = placeFindNative({ category: 'SPECIAL', province: $state.params.province });
      var normalPromise = placeFindNative({ category: 'NORMAL', province: $state.params.province });
      return $q.all([premiumPromise, specialPromise, normalPromise]).then(function (array) {
        //위의 3개의 array promise를 보내서
        return array; //하나의 array promise가 return됨. (무슨 작업을 하는지는 의문)
      });
    }

    function reset() {
      var Model = {
        handle: 'province-search-list',
        loading: false,
        longitude: 126,
        latitude: 37,
        PREMIUM: {
          places: [],
          buttonLoading: false
        },
        SPECIAL: {
          places: [],
          buttonLoading: false
        },
        NORMAL: {
          places: [],
          buttonLoading: false
        }
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function placeFindNative(extraQuery, extraOperation) {

      var queryWrapper = {
        query: {
          where: {
            geoJSON: {
              $near: {
                $geometry: {
                  type: "Point",
                  coordinates: [AppStorage.currentPosition.longitude, AppStorage.currentPosition.latitude] //longitude, latitude
                },
                $maxDistance: 999999
              }
            }
          },
          // tags: {$in: tags },
          // filter = new RegExp([filter].join(""), "i");
          // $or: [{'name': filter }, {'description': filter }, {'createdBy': filter }],
          // id: {$gt: someId }, id: {$lt: someId }
          // skip: 30,
          limit: 3,
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.findNative(queryWrapper).$promise.then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return placesWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ProvinceSearchListModel', ProvinceSearchListModel);

  ProvinceSearchListModel.$inject = [];

  function ProvinceSearchListModel() {

    var Model = {
      handle: 'province-search-list',
      loading: false,
      longitude: 126,
      latitude: 37,
      PREMIUM: {
        places: [],
        buttonLoading: false
      },
      SPECIAL: {
        places: [],
        buttonLoading: false
      },
      NORMAL: {
        places: [],
        buttonLoading: false
      }

    };

    return Model;
  }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').controller('RequestCreateController', RequestCreateController);

    RequestCreateController.$inject = ['_MockData', '$scope', '$state', 'RequestCreateModel', 'RootScope']; //Controller함수에 factory로 생성된 model을 주입(factory 이름).
    //동일한 app 모듈에 선언한 factory이기 때문에 주입받을 수 있다.

    function RequestCreateController(_MockData, $scope, $state, RequestCreateModel, RootScope) {
        var initPromise;
        var noLoadingStates = [];
        var vm = this;
        vm.Model = RequestCreateModel;
        vm.requestCreate = requestCreate;

        $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
        $scope.$on('$ionicView.afterEnter', onAfterEnter);

        //====================================================
        //  View Event
        //====================================================

        function onBeforeEnter() {
            console.log("$state.params.keywords :::\n", $state.params.keywords);
            console.log("$state.params.keywordString :::\n", $state.params.keywordString);
            // initPromise = init();
        }

        function onAfterEnter() {}
        // initPromise
        //   .then((array) => {
        //     let premiumPlacesWrapper = array[0];
        //     let specialPlacesWrapper = array[1];
        //     let normalPlacesWrapper = array[2];
        //     // RequestCreateModel.premium.places = premiumPlacesWrapper.places;
        //     // RequestCreateModel.special.places = specialPlacesWrapper.places;
        //     // Util.bindData(normalPlacesWrapper, RequestCreateModel.normal, 'places');
        //   })


        //====================================================
        //  VM
        //====================================================

        //====================================================
        //  Private
        //====================================================

        function init() {}

        //====================================================
        //  Modals
        //====================================================

        //====================================================
        //  REST
        //====================================================

        // 문의하기 버튼 클릭
        function requestCreate() {
            // implementation
            //1. Validation Check 진행
            console.log("vm.Model.placeName :::\n", vm.Model.placeName);
            console.log("vm.Model.placeNumber :::\n", vm.Model.placeNumber);
            console.log("vm.Model.location :::\n", vm.Model.location);
            console.log("vm.Model.name :::\n", vm.Model.name);
            console.log("vm.Model.phoneNumber :::\n", vm.Model.phoneNumber);
            console.log("vm.Model.title :::\n", vm.Model.title);
            console.log("vm.Model.content :::\n", vm.Model.content);
            //body에 붙여서 서버로 query를 보냄
            return RootScope.goToState('Main.Footer.SettingList', {}, 'forward');
        }
    }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('RequestCreateModel', RequestCreateModel);
  //app모듈에 객체를 return하는 팩토리생성, 이름과 콜백function을 파라메터로 전달함

  RequestCreateModel.$inject = [];

  function RequestCreateModel() {
    var Model = {
      placeName: '',
      placeNumber: '',
      location: '',
      name: '',
      phoneNumber: '',
      title: '',
      content: ''
    };
    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('RequestUpdateController', RequestUpdateController);

  RequestUpdateController.$inject = ['_MockData', '$scope', '$state', 'RequestUpdateModel', 'Util', 'RootScope', 'Users']; //Controller함수에 factory로 생성된 model을 주입(factory 이름).
  //동일한 app 모듈에 선언한 factory이기 때문에 주입받을 수 있다.

  function RequestUpdateController(_MockData, $scope, $state, RequestUpdateModel, Util, RootScope, Users) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = RequestUpdateModel;
    vm.checkBox = checkBox;
    vm.requestUpdate = requestUpdate;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(RequestUpdateModel);
        // initPromise = init();
      } else {
          Util.freeze(false);
        }
      console.log("$state.params.placeId :::\n", $state.params.placeId);
      vm.Model.sendEmail.placeName = $state.params.placeName;
    }

    function onAfterEnter() {
      // initPromise
      //   .then(place => {    //{id: 1300, name: 'asda' ... }
      //     Util.bindData(place, RequestUpdateModel, 'place');  //Model['place'] = place
      //   })
      vm.Model.sendEmail.options.placeId = _MockData.findOne($state.params.placeId);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    //체크박스 클릭
    function checkBox(modelObj, attr, data) {
      if (modelObj[attr]) {
        modelObj[attr] = '';
      } else {
        modelObj[attr] = data;
      }
    }

    //====================================================
    //  Private
    //====================================================

    function init() {}

    function reset() {
      var Model = {
        loading: false,
        sendEmail: {
          type: '', //Not Null
          email: '',
          contact: '',
          title: '',
          content: '',
          placeName: '',
          placeContact: '',
          location: '',
          userName: '',
          userContact: '',
          options: {
            placeId: '',
            infomation: '',
            menuAndPrice: '',
            eventAndDiscount: '',
            stateChange: '',
            other: ''
          }
        }
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function requestUpdate() {
      vm.Model.sendEmail.type = document.getElementsByClassName('zero')[0].textContent;
      vm.Model.sendEmail.placeName = $state.params.placeName;
      vm.Model.sendEmail.options.placeId = $state.params.placeId;
      console.log("vm.Model :::\n", vm.Model);

      var queryWrapper = {
        query: vm.Model.sendEmail
      };
      return Users.sendEmail(null, queryWrapper).$promise.then(function (arrayWrapper) {
        console.log("arrayWrapper :::\n", arrayWrapper);
        return RootScope.goToState('Main.PlaceDetail', { placeId: $state.params.placeId }, 'forward');
      });
      //업체 또는 주당본사에 메일보내는 로직
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('RequestUpdateModel', RequestUpdateModel);
  //app모듈에 객체를 return하는 팩토리생성, 이름과 콜백function을 파라메터로 전달함

  RequestUpdateModel.$inject = [];

  function RequestUpdateModel() {
    var Model = {
      handle: 'request-update',
      loading: false,
      sendEmail: {
        type: '', //Not Null
        email: '',
        contact: '',
        title: '',
        content: '',
        placeName: '',
        placeContact: '',
        location: '',
        userName: '',
        userContact: '',
        options: {
          placeId: '',
          infomation: '',
          menuAndPrice: '',
          eventAndDiscount: '',
          stateChange: '',
          other: ''
        }
      }
    };
    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ReviewCreateController', ReviewCreateController);

  ReviewCreateController.$inject = ['_MockData', '$scope', '$q', '$state', 'ReviewCreateModel', 'Util', 'RootScope', 'Places', 'Reviews', 'Photo', 'Upload', 'Message', 'SERVER_URL'];

  function ReviewCreateController(_MockData, $scope, $q, $state, ReviewCreateModel, Util, RootScope, Places, Reviews, Photo, Upload, Message, SERVER_URL) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ReviewCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    vm.setRating = setRating;
    vm.getPhoto = getPhoto;
    vm.create = create;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        // Util.loading(vm.Model);
        initPromise = init();
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
          Util.freeze(false);
        }).catch(function (err) {
          Util.error(err);
        });
      } else {
        Util.freeze(false);
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================
    function getPhoto() {
      if (vm.Model.images.length >= 5) {
        Message.alert('사진수 초과', '사진은 최대 5개 까지만 업로드 가능합니다.');
        return false;
      }
      return Photo.get('camera', 800, true, 600, 'square').then(function (blob) {
        vm.Model.images.push(blob);
      }).catch(function (err) {
        console.log("err :::\n", err);
      });
    }

    function create() {
      Message.loading();
      return createPhotos().then(function (idsWrapper) {
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = Util.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.review.photos, ids);
        vm.Model.review.photos = photos;
      }).then(function () {
        return reviewCreateReview();
      }).then(function (review) {
        console.log("review :::\n", review);
        return Message.alert("리뷰 등록 알림", "리뷰가 성공적으로 등록되었습니다.");
      }).then(function () {
        Util.goBack();
      }).catch(function (err) {
        Util.error(err);
      });
    }

    function setRating(rating) {
      vm.Model.review.rating = rating;
      console.log("vm.Model.review.rating :::\n", vm.Model.review.rating);
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      var defaultObj = {
        loading: false,
        review: {
          rating: 5,
          content: '',
          place: '',
          photos: []
        },
        images: [],
        tempFiles: [],
        files: [],
        create: [],
        destroy: []
      };
      angular.copy(defaultObj, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function createPhotos() {
      Util.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      return promise.then(function (dataWrapper) {
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function reviewCreateReview(extraQuery) {
      vm.Model.review.place = $state.params.placeId;
      var queryWrapper = {
        query: vm.Model.review
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("queryWrapper --reviewCreateReview-- :::\n", queryWrapper);
      return Reviews.createReview(queryWrapper).$promise.then(function (review) {
        return review;
      });
    }
  } // end
})();

// RootScope.goToState('Main.PlaceDetail', {
//   placeId: vm.Model.review.place.id
// }, 'forward');
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ReviewCreateModel', ReviewCreateModel);

  ReviewCreateModel.$inject = [];

  function ReviewCreateModel() {

    var Model = {
      handle: 'review-create',
      loading: false,
      review: {
        rating: 5,
        content: '',
        place: '',
        photos: []
      },
      images: [],
      tempFiles: [],
      files: [],
      create: [],
      destroy: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('SearchController', SearchController);

  SearchController.$inject = ['$scope', '$q', 'SearchModel', 'Places', 'AppStorage', 'Util', 'Distance'];

  function SearchController($scope, $q, SearchModel, Places, AppStorage, Util, Distance) {
    var initPromise;
    var noLoadingStates = ['Main.PlaceDetail'];
    var vm = this;
    vm.Model = SearchModel;

    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    vm.getAverageRating = getAverageRating;
    vm.search = search;

    //====================================================
    //  View Event
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        // Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          console.log("message :::\n", message);
        }).catch(function (err) {
          Util.error(err);
        });
      }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================
    function search() {
      if (!vm.Model.searchWord) {
        return;
      }
      vm.Model.loading = true;
      Util.loading(vm.Model);
      return placeFindNative({
        searchWord: vm.Model.searchWord
      }, {
        limit: 999
      }).then(function (placesWrapper) {
        Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
        return Util.bindData(placesWrapper, vm.Model, 'places');
      }).then(function () {

        console.log("vm.Model.places :::\n", vm.Model.places);
        Util.freeze(true);
        vm.Model.loading = false;
      }).catch(function (err) {
        Util.error(err);
      });
    }

    // set stars on view.
    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    //====================================================
    //  Private
    //====================================================
    function init() {
      return $q.resolve({ message: 'empty' });
    }

    function reset() {
      // vm.Model.searchWord = '';
      vm.Model.loading = false;
      // let defaultObj = {
      //   searchWord: '',
      //   loading: false,
      //   places: []
      // };
      // angular.copy(defaultObj, vm.Model);
    }
    //====================================================
    //  Modal
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function placeFindNative(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {

          where: {
            geoJSON: {
              $near: {
                $geometry: {
                  type: 'Point',
                  coordinates: [AppStorage.currentPosition.longitude, AppStorage.currentPosition.latitude]
                },
                $maxDistance: 999999
              }
            }
          },

          limit: 30,
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]

        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.findNative(queryWrapper).$promise.then(function (placesWrapper) {
        return placesWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('SearchModel', SearchModel);

  SearchModel.$inject = [];

  function SearchModel() {

    var Model = {
      handle: 'search',
      loading: false,
      searchWord: '',
      places: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('SearchTabController', SearchTabController);

  SearchTabController.$inject = ['_MockData', '$scope', '$state', 'SearchTabModel', 'RootScope'];

  function SearchTabController(_MockData, $scope, $state, SearchTabModel, RootScope) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = SearchTabModel;
    vm.goToState = goToState;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {}
    function onAfterEnter() {}

    function goToState(state, params) {
      if ($state.includes('Main.Footer.SearchTab.ProvinceList')) {
        return RootScope.goToState(state, params, 'forward');
      } else if ($state.includes('Main.Footer.SearchTab.ThemeList')) {
        switch (state) {
          case 'Main.Footer.SearchTab.ProvinceList':
            return RootScope.goToState(state, params, 'back');
          case 'Main.Footer.SearchTab.KeywordList':
            return RootScope.goToState(state, params, 'forward');
        }
      } else if ($state.includes('Main.Footer.SearchTab.KeywordList')) {
        return RootScope.goToState(state, params, 'back');
      }
    }

    //====================================================
    //  VM
    //====================================================

    //====================================================
    //  Private
    //====================================================

    function init() {}

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('SearchTabModel', SearchTabModel);

  SearchTabModel.$inject = [];

  function SearchTabModel() {

    var Model = {
      handle: 'search-tab',
      loading: false,
      currentTab: 'PROVINCE'

    };

    return Model;
  }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').controller('SettingListController', SettingListController);

    SettingListController.$inject = ['_MockData', '$scope', '$state', 'SettingListModel'];

    function SettingListController(_MockData, $scope, $state, SettingListModel) {
        var initPromise;
        var noLoadingStates = [];
        var vm = this;
        vm.Model = SettingListModel;
        vm.settingsToggle = settingsToggle;

        $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
        $scope.$on('$ionicView.afterEnter', onAfterEnter);

        //====================================================
        //  View Event
        //====================================================

        function onBeforeEnter() {}

        function onAfterEnter() {}

        //====================================================
        //  VM
        //====================================================

        function settingsToggle() {
            if (vm.Model.isSettingShow) {
                vm.Model.isSettingShow = false;
            } else {
                vm.Model.isSettingShow = true;
            }
        }

        //====================================================
        //  Private
        //====================================================

        //====================================================
        //  Modals
        //====================================================

        //====================================================
        //  REST
        //====================================================
    }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('SettingListModel', SettingListModel);

  SettingListModel.$inject = [];

  function SettingListModel() {

    var Model = {
      handle: 'setting-list',
      loading: false,
      isSettingShow: true,
      settings: {
        isPush: true
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('TalkCreateController', TalkCreateController);

  TalkCreateController.$inject = ['_MockData', '$scope', '$q', '$state', 'TalkCreateModel', 'Util', 'RootScope', 'Posts', 'Photo', 'Upload', 'Message', 'SERVER_URL'];

  function TalkCreateController(_MockData, $scope, $q, $state, TalkCreateModel, Util, RootScope, Posts, Photo, Upload, Message, SERVER_URL) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = TalkCreateModel;
    vm.isAnnonymousToggle = isAnnonymousToggle;
    vm.categoryToggle = categoryToggle;
    vm.selectCategory = selectCategory;
    // vm.updateTalk = updateTalk;
    vm.getPhoto = getPhoto;
    vm.create = create;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function isAnnonymousToggle() {
      if (vm.Model.post.isAnnonymous) {
        vm.Model.post.isAnnonymous = false; //실명으로
      } else {
          vm.Model.post.isAnnonymous = true; //익명으로
        }
    }

    function categoryToggle() {
      if (vm.Model.categoryToggle) {
        vm.Model.categoryToggle = false;
      } else {
        vm.Model.categoryToggle = true;
      }
    }

    function selectCategory(category) {
      vm.Model.post.category = category;

      //if (사진이 선택되었을 경우)
      //사진의 경로(디바이스의 경로?)를 Model의 Array에 push
    }

    // 카메라 버튼 클릭
    function getPhoto() {
      if (vm.Model.images.length >= 5) {
        Message.alert('사진수 초과', '사진은 최대 5개 까지만 업로드 가능합니다.');
        return false;
      }
      return Photo.get('camera', 800, true, 600, 'square').then(function (blob) {
        console.log("blob :::\n", blob);
        vm.Model.images.push(blob);
      }).catch(function (err) {
        console.log("err :::\n", err);
      });
    }

    // 글쓰기 버튼 클릭
    function create() {
      if (!validationCheck()) {
        return;
      }
      console.log('111 aaaaaaaaaaaaaaaaaaaaaaaaaaaa');
      Message.loading();
      console.log('111 bbbbbbbbbbbbbbbbbbbbbbbbbbbb');
      return createPhotos().then(function (idsWrapper) {
        console.log("idsWrapper :::\n", idsWrapper);
        console.log("111 ggggggggggggggggggg");
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = Util.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.post.photos, ids);
        console.log("111 hhhhhhhhhhhhhhhhhhhhhhhhhhh");
        vm.Model.post.photos = photos;
      }).then(function () {
        return reviewCreateReview();
      }).then(function (post) {
        console.log("post :::\n", post);
        return Message.alert("글 등록 알림", "게시물이 성공적으로 등록되었습니다.");
      }).then(function () {
        Util.goBack();
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {}

    function reset() {
      var Model = {
        loading: false,
        categoryToggle: false,
        images: [],
        files: [],
        create: [],
        tempFiles: [],
        destroy: [],
        post: {
          title: '',
          category: '',
          isAnnonymous: false, //false는 실명, true는 익명
          content: '',
          photos: [],
          showInTalk: true //false이면 공지글, true이면 일반게시글
        }
      };
      angular.copy(Model, vm.Model);
    }

    function validationCheck() {
      if (!vm.Model.post.category) {
        Message.alert('알림', '카테고리를 선택해주세요.');
        return false;
      }
      if (!vm.Model.post.title) {
        Message.alert('알림', '제목을 입력해주세요.');
        return false;
      }
      if (!vm.Model.post.content) {
        Message.alert('알림', '내용을 입력해주세요.');
        return false;
      }
      return true;
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function createPhotos() {
      console.log("111 cccccccccccccccccccccccccccc");
      Util.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      console.log("111 ddddddddddddddddddddddddddd");
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      console.log("111 eeeeeeeeeeeeeeeeeeeeeeee");
      return promise.then(function (dataWrapper) {
        console.log("111 ffffffffffffffff");
        console.log("dataWrapper --createPhotos-- :::\n", dataWrapper);
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function reviewCreateReview(extraQuery) {
      var queryWrapper = {
        query: vm.Model.post
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("111 iiiiiiiiiiiiiiiii");
      console.log("queryWrapper --reviewCreateReview-- :::\n", queryWrapper);
      return Posts.create(null, queryWrapper).$promise.then(function (createdPost) {
        console.log("createdPost :::\n", createdPost);
        return createdPost;
      });
    }

    // 글쓰기 버튼 클릭
    function updateTalk() {
      console.log("vm.Model :::\n", vm.Model);
      var queryWrapper = {
        query: vm.Model.post
      };

      Posts.create(null, queryWrapper).$promise.then(function (createdPost) {
        console.log("createdPost :::\n", createdPost);
        reset();
        return RootScope.goToState('Main.Footer.TalkList', {}, 'forward');
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('TalkCreateModel', TalkCreateModel);

  TalkCreateModel.$inject = [];

  function TalkCreateModel() {

    var Model = {
      handle: 'talk-create',
      loading: false,
      categoryToggle: false,
      images: [],
      files: [],
      create: [],
      tempFiles: [],
      destroy: [],
      post: {
        title: '',
        category: '',
        isAnnonymous: false, //false는 실명, true는 익명
        content: '',
        photos: [],
        showInTalk: true //false이면 공지글, true이면 일반게시글
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('TalkDetailController', TalkDetailController);

  TalkDetailController.$inject = ['_MockData', '$scope', '$q', '$state', '$ionicModal', '$ionicScrollDelegate', 'TalkDetailModel', 'Util', 'RootScope', 'Posts', 'Comments', 'Message', 'AppStorage'];

  function TalkDetailController(_MockData, $scope, $q, $state, $ionicModal, $ionicScrollDelegate, TalkDetailModel, Util, RootScope, Posts, Comments, Message, AppStorage) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = TalkDetailModel;
    vm.isAnnonymousToggle = isAnnonymousToggle;
    vm.toggleMore = toggleMore;
    vm.openModal = openModal;
    vm.closeModal = closeModal;
    vm.goToState = goToState;
    vm.talkDelete = talkDelete;
    vm.commentCreate = commentCreate;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    $ionicModal.fromTemplateUrl('state/TalkDetail/Modal/ConfirmModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function (modal) {
      vm.ConfirmModal = modal;
    });

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //2개의 array Promise가 들어있는 Promise array 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          console.log("array :::\n", array);
          var post = array[0]; //object
          var commentsWrapper = array[1]; //object
          vm.Model.post = post;
          return Util.bindData(commentsWrapper, vm.Model, 'comments');
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        }).catch(function (err) {
          console.log("err :::\n", err);
        });
      } else {
        Util.freeze(false);
      }

      /*  bindData(data, model, name, emitPostTrue, loadingModel)
          "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
          model[name] = data;
          model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
          ==> Model.posts = PostWrapper
          ==> Model.posts = PostWrapper.posts  */
      // vm.Model.post = _MockData.findOne($state.params.postId);
      // console.log("vm.Model :::\n", vm.Model);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function openModal() {
      vm.ConfirmModal.show();
    }

    function closeModal() {
      vm.ConfirmModal.hide();
    }

    function isAnnonymousToggle() {
      if (vm.Model.isAnnonymous) {
        vm.Model.comment.isAnnonymous = false;
      } else {
        vm.Model.comment.isAnnonymous = true;
      }
    }

    function toggleMore() {
      switch (vm.Model.toggleMore) {
        case true:
          vm.Model.toggleMore = false;
          return;
        case false:
          vm.Model.toggleMore = true;
          return;
      }
    }

    function goToState(state, params, direction, messageTitle, messageContent) {
      if (!AppStorage.token) {
        return Message.alert(messageTitle, messageContent);
      }
      RootScope.goToState(state, params, direction);
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      var postPromise = postFindOne({ id: $state.params.postId });
      var commentPromise = commentFind({ post: $state.params.postId });
      return $q.all([postPromise, commentPromise]).then(function (array) {
        return array;
      });
    }

    function reset() {
      var Model = {
        loading: false,
        toggleMore: false,
        post: {},
        comments: [],
        comment: {
          isAnnonymous: false,
          content: ''
        }
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        console.log("post :::\n", post);
        // find()    ==> 반드시 Array를 리턴
        // findOne() ==> 반드시 Object를 리턴
        return post;
      });
    }

    function commentFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          // keywords: $state.params.keywords,
          sort: {},
          limit: 30
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Comments.find(queryWrapper).$promise.then(function (commentsWrapper) {
        return commentsWrapper;
      });
    }

    //댓글 등록버튼 클릭
    function commentCreate() {
      // if (!AppStorage.token) {
      //   return Message.alert('알림', '댓글은 로그인 후에 작성할 수 있습니다.');
      // }
      if (vm.Model.comment.content.length < 2) {
        return Message.alert('알림', '내용을 입력하세요.');
      }
      vm.Model.loading = true;
      var queryWrapper = {
        query: {
          post: $state.params.postId,
          isAnnonymous: vm.Model.comment.isAnnonymous,
          content: vm.Model.comment.content,
          category: 'POST-COMMENT'
        }
      };
      $ionicScrollDelegate.scrollBottom();
      vm.Model.comment.isAnnonymous = false;
      vm.Model.comment.content = '';
      return Comments.createComment({}, queryWrapper).$promise.then(function (commentsWrapper) {
        console.log("commentsWrapper :::\n", commentsWrapper);
        // reset();
        return Util.bindData(commentsWrapper, vm.Model, 'comments');
      }).then(function () {
        vm.Model.loading = false;
      });
    }

    function talkDelete() {
      closeModal();
      return Posts.destroy({ id: $state.params.postId }).$promise.then(function (obj) {
        console.log("obj :::\n", obj);
        RootScope.goToState('Main.Footer.TalkList', {}, 'forward');
      });
      //1. 게시물id 를 서버로 쿼리전송
      //2. 서버에서는 해당 게시물의 댓글을 모두 삭제하는 작업
      //완료되면 goToState
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('TalkDetailModel', TalkDetailModel);

  TalkDetailModel.$inject = [];

  function TalkDetailModel() {

    var Model = {
      handle: 'talk-detail',
      loading: false,
      toggleMore: false,
      post: {},
      comments: [],
      comment: {
        isAnnonymous: false,
        content: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('TalkListController', TalkListController);

  TalkListController.$inject = ['_MockData', '$scope', '$q', '$state', 'TalkListModel', 'Util', 'Posts', 'RootScope', 'Message', 'AppStorage'];

  function TalkListController(_MockData, $scope, $q, $state, TalkListModel, Util, Posts, RootScope, Message, AppStorage) {
    var initPromise;
    var noLoadingStates = ['Main.Footer.MyTalkList', 'Main.Footer.TalkDetail', 'Main.Footer.TalkCreate', 'Main.Footer.TalkUpdate'];
    var vm = this;
    vm.Model = TalkListModel;
    vm.categoryToggle = categoryToggle;
    vm.selectCategory = selectCategory;
    vm.filterCategory = filterCategory;
    vm.goToState = goToState;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      // console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //2개의 array Promise가 들어있는 Promise array 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        initPromise.then(function (array) {
          var noticePostsWrapper = array[0]; //공지
          var normalPostsWrapper = array[1]; //일반 주당톡
          console.log("noticePostsWrapper :::\n", noticePostsWrapper);
          console.log("normalPostsWrapper :::\n", normalPostsWrapper);
          vm.Model.notices = noticePostsWrapper.posts;
          return Util.bindData(normalPostsWrapper, vm.Model, 'posts');
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        });
        /*  bindData(data, model, name, emitPostTrue, loadingModel)
            "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
            model[name] = data;
            model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
            ==> Model.posts = PostWrapper
            ==> Model.posts = PostWrapper.posts  */
        // console.log("_MockData :::\n", _MockData);
        // vm.Model.notices.push(_MockData.post4);  //공지
        // Util.bindData(_MockData, vm.Model, 'posts');
        // console.log("vm.Model :::\n", vm.Model);
        Util.freeze(false);
      }
    }

    function onBeforeLeave() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        // return reset();
      }
    }

    //====================================================
    //  VM
    //====================================================

    function categoryToggle() {
      var status = vm.Model.categoryToggle; //true & false
      if (status) {
        vm.Model.categoryToggle = false;
      } else {
        vm.Model.categoryToggle = true;
      }
    }

    function selectCategory(category) {
      console.log("category :::\n", category);
      vm.Model.selectedCategory = category;
    }

    function filterCategory(selectedCategory) {
      switch (selectedCategory) {
        case '전체':
          return {};
        default:
          return { category: selectedCategory };
      }
    }

    function goToState(state, params, direction, messageTitle, messageContent) {
      // if (!AppStorage.token) {
      //   return Message.alert(messageTitle, messageContent);
      // }
      RootScope.goToState(state, params, direction);
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var noticePostPromise = postFind({ category: 'TALK-NOTICE' }, { limit: 5 });
      var normalPostPromise = postFind({ showInTalk: true });
      return $q.all([noticePostPromise, normalPostPromise]).then(function (array) {
        return array;
      });
    }

    function reset() {
      var Model = {
        handle: 'talk-list',
        loading: false,
        categoryToggle: false,
        selectedCategory: '전체',
        notices: [],
        posts: []
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          // sort: {},
          populate: ['photos', 'owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        console.log("postsWrapper :::\n", postsWrapper);
        // Resource object안에 array가 존재
        // {events: [{id:101, name:'aaa'}, {id: 102, name:'bbb'} ...]}
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('TalkListModel', TalkListModel);

  TalkListModel.$inject = [];

  function TalkListModel() {

    var Model = {
      handle: 'talk-list',
      loading: false,
      categoryToggle: false,
      selectedCategory: '전체',
      notices: [],
      posts: []
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('TalkUpdateController', TalkUpdateController);

  TalkUpdateController.$inject = ['_MockData', '$scope', '$q', '$state', 'TalkUpdateModel', 'Util', 'RootScope', 'Posts', 'Photo', 'Upload', 'Message', 'SERVER_URL'];

  function TalkUpdateController(_MockData, $scope, $q, $state, TalkUpdateModel, Util, RootScope, Posts, Photo, Upload, Message, SERVER_URL) {
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = TalkUpdateModel;
    vm.isAnnonymousToggle = isAnnonymousToggle;
    vm.categoryToggle = categoryToggle;
    vm.selectCategory = selectCategory;
    // vm.updateTalk = updateTalk;
    vm.getPhoto = getPhoto;
    vm.create = create;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      initPromise.then(function (post) {
        return Util.bindData(post, vm.Model, 'post');
      }).then(function () {
        vm.Model.images = vm.Model.post.photos;
        console.log("vm.Model :::\n", vm.Model);
      });
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    function isAnnonymousToggle() {
      if (vm.Model.post.isAnnonymous) {
        vm.Model.post.isAnnonymous = false; //실명으로
      } else {
          vm.Model.post.isAnnonymous = true; //익명으로
        }
    }

    function categoryToggle() {
      if (vm.Model.categoryToggle) {
        vm.Model.categoryToggle = false;
      } else {
        vm.Model.categoryToggle = true;
      }
    }

    function selectCategory(category) {
      vm.Model.post.category = category;

      //if (사진이 선택되었을 경우)
      //사진의 경로(디바이스의 경로?)를 Model의 Array에 push
    }

    // 카메라 버튼 클릭
    function getPhoto() {
      if (vm.Model.images.length >= 5) {
        Message.alert('사진수 초과', '사진은 최대 5개 까지만 업로드 가능합니다.');
        return false;
      }
      return Photo.get('camera', 800, true, 600, 'square').then(function (blob) {
        console.log("blob :::\n", blob);
        vm.Model.images.push(blob);
      }).catch(function (err) {
        console.log("err :::\n", err);
      });
    }

    // 수정하기 버튼 클릭
    function create() {
      console.log('111 aaaaaaaaaaaaaaaaaaaaaaaaaaaa');
      Message.loading();
      console.log('111 bbbbbbbbbbbbbbbbbbbbbbbbbbbb');
      return createPhotos().then(function (idsWrapper) {
        console.log("idsWrapper :::\n", idsWrapper);
        console.log("111 ggggggggggggggggggg");
        if (!idsWrapper) {
          return false;
        }
        var ids = idsWrapper.ids;
        var photos = Util.PhotoClass.createPhotoIds(vm.Model.images, vm.Model.post.photos, ids);
        console.log("111 hhhhhhhhhhhhhhhhhhhhhhhhhhh");
        vm.Model.post.photos = photos;
      }).then(function () {
        return reviewUpdateReview();
      }).then(function (post) {
        console.log("post :::\n", post);
        return Message.alert("글 수정 알림", "게시물이 성공적으로 수정되었습니다.");
      }).then(function () {
        Util.goBack();
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      return postFindOne({ id: $state.params.postId }).then(function (post) {
        return post;
      });
    }

    function reset() {
      var Model = {
        loading: false,
        categoryToggle: false,
        images: [],
        files: [],
        create: [],
        tempFiles: [],
        destroy: [],
        post: {
          title: '',
          category: '',
          isAnnonymous: false, //false는 실명, true는 익명
          content: '',
          photos: [],
          showInTalk: true //false이면 공지글, true이면 일반게시글
        }
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================

    function postFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {},
          sort: {},
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        console.log("post :::\n", post);
        // {id:101, name:'aaa'}
        return post;
      });
    }

    function createPhotos() {
      console.log("111 cccccccccccccccccccccccccccc");
      Util.PhotoClass.processCreate(vm.Model.images, vm.Model.create, vm.Model.files);
      console.log("111 ddddddddddddddddddddddddddd");
      var uploadOptions = {
        url: SERVER_URL + '/photo/createPhotos',
        method: 'POST',
        file: vm.Model.files,
        fields: {
          query: {
            create: vm.Model.create
          }
        },
        headers: {
          enctype: "multipart/form-data"
        }
      };
      var promise = Upload.upload(uploadOptions);
      console.log("111 eeeeeeeeeeeeeeeeeeeeeeee");
      return promise.then(function (dataWrapper) {
        console.log("111 ffffffffffffffff");
        console.log("dataWrapper --createPhotos-- :::\n", dataWrapper);
        var idsWrapper = dataWrapper.data;
        return idsWrapper;
      });
    }

    function reviewUpdateReview(extraQuery) {
      var queryWrapper = {
        query: vm.Model.post
      };
      angular.extend(queryWrapper.query, extraQuery);
      console.log("111 iiiiiiiiiiiiiiiii");
      console.log("queryWrapper --reviewUpdateReview-- :::\n", queryWrapper);
      return Posts.update(null, queryWrapper).$promise.then(function (updatedPost) {
        console.log("updatedPost :::\n", updatedPost);
        return updatedPost;
      });
    }

    // 글쓰기 버튼 클릭
    function updateTalk() {
      console.log("vm.Model :::\n", vm.Model);
      var queryWrapper = {
        query: vm.Model.post
      };

      Posts.create(null, queryWrapper).$promise.then(function (updatedPost) {
        console.log("updatedPost :::\n", updatedPost);
        reset();
        return RootScope.goToState('Main.Footer.TalkList', {}, 'forward');
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('TalkUpdateModel', TalkUpdateModel);

  TalkUpdateModel.$inject = [];

  function TalkUpdateModel() {

    var Model = {
      handle: 'talk-update',
      loading: false,
      categoryToggle: false,
      images: [],
      files: [],
      create: [],
      tempFiles: [],
      destroy: [],
      post: {
        title: '',
        category: '',
        isAnnonymous: false, //false는 실명, true는 익명
        content: '',
        photos: [],
        showInTalk: true //false이면 공지글, true이면 일반게시글
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('TermDetailController', TermDetailController);

  TermDetailController.$inject = ['_MockData', 'TermDetailModel'];

  function TermDetailController(_MockData, TermDetailModel) {
    var TermDetail = this;
    TermDetail.Model = TermDetailModel;

    //====================================================
    //  Implementation
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('TermDetailModel', TermDetailModel);

  TermDetailModel.$inject = [];

  function TermDetailModel() {

    var Model = {
      handle: 'term-detail',
      loading: false

    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('TermListController', TermListController);

  TermListController.$inject = ['_MockData', 'TermListModel'];

  function TermListController(_MockData, TermListModel) {
    var TermList = this;
    TermList.Model = TermListModel;

    //====================================================
    //  Implementation
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('TermListModel', TermListModel);

  TermListModel.$inject = [];

  function TermListModel() {

    var Model = {
      handle: 'term-list',
      loading: false

    };

    return Model;
  }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').controller('ThemeListController', ThemeListController);

    ThemeListController.$inject = ['_MockData', '$scope', '$q', '$state', 'ThemeListModel', 'Util', 'RootScope'];

    function ThemeListController(_MockData, $scope, $q, $state, ThemeListModel, Util, RootScope) {
        var initPromise;
        var noLoadingStates = [];
        var vm = this;
        vm.Model = ThemeListModel;

        $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
        $scope.$on('$ionicView.afterEnter', onAfterEnter);
        $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

        //====================================================
        //  View Event
        //====================================================

        function onBeforeEnter() {
            // console.log("$state.params :::\n", $state.params);
            if (!Util.hasPreviousStates(noLoadingStates)) {
                Util.loading(vm.Model);
                initPromise = init();
            } else {
                Util.freeze(false);
            }
        }

        function onAfterEnter() {
            Util.freeze(false);
        }

        function onBeforeLeave() {
            return reset();
        }

        //====================================================
        //  VM
        //====================================================

        //====================================================
        //  Private
        //====================================================

        function init() {}

        function reset() {}

        //====================================================
        //  Modals
        //====================================================

        //====================================================
        //  REST
        //====================================================
    }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ThemeListModel', ThemeListModel);

  ThemeListModel.$inject = [];

  function ThemeListModel() {

    var Model = {
      handle: 'theme-list',
      loading: false,
      themes: [{
        title: '헌팅',
        url: 'img/theme_01.png'
      }, {
        title: '데이트',
        url: 'img/theme_02.png'
      }, {
        title: '단체',
        url: 'img/theme_03.png'
      }, {
        title: '술마시기좋은',
        url: 'img/theme_04.png'
      }, {
        title: '안주가맛있는',
        url: 'img/theme_05.png'
      }]
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ThemeSearchListController', ThemeSearchListController);

  ThemeSearchListController.$inject = ['_MockData', '$scope', '$state', '$q', 'ThemeSearchListModel', 'Util', 'Places', 'Distance', 'CurrentPosition', 'AppStorage'];

  function ThemeSearchListController(_MockData, $scope, $state, $q, ThemeSearchListModel, Util, Places, Distance, CurrentPosition, AppStorage) {
    // var _ = $window._;
    var initPromise;
    var noLoadingStates = [];
    var vm = this;
    vm.Model = ThemeSearchListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    vm.getAverageRating = getAverageRating;

    vm.setCurrentPosition = setCurrentPosition;
    vm.loadMore = loadMore;

    //====================================================
    //  View Event
    //====================================================

    function onBeforeEnter() {
      console.log("$state.params :::\n", $state.params);
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(vm.Model);
        initPromise = init();
        //3개의 array Promise가 들어있는 array Promise 를 initPromise 변수에 대입
      } else {
          Util.freeze(false);
        }
      switch ($state.params.themeTitle) {
        case '헌팅':
          vm.Model.themeTitle = '감성충만한 여우와 늑대의 만남 [헌팅]';
          break;
        case '데이트':
          vm.Model.themeTitle = '자기야 오붓하게 한잔할까~♥ [데이트]';
          break;
        case '단체':
          vm.Model.themeTitle = '선배님 모임장소 알아놨습니다!!! [단체]';
          break;
        case '술마시기좋은':
          vm.Model.themeTitle = '내 오늘 진정 주당이 되겠노라. [술마시기좋은]';
          break;
        case '안주가맛있는':
          vm.Model.themeTitle = '안주빨들 여기여기 붙어라 [안주가맛있는]';
          break;
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          //initPromise 를 실행하고 나온 결과값인가?

          var premiumPlacesWrapper = array[0];
          var specialPlacesWrapper = array[1];
          var normalPlacesWrapper = array[2];

          Distance.createDistanceProperty(premiumPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(specialPlacesWrapper.places, AppStorage.currentPosition);
          Distance.createDistanceProperty(normalPlacesWrapper.places, AppStorage.currentPosition);

          vm.Model.PREMIUM.places = premiumPlacesWrapper.places;
          vm.Model.SPECIAL.places = specialPlacesWrapper.places; //바인딩 되는것은 이거나 아래나 똑같지만,
          return Util.bindData(normalPlacesWrapper, vm.Model.NORMAL, 'places', false, vm.Model); //content 안에서 refresh 하는듯한 로직이 담겨있다.
        }).then(function () {
          console.log("vm.Model :::\n", vm.Model);
        }).catch(function (err) {
          Util.error(err);
        });
        /*  bindData(data, model, name, emitEventTrue, loadingModel)
            "data를 이 model에 넣는다, name이라는 attribute를 만들고" 라고 해석해면 될듯.
            model[name] = data;
            model[name] = data[name];  3번째 인자의 끝이 s로 끝나는경우
            ==> Model.places = PlaceWrapper
            ==> Model.places = PlaceWrapper.places  */
        // console.log("_MockData :::\n", _MockData);
        // Util.bindData(_MockData, vm.Model, 'places');
      } else {
          Util.freeze(false);
        }
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  VM
    //====================================================

    // set stars on view.
    function getAverageRating(num) {
      var roundNum = Math.round(num);
      var array = [];
      for (var i = 0; i < roundNum; i++) {
        array.push(i);
      }
      return array;
    }

    function setCurrentPosition() {
      if (!AppStorage.currentPosition) {
        AppStorage.currentPosition = {};
      }
      Util.loading(vm.Model);
      return CurrentPosition.set(AppStorage.currentPosition, 'noLoadingIcon').then(function (currentPosition) {
        console.log("currentPosition :::\n", currentPosition);
        initPromise = init();
        onAfterEnter();
      });
    }

    function loadMore(category) {
      vm.Model[category].buttonLoading = true;
      return placeFindNative({
        category: category,
        theme: $state.params.themeTitle
      }, {
        skip: vm.Model[category].places.length,
        limit: 1
      }).then(function (placesWrapper) {
        console.log("placesWrapper --loadMore-- :::\n", placesWrapper);
        Distance.createDistanceProperty(placesWrapper.places, AppStorage.currentPosition);
        return Util.appendData(placesWrapper, vm.Model[category], 'places');
      }).then(function () {
        vm.Model[category].buttonLoading = false;
      }).then(function () {}).catch(function (err) {
        vm.Model[category].buttonLoading = false;
        Util.error(err);
      });
    }

    //====================================================
    //  Private
    //====================================================

    function init() {
      //서버에서 data를 가져오는 작업을 진행함.
      var premiumPromise = placeFindNative({ category: 'PREMIUM', theme: $state.params.themeTitle });
      var specialPromise = placeFindNative({ category: 'SPECIAL', theme: $state.params.themeTitle });
      var normalPromise = placeFindNative({ category: 'NORMAL', theme: $state.params.themeTitle });
      return $q.all([premiumPromise, specialPromise, normalPromise]).then(function (array) {
        //위의 3개의 array promise를 보내서
        return array; //하나의 array promise가 return됨. (무슨 작업을 하는지는 의문)
      });
    }

    function reset() {
      var Model = {
        loading: false,
        longitude: 126,
        latitude: 37,
        PREMIUM: {
          places: [],
          buttonLoading: false
        },
        SPECIAL: {
          places: [],
          buttonLoading: false
        },
        NORMAL: {
          places: [],
          buttonLoading: false
        }
      };
      angular.copy(Model, vm.Model);
    }

    //====================================================
    //  Modals
    //====================================================

    //====================================================
    //  REST
    //====================================================
    function placeFindNative(extraQuery, extraOperation) {

      var queryWrapper = {
        query: {
          where: {
            geoJSON: {
              $near: {
                $geometry: {
                  type: "Point",
                  coordinates: [AppStorage.currentPosition.longitude, AppStorage.currentPosition.latitude] //longitude, latitude
                },
                $maxDistance: 999999
              }
            }
          },
          // tags: {$in: tags },
          // filter = new RegExp([filter].join(""), "i");
          // $or: [{'name': filter }, {'description': filter }, {'createdBy': filter }],
          // id: {$gt: someId }, id: {$lt: someId }
          // skip: 30,
          limit: 3,
          populate: [{
            property: 'photos',
            criteria: { sort: 'index ASC' }
          }]
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Places.findNative(queryWrapper).$promise.then(function (placesWrapper) {
        console.log("placesWrapper :::\n", placesWrapper);
        return placesWrapper; //object안에 array가 존재
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('ThemeSearchListModel', ThemeSearchListModel);

  ThemeSearchListModel.$inject = [];

  function ThemeSearchListModel() {

    var Model = {
      handle: 'theme-search-list',
      loading: false,
      longitude: 126,
      latitude: 37,
      PREMIUM: {
        places: [],
        buttonLoading: false
      },
      SPECIAL: {
        places: [],
        buttonLoading: false
      },
      NORMAL: {
        places: [],
        buttonLoading: false
      }

    };

    return Model;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('zCouponDetailController', zCouponDetailController);

  zCouponDetailController.$inject = ['$scope', '$ionicModal', '$state', '$q', 'zCouponDetailModel', 'Coupons', 'Util', 'AppStorage', 'Message'];

  function zCouponDetailController($scope, $ionicModal, $state, $q, zCouponDetailModel, Coupons, Util, AppStorage, Message) {

    var initPromise;
    var noLoadingStates = [];
    var CouponDetail = this;
    CouponDetail.Model = zCouponDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('modal.hidden', function () {
      zCouponDetailModel.form.password = '';
    });

    CouponDetail.closeModal = closeModal;
    CouponDetail.useCoupon = useCoupon; // from modal
    CouponDetail.getCurrentDate = getCurrentDate; // from modal

    //====================================================
    // View Event
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(zCouponDetailModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!CouponDetail.modal) {
        createModal();
      }
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (coupon) {
          Util.bindData(coupon, zCouponDetailModel, 'coupon');
        }).catch(function (err) {
          Util.error(err);
        });
      } else {}
    }

    //====================================================
    //  Implementation
    //====================================================

    function closeModal() {
      CouponDetail.modal.hide();
    }

    function getCurrentDate() {
      return new Date();
    }

    function useCoupon() {
      Message.loading();
      return couponUse().then(function () {
        CouponDetail.modal.hide();
        Message.alert('쿠폰사용 알림', '쿠폰을 성공적으로 사용하였습니다.');
      }).catch(function (err) {
        CouponDetail.modal.hide();
        if (err.data.message[0] === '0') {
          return Message.alert('쿠폰사용 알림', '전부 사용한 쿠폰입니다.');
        }
      }).finally(function () {
        CouponDetail.modal.hide();
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return couponFindOne();
    }

    function createModal() {
      return $ionicModal.fromTemplateUrl('state/ZZZ/CouponDetail/Modal/CouponModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        CouponDetail.modal = modal;
      });
    }

    //====================================================
    //  REST
    //====================================================
    function couponFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Coupons.findOne(queryWrapper).$promise.then(function (coupon) {
        return coupon;
      });
    }

    function couponUse() {
      var queryWrapper = {
        query: {
          id: $state.params.id,
          password: zCouponDetailModel.form.password,
          usedBy: AppStorage.user.id
        }
      };
      return Coupons.use(queryWrapper).$promise.then(function (updatedCoupon) {
        return updatedCoupon;
      });
    }
  }
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('zCouponDetailModel', zCouponDetailModel);

  zCouponDetailModel.$inject = [];

  function zCouponDetailModel() {

    var Model = {
      handle: 'coupon-detail',
      loading: false,
      coupon: {},
      form: {
        password: ''
      }
    };

    return model;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zLoginController', LoginController);

  LoginController.$inject = ['$http', 'zLoginModel', 'Users', 'Util', 'Message', 'Oauth', 'AppStorage', 'FACEBOOK_KEY', 'KAKAO_KEY', 'SERVER_URL'
  /*, 'TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET', 'GOOGLE_OAUTH_CLIENT_ID'*/
  ];

  function LoginController($http, LoginModel, Users, Util, Message, Oauth, AppStorage, FACEBOOK_KEY, KAKAO_KEY, SERVER_URL
  /*, TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, GOOGLE_OAUTH_CLIENT_ID*/
  ) {

    var Login = this;
    Login.Model = LoginModel;

    Login.localLogin = localLogin;
    Login.loginWithFacebook = loginWithFacebook;
    Login.loginWithKakao = loginWithKakao;
    // Login.loginWithTwitter = loginWithTwitter;
    // Login.loginWithGoogle = loginWithGoogle;

    //====================================================
    //  Implementation
    //====================================================
    function localLogin() {
      Message.loading();
      Users.login({}, LoginModel.form).$promise.then(function (userWrapper) {
        Message.hide();
        console.log("---------- userWrapper ----------");
        console.log(userWrapper);
        AppStorage.user = userWrapper.user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        Util.goToState('Main.MainTab.PostList.PostListRecent', null, 'forward');
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        if (err.status === 403) {
          return Message.alert('로그인 알림', '비밀번호/이메일이 틀렸습니다. 다시 입력해주세요');
        } else {
          return Message.alert();
        }
      });
    }

    function loginWithFacebook() {
      return Oauth.facebook(FACEBOOK_KEY, ["email", "public_profile"]).then(function () {
        Util.goToState('Main.MainTab.PostList.PostListRecent', null, 'forward');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    function loginWithKakao() {
      return Oauth.kakao(KAKAO_KEY).then(function () {
        Util.goToState('Main.MainTab.PostList.PostListRecent', null, 'forward');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    // function loginWithTwitter() {
    //   return $cordovaOauth.twitter(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
    //     .then(function(res) {
    //       console.log("---------- res ----------");
    //       console.log(res);
    //       console.log("HAS TYPE: " + typeof res);
    //     })
    //     .catch(function(err) {
    //       console.log("---------- err ----------");
    //       console.log(err);
    //       console.log("HAS TYPE: " + typeof err);
    //     });
    // }

    // function loginWithGoogle() {
    //   return $cordovaOauth.google(GOOGLE_OAUTH_CLIENT_ID, [
    //       "https://www.googleapis.com/auth/urlshortener", "https://www.googleapis.com/auth/userinfo.email",
    //       "https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/plus.me"
    //     ])
    //     .then(function(res) {
    //       console.log("---------- res ----------");
    //       console.log(res);
    //       console.log("HAS TYPE: " + typeof res);
    //     })
    //     .catch(function(err) {
    //       console.log("---------- err ----------");
    //       console.log(err);
    //       console.log("HAS TYPE: " + typeof err);
    //     });
    // }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zLoginModel', LoginModel);

  LoginModel.$inject = [];

  function LoginModel() {

    var model = {
      form: {
        identifier: null,
        password: null
      }
    };
    return model;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('zCouponListController', zCouponListController);

  zCouponListController.$inject = ['$scope', '$state', '$q', 'zCouponListModel', 'Coupons', 'Message', 'Util'];

  function zCouponListController($scope, $state, $q, zCouponListModel, Coupons, Message, U) {
    var initPromise;
    var noLoadingStates = ['Main.zCouponDetail'];
    var CouponList = this;
    CouponList.Model = zCouponListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    CouponList.refresh = refresh;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!Util.areSiblingViews(noLoadingStates)) {
        Util.loading(zCouponListModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.areSiblingViews(noLoadingStates)) {
        return initPromise.then(function (couponsWrapper) {
          Util.bindData(couponsWrapper, zCouponListModel, 'coupons');
        }).catch(function (err) {
          Util.error(err);
        });
      } else {}
    }

    //====================================================
    //  Implementation
    //====================================================
    function refresh() {
      return init().then(function (couponsWrapper) {
        Util.bindData(couponsWrapper, zCouponListModel, 'coupons');
      }).catch(function (err) {
        Util.error(err);
      }).finally(function () {
        Util.broadcast($scope);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return couponFind();
    }

    //====================================================
    // REST
    //====================================================
    function couponFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            place: $state.params.id
          },
          // quantity: {
          //   '>': 0
          // }
          populates: ['photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Coupons.find(queryWrapper).$promise.then(function (couponsWrapper) {
        return couponsWrapper;
      });
    }
  } //end
})(angular);
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').factory('zCouponListModel', zCouponListModel);

  zCouponListModel.$inject = [];

  function zCouponListModel() {

    var Model = {
      loading: true,
      coupons: [{
        id: 10,
        photos: [{
          id: 0,
          url: 'http://placehold.it/400x400'
        }],
        title: '파워퓌트니스',
        content: '휘트니스 한달 이용권 10% 할인',
        expirationDate: new Date(),
        totalQuantity: 20,
        usedQuantity: 15,
        quantity: 5
      }, {
        id: 11,
        photos: [{
          id: 0,
          url: 'http://placehold.it/400x400'
        }],
        title: '파워퓌트니스1',
        content: '휘트니스 한달 이용권 10% 할인 1',
        expirationDate: new Date(),
        totalQuantity: 20,
        usedQuantity: 5,
        quantity: 15
      }]
    };

    return Model;
  }
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPasswordController', zPasswordController);

  zPasswordController.$inject = ['$scope', 'zPasswordModel', 'Users', 'Message', 'Util'];

  function zPasswordController($scope, zPasswordModel, Users, Message, U) {
    var Password = this;
    Password.Model = zPasswordModel;
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    Password.sendForm = sendForm;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      Util.freeze(false);
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function sendForm() {
      if (!validate()) {
        return Message.alert('비밀번호 변경 알림', '새로운 비밀번호와 재입력한 비밀번호가 다릅니다.');
      }
      return userChangePassword().then(function (data) {
        console.log("---------- data ----------");
        console.log(data);
        return Message.alert('비밀번호 변경 알림', data.message);
      }).then(function () {
        reset();
        Util.goBack();
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        Message.alert('비밀번호 변경 알림', err.data.message);
        reset();
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function validate() {
      if (zPasswordModel.form.newPassword !== zPasswordModel.newPasswordConfirm) {
        return false;
      } else if (true /*more logic*/) {
          // return false;
        }

      return true;
    }

    function reset() {
      zPasswordModel.form.oldPassword = '';
      zPasswordModel.form.newPassword = '';
      zPasswordModel.newPasswordConfirm = '';
    }

    //====================================================
    //  REST
    //====================================================
    function userChangePassword() {
      return Users.changePassword({
        oldPassword: zPasswordModel.form.oldPassword,
        newPassword: zPasswordModel.form.newPassword
      }).$promise;
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPasswordModel', zPasswordModel);

  zPasswordModel.$inject = [];

  function zPasswordModel() {

    var Model = {
      form: {
        oldPassword: '',
        newPassword: ''
      },
      newPasswordConfirm: ''
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPostCreateController', zPostCreateController);

  zPostCreateController.$inject = ['$scope', '$q', 'zPostCreateModel', 'Posts', 'Util', 'Message'];

  function zPostCreateController($scope, $q, zPostCreateModel, Posts, Util, Message) {
    var initPromise;
    var noLoadingStates = [];
    var PostCreate = this;
    PostCreate.Model = zPostCreateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    PostCreate.createPost = createPost;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(zPostCreateModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (message) {
          Util.freeze(false);
          console.log("---------- message ----------");
          console.log(message);
        }).catch(function (err) {
          Util.error(err);
        });
      } else {}
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function createPost() {
      Message.loading();
      return postCreate().then(function (createdPost) {
        console.log("---------- createdPost ----------");
        console.log(createdPost);
        return Message.alert('글작성 알림', '글을 성공적으로 작성하였습니다.');
      }).then(function () {
        Util.goToState('Main.zPostList', null, 'back');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return $q.resolve({
        message: 'empty'
      });
    }

    function reset() {
      zPostCreateModel.form.title = '';
      zPostCreateModel.form.content = '';
    }

    //====================================================
    //  REST
    //====================================================
    function postCreate() {
      var queryWrapper = {
        query: {
          category: 'CATEGORY_NAME-POST',
          title: zPostCreateModel.form.title,
          content: zPostCreateModel.form.content
        }
      };
      return Posts.create({}, queryWrapper).$promise.then(function (dataWrapper) {
        var post = dataWrapper.data;
        return post;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPostCreateModel', zPostCreateModel);

  zPostCreateModel.$inject = [];

  function zPostCreateModel() {

    var Model = {
      form: {
        title: '',
        content: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPostListController', zPostListController);

  zPostListController.$inject = ['$scope', '$q', 'zPostListModel', 'Util', 'Posts'];

  function zPostListController($scope, $q, zPostListModel, Util, Posts) {
    var initPromise;
    var noLoadingStates = ['Main.zPostDetail'];
    var PostList = this;
    PostList.Model = zPostListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    PostList.refresh = refresh;
    PostList.loadMore = loadMore;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(zPostListModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (postsWrapper) {
          console.log("---------- postsWrapper ----------");
          console.log(postsWrapper);
          Util.bindData(postsWrapper, zPostListModel, 'posts');
        }).catch(function (err) {
          Util.error(err);
        });
      } else {}
    }

    //====================================================
    //  Implementation
    //====================================================
    function refresh() {
      return init().then(function (postsWrapper) {
        console.log("---------- postsWrapper ----------");
        console.log(postsWrapper);
        Util.bindData(postsWrapper, zPostListModel, 'posts');
      }).catch(function (err) {
        Util.error(err);
      }).finally(function () {
        Util.broadcast($scope);
      });
    }

    function loadMore() {
      var last = zPostListModel.posts.length - 1;
      return find({
        id: {
          '<': zPostListModel.posts[last].id
        }
      }).then(function (postsWrapper) {
        Util.appendData(postsWrapper, zPostListModel, 'posts');
      }).catch(function (err) {
        Util.error(err);
      }).finally(function () {
        Util.broadcast($scope);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return find();
    }

    //====================================================
    // REST
    //====================================================
    function find(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            category: 'CATEGORY_NAME-POST'
          },
          limit: 20,
          sort: 'updatedAt DESC',
          populate: ['owner']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.find(queryWrapper).$promise.then(function (postsWrapper) {
        return postsWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPostListModel', zPostListModel);

  zPostListModel.$inject = [];

  function zPostListModel() {

    var Model = {
      handle: 'post-list',
      loading: false,
      posts: []
    };

    return Model;
  }
})();
'use strict';

(function (angular) {
  'use strict';

  angular.module('app').controller('zPostDetailController', zPostDetailController);

  zPostDetailController.$inject = ['$scope', '$state', '$q', 'zPostDetailModel', 'Posts', 'Comments', 'Message', 'Util'];

  function zPostDetailController($scope, $state, $q, zPostDetailModel, Posts, Comments, Message, U) {
    var initPromise;
    var noLoadingStates = [];
    var PostDetail = this;
    PostDetail.Model = zPostDetailModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    PostDetail.refresh = refresh;
    PostDetail.loadMoreComments = loadMoreComments;
    PostDetail.destroyPost = destroyPost;
    PostDetail.createComment = createComment;
    PostDetail.destroyComment = destroyComment;

    // App Specific
    PostDetail.showBubble = false;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(zPostDetailModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (array) {
          var post = array[0];
          var commentsWrapper = array[1];
          Util.bindData(post, zPostDetailModel, 'post');
          Util.bindData(commentsWrapper, zPostDetailModel, 'comments');
          console.log("---------- post ----------");
          console.log(post);
          console.log("---------- commentsWrapper ----------");
          console.log(commentsWrapper);
        }).catch(function (err) {
          Util.error(err);
        });
      } else {}
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function refresh() {
      return init().then(function (array) {
        var post = array[0];
        var commentsWrapper = array[1];
        Util.bindData(post, zPostDetailModel, 'post');
        Util.bindData(commentsWrapper, zPostDetailModel, 'comments');
        console.log("---------- post ----------");
        console.log(post);
        console.log("---------- commentsWrapper ----------");
        console.log(commentsWrapper);
      }).catch(function (err) {
        Util.error(err);
      }).finally(function () {
        Util.broadcast($scope);
      });
    }

    function loadMoreComments() {
      var last = zPostDetailModel.comments.length - 1;
      return commentsFind({
        id: {
          '<': zPostDetailModel.comments[last].id
        }
      }).then(function (commentsWrapper) {
        Util.appendData(commentsWrapper, zPostDetailModel, 'comments');
        console.log("---------- commentsWrapper ----------");
        console.log(commentsWrapper);
      }).catch(function (err) {
        Util.error(err);
      }).finally(function () {
        Util.broadcast($scope);
      });
    }

    function destroyPost() {
      Message.loading();
      return postsDestroy().then(function (destroyedPost) {
        console.log("---------- destroyedPost ----------");
        console.log(destroyedPost);
        return Message.alert('글삭제 알림', '글을 성공적으로 삭제하였습니다.');
      }).then(function () {
        Util.goToState('Main.zPostList', null, 'back');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    function createComment() {
      Message.loading();
      return commentsCreate().then(function (createdComment) {
        console.log("---------- createdComment ----------");
        console.log(createdComment);
        refresh();
        return Message.alert('댓글달기 알림', '댓글을 성공적으로 작성하였습니다.');
      }).then(function () {
        reset();
      }).catch(function (err) {
        Util.error(err);
      });
    }

    function destroyComment(commentId) {
      Message.loading();
      var extraQuery = {
        id: commentId
      };
      return commentsDestroy(extraQuery).then(function (destroyedComment) {
        console.log("---------- destroyedComment ----------");
        console.log(destroyedComment);
        refresh();
        return Message.alert('댓글 알림', '댓글을 성공적으로 삭제하였습니다.');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return $q.all([postsFindOne(), commentsFind()]);
    }

    function reset() {
      Util.resetSlides();
      PostDetail.showBubble = false;
      PostDetail.commentContent = '';
    }

    //====================================================
    // REST
    //====================================================
    function postsFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          },
          populate: ['owner', 'photos']
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        return post;
      });
    }

    function postsDestroy(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          }
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.destroy(queryWrapper).$promise.then(function (destroyedPost) {
        return destroyedPost;
      });
    }

    function commentsFind(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            post: $state.params.id
          },
          sort: 'id DESC',
          limit: 20
        }
      };
      // populate: ['owner']
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Comments.find(queryWrapper).$promise.then(function (commentsWrapper) {
        return commentsWrapper;
      });
    }

    function commentsCreate() {
      var queryWrapper = {
        query: {
          post: $state.params.id,
          content: PostDetail.form.commentContent
        }
      };
      return Comments.create({}, queryWrapper).$promise.then(function (createdComment) {
        return createdComment;
      });
    }

    function commentsDestroy(extraQuery) {
      var queryWrapper = {
        query: {
          where: {
            id: ''
          }
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      return Comments.destroy(queryWrapper).$promise.then(function (destroyedComment) {
        return destroyedComment;
      });
    }
  } //end
})(angular);
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zPostDetailModel', zPostDetailModel);

  zPostDetailModel.$inject = [];

  function zPostDetailModel() {

    var Model = {
      handle: 'post-detail',
      loading: false,
      post: {},
      comments: [],
      form: {
        commentContent: ''
      }
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zPostUpdateController', zPostUpdateController);

  zPostUpdateController.$inject = ['$scope', '$state', '$q', 'zPostUpdateModel', 'Util', 'Posts', 'Message'];

  function zPostUpdateController($scope, $state, $q, zPostUpdateModel, Util, Posts, Message) {
    var initPromise;
    var noLoadingStates = [];
    var PostUpdate = this;
    PostUpdate.Model = zPostUpdateModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);

    PostUpdate.updatePost = updatePost;

    //====================================================
    // View Events
    //====================================================
    function onBeforeEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        Util.loading(zPostUpdateModel);
        initPromise = init();
      } else {
        Util.freeze(false);
      }
    }

    function onAfterEnter() {
      if (!Util.hasPreviousStates(noLoadingStates)) {
        return initPromise.then(function (post) {
          Util.bindData(post, zPostUpdateModel, 'form');
          console.log("---------- post ----------");
          console.log(post);
        }).catch(function (err) {
          Util.error(err);
        });
      } else {}
    }

    function onBeforeLeave() {
      return reset();
    }

    //====================================================
    //  Implementation
    //====================================================
    function updatePost() {
      Message.loading();
      return postUpdate().then(function (updatedPost) {
        console.log("---------- updatedPost ----------");
        console.log(updatedPost);
        return Message.alert('글 수정 알림', '글수정을 완료하였습니다.');
      }).then(function () {
        Util.goToState('Main.zPostDetail', {
          id: $state.params.id
        }, 'back');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function init() {
      return postFindOne();
    }

    function reset() {
      zPostUpdateModel.form = {
        title: '',
        content: ''
      };
    }

    //====================================================
    //  REST
    //====================================================
    function postFindOne(extraQuery, extraOperation) {
      var queryWrapper = {
        query: {
          where: {
            id: $state.params.id
          }
        }
      };
      angular.extend(queryWrapper.query.where, extraQuery);
      angular.extend(queryWrapper.query, extraOperation);
      return Posts.findOne(queryWrapper).$promise.then(function (post) {
        return post;
      });
    }

    function postUpdate() {
      var queryWrapper = {
        query: {
          id: $state.params.id,
          title: zPostUpdateModel.form.title,
          content: zPostUpdateModel.form.content
        }
      };

      return Posts.update({}, queryWrapper).$promise.then(function (updatedPost) {
        return updatedPost;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('PostFitUpdateModel', PostFitUpdateModel);

  PostFitUpdateModel.$inject = [];

  function PostFitUpdateModel() {

    var Model = {
      form: {}
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zProfileController', zProfileController);

  zProfileController.$inject = ['$scope', '$timeout', 'zProfileModel', 'Users', 'AppStorage', 'Util', 'Photo', 'Message'];

  function zProfileController($scope, $timeout, zProfileModel, Users, AppStorage, Util, Photo, Message) {
    var Profile = this;
    Profile.Model = zProfileModel;
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    Profile.getPhoto = getPhoto;
    Profile.sendForm = sendForm;

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      Util.freeze(false);
    }

    function onAfterEnter() {
      return userFindOne().then(function (user) {
        console.log("---------- user ----------");
        console.log(user);
        $timeout(function () {
          AppStorage.user = user;
          zProfileModel.form = user;
          console.log("---------- zProfileModel.form ----------");
          console.log(zProfileModel.form);
        }, 0);
      }).catch(function (err) {
        return Util.error(err);
      });
    }
    //====================================================
    //  Implementation
    //====================================================

    function getPhoto() {
      return Photo.get('gallery', 600, true, 300, 'square', 1).then(function (base64) {
        zProfileModel.form.files = [base64];
      }).catch(function (err) {
        console.log("---------- err.data.message === cancelled ----------");
        console.log(err.data.message);
        // Util.error(err);
      });
    }

    function sendForm() {
      Message.loading();
      userUpdate().then(function (user) {
        console.log("---------- user ----------");
        console.log(user);
        Message.hide();
        return Message.alert('프로필 변경 알림.', '프로필을 성공적으로 변경하였습니다.');
      }).then(function () {
        Util.goBack();
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        Message.hide();
        Message.alert();
      });
    }

    //====================================================
    //  REST
    //====================================================
    function userFindOne() {
      return Users.findOne({
        id: AppStorage.user.id
      }).$promise;
    }

    function userUpdate() {
      return Users.update({}, {
        files: zProfileModel.form.files,
        name: zProfileModel.form.name,
        nickname: zProfileModel.form.nickname
      }).$promise;
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zProfileModel', zProfileModel);

  zProfileModel.$inject = [];

  function zProfileModel() {

    var model = {
      form: {
        files: [],
        name: '',
        nickname: ''
      }
    };

    return model;
  }
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function () {
  'use strict';

  angular.module('app').controller('zSignupController', zSignupController);

  zSignupController.$inject = ['$scope', '$timeout', 'zSignupModel', 'Photo', 'Users', 'Util', 'Message', 'Dom'];

  function zSignupController($scope, $timeout, zSignupModel, Photo, Users, Util, Message, Dom) {

    var Signup = this;
    Signup.Model = zSignupModel;

    Signup.getPicture = getPicture;
    Signup.register = register;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      Util.freeze(false);
    }

    //====================================================
    //  Implementation
    //====================================================
    function getPicture() {
      zSignupModel.imgLoading = true;
      return Photo.get('gallery', 800, true, 300, 'square', 1).then(function (base64) {
        zSignupModel.form.files = [];
        zSignupModel.form.files[0] = base64;
        $timeout(function () {
          zSignupModel.imgLoading = false;
        }, 2000);
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        console.log("HAS TYPE: " + (typeof err === 'undefined' ? 'undefined' : _typeof(err)));
      });
    }

    function register() {
      if (!validate()) {
        return false;
      }
      Message.loading();
      zSignupModel.form.username = zSignupModel.form.email;
      return userRegister().then(function (data) {
        console.log("---------- data ----------");
        console.log(data);
        Message.alert('회원가입 알림', '회원가입을 성공적으로 하셨습니다.');
      }).then(function () {
        Util.goToState('zLogin', null, 'back');
      }).catch(function (err) {
        Util.error(err);
      });
    }

    //====================================================
    //  Helper
    //====================================================
    function validate() {
      var alert = Message.alert.bind(Message, '회원가입 알림');
      var form = zSignupModel.form;
      if (zSignupModel.form.files.length === 0) {
        alert('사진을 등록해주세요');
        return false;
      } else if (!form.name) {
        alert('이름을 입력해주세요').then(function () {
          Dom.focusById('name');
        });
        return false;
      } else if (!form.nickname) {
        alert('별명을 입력해주세요').then(function () {
          Dom.focusById('nickname');
        });
        return false;
      } else if (!form.email) {
        alert('이메일을 입력해주세요').then(function () {
          Dom.focusById('email');
        });
        return false;
      } else if (form.password !== zSignupModel.confirmPassword) {
        alert('비밀번호를 동일하게 입력해주세요').then(function () {
          Dom.focusById('password');
        });
        return false;
      } else if (!validateEmail(form.email)) {
        alert('이메일이 아닙니다, 다시 입력해주세요').then(function () {
          Dom.focusById('email');
        });
        return false;
      } else if (!zSignupModel.agree) {
        alert('이용약관을 동의 해주시기 바랍니다');
        return false;
      } else {
        return true;
      }
    }

    function validateEmail(email) {
      var re = /\S+@\S+\.\S+/;
      return re.test(email);
    }

    //====================================================
    //  REST
    //====================================================
    function userRegister() {
      var form = zSignupModel.form;
      return Users.register({}, {
        files: form.files,
        name: form.name,
        nickname: form.nickname,
        email: form.email,
        username: form.username,
        password: form.password
      }).$promise.then(function (dataWrapper) {
        return dataWrapper.data;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zSignupModel', zSignupModel);

  zSignupModel.$inject = [];

  function zSignupModel() {

    var Model = {
      imgLoading: false,
      form: {
        files: [],
        name: '',
        nickname: '',
        email: '',
        username: '',
        password: ''
      },
      confirmPassword: null,
      agree: false
    };

    return Model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zTermsController', zTermsController);

  zTermsController.$inject = ['$scope', 'zTermModel', 'Util', 'APP_NAME_KOREAN'];

  function zTermsController($scope, zTermModel, Util, APP_NAME_KOREAN) {
    var Terms = this;
    Terms.Model = zTermModel;

    Terms.appKorean = APP_NAME_KOREAN;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //====================================================
    //  View Events
    //====================================================
    function onBeforeEnter() {
      Util.freeze(false);
    }
    //====================================================
    //  Implementation
    //====================================================
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zTermsModel', zTermsModel);

  zTermsModel.$inject = [];

  function zTermsModel() {

    var model = {};

    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('zTransactionController', zTransactionController);

  zTransactionController.$inject = ['$window', 'zTransactionModel'];

  function zTransactionController($window, zTransactionModel) {

    var IMP = $window.IMP;
    IMP.init('imp37410820');
    var Transaction = this;

    Transaction.Model = zTransactionModel;
    Transaction.test = test;

    function test() {
      // $window.cordova.InAppBrowser.open('http://192.168.0.10:1337', '_blank', 'location=no');
      return IMP.request_pay({
        pay_method: 'card',
        escrow: false,
        merchant_uid: 'merchant_' + new Date().getTime(),
        name: '주문명:결제테스트',
        amount: 14000,
        buyer_email: 'iamport@siot.do',
        buyer_name: '구매자이름',
        buyer_tel: '070-8658-8870',
        buyer_addr: '서울특별시 강남구 삼성동',
        buyer_postcode: '123-456',
        vbank_due: '20151231',
        app_scheme: 'joodang'
        // m_redirect_url : 'http://192.168.0.10:1337'
      }, function (rsp) {
        var msg;
        if (rsp.success) {
          msg = '결제가 완료되었습니다.';
          msg += '고유ID : ' + rsp.imp_uid;
          msg += '상점 거래ID : ' + rsp.merchant_uid;
          msg += '결제 금액 : ' + rsp.paid_amount;
          msg += '카드 승인번호 : ' + rsp.apply_num;
          console.log("msg :::\n", msg);
        } else {
          msg = '결제에 실패하였습니다.';
          msg += '에러내용 : ' + rsp.error_msg;
          console.log("msg :::\n", msg);
        }
      });
    }
  } //end
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zTransactionModel', zTransactionModel);

  zTransactionModel.$inject = [];

  function zTransactionModel() {

    var Model = {};

    return Model;
  }
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function () {
  'use strict';

  angular.module('app').controller('zLoginController', zLoginController);

  zLoginController.$inject = [
  //'$cordovaOauth',
  'Oauth', '$scope', 'zLoginModel', 'Users', 'Util', 'Message', 'FACEBOOK_KEY', 'TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET', 'GOOGLE_OAUTH_CLIENT_ID', 'AppStorage'];

  function zLoginController(
  //$cordovaOauth,
  Oauth, $scope, zLoginModel, Users, Util, Message, FACEBOOK_KEY, TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, GOOGLE_OAUTH_CLIENT_ID, AppStorage) {

    var Login = this;
    Login.Model = zLoginModel;

    Login.localLogin = localLogin;
    Login.loginWithFacebook = loginWithFacebook;
    Login.loginWithTwitter = loginWithTwitter;
    Login.loginWithGoogle = loginWithGoogle;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //====================================================
    //  View events
    //====================================================
    function onBeforeEnter() {
      Util.freeze(false);
    }

    //====================================================
    //  Implementation
    //====================================================
    function localLogin() {
      Message.loading();
      return userLogin().then(function (userWrapper) {
        Message.hide();
        console.log("---------- userWrapper ----------");
        console.log(userWrapper);
        AppStorage.user = userWrapper.user;
        AppStorage.token = userWrapper.token;
        AppStorage.isFirstTime = false;
        Util.goToState('Main.MainTab.PostList.PostListRecent', null, 'forward');
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        if (err.status === 403) {
          return Message.alert('로그인 알림', '비밀번호/이메일이 틀렸습니다. 다시 입력해주세요');
        } else {
          return Message.alert();
        }
      });
    }

    function loginWithFacebook() {
      return $cordovaOauth.facebook(FACEBOOK_KEY, ["email", "public_profile"]).then(function (res) {
        console.log("---------- res ----------");
        console.log(res);
        //====================================================
        //  TODO: send token to our server
        //====================================================
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
      });
    }

    function loginWithTwitter() {
      return $cordovaOauth.twitter(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET).then(function (res) {
        console.log("---------- res ----------");
        console.log(res);
        //====================================================
        //  TODO: send token to our server
        //====================================================
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        console.log("HAS TYPE: " + (typeof err === 'undefined' ? 'undefined' : _typeof(err)));
      });
    }

    function loginWithGoogle() {
      return $cordovaOauth.google(GOOGLE_OAUTH_CLIENT_ID, ["https://www.googleapis.com/auth/urlshortener", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/plus.me"]).then(function (res) {
        console.log("---------- res ----------");
        console.log(res);
        //====================================================
        //  TODO: send token to our server
        //====================================================
      }).catch(function (err) {
        console.log("---------- err ----------");
        console.log(err);
        console.log("HAS TYPE: " + (typeof err === 'undefined' ? 'undefined' : _typeof(err)));
      });
    }

    //====================================================
    //  REST
    //====================================================
    function userLogin() {
      return Users.login({}, {
        identifier: zLoginModel.form.identifier,
        password: zLoginModel.form.password
      }).$promise.then(function (userWrapper) {
        return userWrapper;
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('zLoginModel', zLoginModel);

  zLoginModel.$inject = [];

  function zLoginModel() {

    var model = {
      form: {
        identifier: null,
        password: null
      }
    };
    return model;
  }
})();